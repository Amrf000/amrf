![链表常见问题总结](https://hujianboo.github.io/20198/03/18/%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/)
### 1.从头到尾打印链表[](#1从头到尾打印链表)

    //递归版本
    void LinkListNodePrint(LinkNode * head){
        if(!head) return ;
        cout << head -> val<<" ";
        LinkListNodePrint(head -> next);
    } 
    
    
    //非递归版本
    void LinkListNodePrint(LinkNode * head){
        if(!head) return ;
        for(;head != NULL;head = head -> next){
            cout << head -> val <<' ';
        }
    } 
    

### 2.删除一个无头单链表的非尾节点(不能遍历链表)[](#2删除一个无头单链表的非尾节点不能遍历链表)

    void LinkListPop(LinkNode* pos){
        
        LinkNode* posNext = pos -> next;
        pos -> val = posNext -> val;
        pos -> next = posNext -> next;
    }
    

### 3.在无头单链表的一个节点前插入一个节点(不能遍历链表)[](#3在无头单链表的一个节点前插入一个节点不能遍历链表)

    void LinkListInsert(LinkNode* pos,LinkNode* newNode){
        ListNode * posNext = pos -> next;
        pos -> next = newNode;
        newNode -> next = posNext;
        swap(pos->val ,newNode->val)
    
    }
    

### 单链表实现约瑟夫环[](#单链表实现约瑟夫环)

    void LinkListJosephCircle(LinkNode* head,int size){
        LinkNode *cur = head;
        if(!cur) return;
        if(cur -> next == cur) return;
        for(;cur != cur -> next;){
            for(int i = 0;i < size;i++){
                cur = cur -> next;
            }
            cur -> data = cur -> next -> data;
            cur -> next = cur -> next -> next;
        };
    }
    

### 逆置/反转单链表[](#逆置反转单链表)

    //新建链表反转
    LinkNode * reverseLinklist(LinkNode* head){
        if(!head) return NULL;
        LinkNode * dummy = new LinkNode(-1);
        stack<int> st;
        while(head){
            st.push(head -> val);
            head = head -> next ;
        };
        LinkNode * cur = dummy;
        while(!st.empty()){
            LinkNode * newNode = new LinkNode(st.top());
            cur -> next = newNode;
            cur = cur -> next;
            st.pop();
        }
        cur -> next = NULL  ;
        return dummy -> next;
    }
    
    
    //原地链表反转(通常没有头指针)
    LinkNode* reverserLinklist(LinkNode* head){
        if(!head || !head -> next) return head;
        LinkNode* pre = head,cur = head -> next;
        pre -> next = NULL;
        while(cur -> next!=NULL){
            LinkNode* temp = cur -> next;
            cur -> next = pre;
            pre = cur;
            cur = temp;
        }
        cur -> next = pre;
        return cur;
    }
    

    //单链表排序(冒泡 && 快速)
    // LinkNode* sortLinklist(LinkNode* head){
    //     vector<int> vec;
    //     if(!head) return head;
    //     while(head){
    //         vec.push_back(head -> val);
    //         head = head -> next;
    //     }    
    // }
    void swap(LinkNode*(()));
    LinkNode* sortLinklist(LinkNode* head){
        if(!head) return head;
        int length = 0;
        LinkNode* tail = new LinkNode(-1);
        LinkNode* temp = head;
        while(temp){
            length++;
            temp = temp -> next;
        }
        for(int i = 0; i < length;i++)
            for(int j = 0;j < length - i - 1;j++){
                swap(cur,cur->next);
                cur = cur -> next;
            };
        }
    }
    
    

### 合并两个有序链表，合并后依然有序[](#合并两个有序链表合并后依然有序)

    LinkNode* merge(LinkNode* list1,LinkNode* list2){
        LinkNode* dummy = new LinkNode(-1);
        LinkNode* cur = dummy ;
        
        while(list1->next && list2-> next){
            if(list1->val <= list2 -> val){
                cur -> next = new LinkNode(list1 -> val);
                cur = cur -> next;
                list1 = list1 -> next;
            }else{
                cur -> next = new LinkNode(list2 -> val);
                cur = cur -> next;
                list2 = list2 -> next;
            };
        };
        if(!list1 -> next && list2 -> next){
            cur -> next = list2;
        };
        if(!list2 -> next && list1 -> next){
            cur -> next = list1;
        };
        return dummy -> next;
    }
    

### 查找单链表中间节点，要求只能遍历一次链表[](#查找单链表中间节点要求只能遍历一次链表)

    LinkNode *findMiddle(LinkNode* head){
        if(!head) return head;
        LinkNode * fast = head;
        LinkNode * slow = head;
        while(fast != NULL && fast -> next != NULL){
            fast = fast -> next -> next;
            slow = slow -> next;
        };
        return slow;
    };
    

### 删除链表的倒数第K个节点，要求只能遍历一次链表[](#删除链表的倒数第k个节点要求只能遍历一次链表)

    LinkNode *findK(LinkNode* head,int k){
        LinkNode * fast = head;
        LinkNode * slow = head;
        while(--k){
            fast = fast -> next;
        };
        while(fast -> next != NULL){
            fast = fast -> next;
            slow = slow -> next;
        }
        return slow;
    }
    
    

### 判断单链表是否带环？若带环，求环的长度？求环的入口？并计算。[](#判断单链表是否带环若带环求环的长度求环的入口并计算)

    LinkNode *
    
    

### 判断两个链表是否相交，若相交，求交点[](#判断两个链表是否相交若相交求交点)

    LinkNode * findMeet(LinkNode* list1,LinkNode* list2){
        int length1 = 0,length2 = 0;
        if(!list1 && !list2) return NULL;
        while(list1){
            length1++;
            list1 = list1 -> next;
        };
        while(list2){
            length2++;
            list2 = list2 -> next;
        };
        if(length1 > length2){
            int deltaLength = length1 - length2;
            while(deltaLength--){
                list1 = list1 -> next;
            }
        }
        else if(length2 > length1){
            int deltaLength = length2 - length1;
            while(deltaLength--){
                list2 = list2 -> next;
            };
        };
        while(list1 != list2){
            list1 = list1 -> next;
            list2 = list2 -> next;
        };
    
        return list2;    
    }    
    

### 复杂链表的复制。一个链表的每个节点，有一个指向next指针指向下一个节点，还有一个random指针指向这个链表中的一个随机节点或者NULL，现在要求实现复制这个链表，返回复制后的新链表。[](#复杂链表的复制一个链表的每个节点有一个指向next指针指向下一个节点还有一个random指针指向这个链表中的一个随机节点或者null现在要求实现复制这个链表返回复制后的新链表)

    LinkNode * copyLinklist(LinkNode *head){
        LinkNode * cHead = LinkNode()
    }
    

* * *

*   [Previous  
    udp协议栈源码---数据收发的处理过程追踪分析](/2018/12/20/udp%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%BA%90%E7%A0%81%E8%BF%BD%E8%B8%AA%E6%B5%85%E6%9E%90/ "udp协议栈源码---数据收发的处理过程追踪分析")