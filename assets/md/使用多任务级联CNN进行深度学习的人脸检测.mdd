![使用多任务级联CNN进行深度学习的人脸检测](https://towardsdatascience.com/face-detection-with-deep-learning-using-multi-tasked-cascased-cnn-8721435531d5)
使用多任务级联CNN进行深度学习的人脸检测
=====================

检测照片中的面部很容易被人类解决，尽管鉴于面部的动态性质，计算机在历史上一直存在挑战。例如，无论面对的方向或角度，光线水平，衣服，配件，头发颜色，面部毛发，化妆品，年龄等，都必须检测面部。
----------------------------------------------------------------------------------------------

[![迪兰Jayasekara](https://miro.medium.com/fit/c/48/48/1*U9e8YMSeXc-rNpn69yj1kA@2x.jpeg)](/@dilan.jay?source=post_page-----8721435531d5----------------------)

[迪兰Jayasekara](/@dilan.jay?source=post_page-----8721435531d5----------------------)

跟随

[9月3日](/face-detection-with-deep-learning-using-multi-tasked-cascased-cnn-8721435531d5?source=post_page-----8721435531d5----------------------) · 7 分钟阅读

![](https://miro.medium.com/max/30/0*RJx_GAKNslyVBauj?q=20)

摄影：[Jerry Zhang](https://unsplash.com/@z734923105?utm_source=medium&utm_medium=referral)，[来自Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)

在我之前的文章中，我谈到了使用Haar Cascades的Open CV进行面部检测。如果您还没有机会通过它，可以点击下面的链接阅读。

[

使用Python在Webcam上进行人脸检测模型


----------------------------

### 

人脸检测是一种计算机技术，适用于需要......的许多不同应用。

#### 

towardsdatascience.com



](/https-medium-com-dilan-jay-face-detection-model-on-webcam-using-python-72b382699ee9?source=post_page-----8721435531d5----------------------)

通过使用我已解释过的模型，在静态照片上运行示例，我们可以看到许多面部被正确检测到，但结果并不完美，可能通过进一步调整可能获得更好的结果，也许后期处理边界框。

深度学习的人脸检测
=========

有许多方法用于人脸检测和所有方法，简称“ **多任务级联卷积神经网络”或**简称[MTCNN](http://kpzhang93.github.io/)，由[Kaipeng Zhang](http://kpzhang93.github.io/)等人描述。在2016年题为“ [使用多任务级联卷积网络进行联合人脸检测和对齐](https://arxiv.org/abs/1604.02878) ”的论文中。

> 该网络采用具有三个网络的级联结构; 首先将图像重新缩放到一系列不同大小（称为图像金字塔），然后第一个模型（Proposal Network或P-Net）提出候选面部区域，第二个模型（Refine Network或R-Net）过滤边界框，第三个模型（输出网络或O-Net）提出了面部标志

根据自己的话说：

> “在本文中，我们提出了一个新的框架，通过多任务学习使用统一的级联CNN来整合这两个任务。拟议的CNN包括三个阶段。在第一阶段，它通过浅CNN快速生成候选窗口。然后，它通过更复杂的CNN细化窗口以拒绝大量非面部窗口。最后，它使用更强大的CNN来细化结果并输出面部地标位置。“

从纸上拍摄的下图提供了从上到下的三个阶段以及从左到右的每个阶段的输出的有用总结。

![](https://miro.medium.com/max/25/1*DamjMutBsSHiSHzg_axlVg.png?q=20)

该模型称为多任务网络，因为级联中的三个模型（P-Net，R-Net和O-Net）中的每个模型都经过三个任务的训练，

例如，做出**三种预测** ; 它们是：**面部分类**，**边界框回归和面部地标定位。**

三种型号没有直接连接，可以作为短跑比赛的一小部分。当一轮结束时，下一轮开始，依此类推，直到第3圈结束。

这允许**在各级之间执行附加处理，**例如，在将第一级P-Net提供给第二级R-Net模型之前，使用非最大抑制（**NMS**）来过滤由第一级P-Net提出的候选边界框。

**MTCNN**架构**实施起来**相当**复杂。**值得庆幸的是，该架构的开源实现可以在新数据集上进行训练，以及可以直接用于人脸检测的预训练模型。值得注意的是[官方发布的文件中](https://github.com/kpzhang93/MTCNN_face_detection_alignment)使用的代码和模型，以及[Caffe深度学习框架中](http://caffe.berkeleyvision.org/)提供的实现。

也许最好的第三方基于Python的MTCNN项目被IvándePaz [Centeno](https://www.linkedin.com/in/ivandepazcenteno/)称为“ [MTCNN](https://github.com/ipazc/mtcnn) ” ，或者ipazc，在许可的MIT开源许可下提供。[](https://www.linkedin.com/in/ivandepazcenteno/)

_MTCNN_项目，我们将其称为_ipazc / MTCNN，_以区别于网络名称，**使用TensorFlow和OpenCV**提供MTCNN架构的实现。这个项目有两个主要的好处;

1.  它提供了性能最佳的预训练模型。
2.  它可以作为库安装，可以在您自己的代码中使用。

第1部分：安装MTCNN
============

pip install mtcnn

等到所有组件都安装完毕。

默认情况下，**库将使用预先训练的模型**，尽管您可以使用' **_weights\_file_** '参数指定自己的模型并指定路径或URL，例如：

模型= **MTCNN**（weights\_file = 'filename.npy'）

可以通过' **_min\_face\_size_** '参数指定用于检测面部的最小框大小，该参数**默认为20像素**。构造函数还提供' **_scale\_factor_** '参数来指定输入图像的比例因子，默认为0.709。

配置并加载模型后，可以通过调用**_detect\_faces_**_（）_函数直接检测模型中的面部。

这将返回一个dict对象列表，每个对象**提供一些键，用于检测每个面部的详细信息，**包括：

*   ' **_box_** '：提供边界框左下角的_x_，_y_，以及框的_宽度_和_高度_。
*   ' **_置信度_** '：预测的概率置信度。
*   ' **_keypoints_** '：为' _left\_eye_ '，' _right\_eye_ '，' _nose_ '，' _mouth\_left_ '和' _mouth\_right_ ' 提供_带点的字典_。

第2部分：Python脚本
=============

Step01：检测面部
-----------

\*让我们对以下大学生形象进行面部检测

![](https://miro.medium.com/max/30/1*YymWqwUfVh9TCBZVOBQl5w.jpeg?q=20)

这组照片：

![](https://miro.medium.com/max/30/1*wjGyDY3_seP6CDiF7FBBsg.jpeg?q=20)

宝贝步骤; 让我们尝试第一张图片，因为它只有四个人。

**  
使用mtcnn对**来自mtcnn.mtcnn的matplotlib导入pyplot **的照片进行#face检测**导入MTCNN **#load image from file** filename ='fl.jpg'pixel \= pyplot.imread（filename）**#create the detector，使用默认权重**检测器= MTCNN（ ）**#detect face in** faces faces = detector.detect\_faces（pixels）for faces in faces：  
 print（face）

通过运行此脚本; 我们的大学生图像加载，然后加载模型，执行面部检测并打印检测到的每个面部的列表。

![](https://miro.medium.com/max/30/1*emyJvYPykgc4zqz0fsb3dg.png?q=20)

每个框都列出了边界框左下角的_x_和_y_坐标，以及_宽度_和_高度_。正如我上面提到的，生成的**关键点**是**' _left\_eye_ '，' _right\_eye_ '，' _nose_ '，' _mouth\_left_ '和' _mouth\_right_ '**。结果表明检测到四（**4**）个边界框。这意味着有四个面孔。

步骤02：在检测到的面上绘制正方形
-----------------

#get coordinates x，y，width，height = result \['box'\] #create形状rect = Rectangle（（x，y），width，height，fill = False，color ='red'）

Step03：在关键点上绘制圆圈

**#draw点**为键，值在结果\[“关键点”\]项目（）：   
**＃创建并绘制圆点**  
 点阵=圈（值，半径= 2，颜色=“红色”）  
 ax.add\_patch（点）

下面是一个名为**_draw\_image\_with\_boxes（）_**的函数，它显示图像，然后为检测到的每个边界框绘制一个红色方块。

def draw\_image\_with\_boxes（filename，**result\_list**）：**#load the image** data = pyplot.imread（filename）**#plot图像** pyplot.imshow（data）**#get上下文的绘图框** ax = pyplot.gca（）**#plot每个框** 的结果在**result\_list**中：**#get坐标** x，y，width，height = result \['box'\] **#create形状** rect = Rectangle（（x，y），width，height，fill = False，color ='red'）**#draw方框** ax.add\_patch（rect）**#show the plot** pyplot.show（）       
     
   

下面列出了使用此功能的完整示例。

完整的代码作为要点

运行该示例绘制照片然后绘制每个检测到的面部的边界框和面部关键点。

Step03：运行并检测框Faces
------------------

我们可以看到所有面部（4）都被正确检测到，并且所有关键点都相当准确。

![](https://miro.medium.com/max/30/1*f3LkqeMI7CYFrOeg-rrTOQ.png?q=20)

我印象深刻:)

现在，让我们试试复杂的图像，里面有十几个人。

![](https://miro.medium.com/max/30/1*ZqvpPRnkIpZ5Wqyp3_R-Fg.png?q=20)

Step04：分别提取每张脸
--------------

我们可能想要提取检测到的面并将它们作为输入传递给另一个系统。

这可以通过直接从照片中提取像素数据来实现; 例如：

#get coordinates x1，y1，width，height = result \['box'\] x2，y2 = x1 + width，y1 + height ＃extract face face = data \[y1：y2，x1：x2\]

我们可以通过提取每个面并将它们绘制为单独的子图来证明这一点。您可以轻松地将它们保存到文件中。下面的_draw\_faces（）_提取并绘制照片中每个检测到的面部。

**＃分别绘制每个面**  
 def draw\_faces（filename，result\_list）：  
 **#load image image**  
 = pyplot.imread（filename）  
 **＃将每个面绘制**  
为范围内的i **的子图**（len（result\_list））：  
 **＃get coordinates**  
 x1，y1， width，height = result\_list \[i\] \['box'\]   
 x2，y2 = x1 + width，y1 + height   
  **#define**  
 subplot pyplot.subplot（1，len（result\_list），i + 1）  
 pyplot.axis（'off'） #plot   
 **face**  
 pyplot.imshow（data \[y1：y2，x1：x2\]）  
 **＃显示绘图**  
 pyplot.show（）

下面列出了为我们的第二张合影照片展示此功能的完整示例。

运行该示例创建一个图表，显示在第二组照片的照片中检测到的每个单独的面部。

![](https://miro.medium.com/max/30/1*m4wrF1C7xGMM_YWtgojVyQ.png?q=20)

您可以从[此处](https://github.com/DilanKalpa/FaceDetectionMTCNN.git)访问完整的源代码。它有4个单独的Python脚本，我相信你可以通过阅读脚本文件的名称来理解它们的含义。

所有这些知识都归功于[https://www.linkedin.com/in/jasonbrownlee/(Jason](https://www.linkedin.com/in/jasonbrownlee/) Brownlee）并在LinkedIn上与我联系[https://www.linkedin.com/in/dilankalpa/](https://www.linkedin.com/in/dilankalpa/)

谢谢！

![](https://miro.medium.com/max/30/0*qZVXGgzLAdeQQH4e?q=20)

照片来自[Courtney Hedger](https://unsplash.com/@cmhedger?utm_source=medium&utm_medium=referral)的[Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)