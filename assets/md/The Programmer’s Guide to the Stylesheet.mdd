![The Programmer’s Guide to the Stylesheet](https://blog.prototypr.io/the-programmers-guide-to-the-stylesheet-13f2dce47429)
The Programmer’s Guide to the Stylesheet
========================================

[![Mohammed Ibrahim](https://miro.medium.com/fit/c/48/48/1*pvHm3KBhwYfHpB63x6F9Ig@2x.jpeg)](/@moib?source=post_page-----13f2dce47429----------------------)

[Mohammed Ibrahim](/@moib?source=post_page-----13f2dce47429----------------------)

Follow

[Aug 30](/the-programmers-guide-to-the-stylesheet-13f2dce47429?source=post_page-----13f2dce47429----------------------) · 14 min read

![](https://miro.medium.com/max/30/1*mdjhvXDdsf9WWcjmZPZLDQ.jpeg?q=20)

![](https://miro.medium.com/max/1794/1*mdjhvXDdsf9WWcjmZPZLDQ.jpeg)

This is neither an introduction to nor a crash course on CSS. Rather, I’m presenting a sanity doctrine for UX engineers, covering certain areas that I believe cause a lot of trouble. If you know enough about writing stylesheets to survive, but you wish it was less painful, then this article is for you.

The secret to good stylesheets is that nobody ever really gets good at them, at least not in any conventional sense. I’ve written thousands of stylesheets and read many more, and I can’t say I’ve ever seen one that I would describe as elegant.

Design is emotional, and so, to an extent, design code will be arbitrary. The goal here is not to force patterns where none exist, but instead to understand the few critical patterns upon which you will form your design architecture.

* * *

Position
========

When you begin CSS work on a project, your first challenge will be to position your elements. There are four main position types, listed below.

Except for the default type, which is `static`, all other types are **positioned**. A positioned element can be moved with the offset properties `top`, `right`, `bottom`, and `left`.

Also, children of a positioned element will be offset relative to the positioned element’s boundary, rather than the screen.

*   **static** (default): Not positioned; element is rendered in the order that it appears in the HTML.
*   **relative:** Similar to static, but element is positioned.
*   **absolute:** Element is removed from HTML order and rendered relative to the nearest positioned parent (or the screen, if none exist).
*   **fixed:** Element is rendered relative to the screen only, and does not scroll with the screen.

Absolute
--------

Once you apply absolute position to an element, that element is no longer rendered in HTML order. Here’s a simple example:

.absolute {  
  position: absolute;  
}<body>  
  <div>1</div>  
  <div>2</div>  
  <div class="absolute">3</div>  
  <div>4</div>  
  <div>5</div>  
</body>

![](https://miro.medium.com/max/30/1*hba__eF274MJVRcRgHOPOw.png?q=20)

![](https://miro.medium.com/max/1284/1*hba__eF274MJVRcRgHOPOw.png)

Because element #3 has absolute position, it no longer affects the position of the elements appearing later in the HTML. Element #4 is rendered as if it follows #2 in the code.

Note that block elements with absolute or fixed position no longer have a default width of 100%. Instead, the width is fit to inner content, and you will need to set the element’s width to 100% in CSS to readjust.

Finally, notice how, since no offsets have been applied to `.absolute`, its initial `top` and `left` positions still respect the element’s HTML position.

Now we apply some offsets:

.absolute {  
  position: absolute;  
  **right: 1em;  
  top: 1em;**  
}

![](https://miro.medium.com/max/30/1*Xo-3hZZ1GeUWUaD609Khrw.png?q=20)

![](https://miro.medium.com/max/1278/1*Xo-3hZZ1GeUWUaD609Khrw.png)

You can see above how we are able to reposition it anywhere in the body by using offset values. Now notice what happens when we have opposing offsets:

.absolute {  
  position: absolute;  
  right: 1em;  
  top: 1em;  
 **left: 75%;  
  bottom: -1em;**  
}

![](https://miro.medium.com/max/30/1*OGHkqOV4GNgUoHfCGmUhug.png?q=20)

![](https://miro.medium.com/max/1200/1*OGHkqOV4GNgUoHfCGmUhug.png)

By using opposing offsets, you can stretch an element with absolute or fixed position to cover an exact area you want.

Fixed
-----

Fixed-position elements are similar to absolute-position elements, except they don’t scroll along with the screen, but rather stay in place. Also, they don’t respect any positioned parent elements, and thus are always positioned relative to the screen.

![](https://miro.medium.com/freeze/max/30/1*G7QxFy5Lx5zAEHMhXRpwwg.gif?q=20)

![](https://miro.medium.com/max/1080/1*G7QxFy5Lx5zAEHMhXRpwwg.gif)

Fixed position is typically used for elements like headers, alerts, or action panels — items which must be accessible at all times for certain UI.

Relative
--------

You will want to use relative position when you have positioned child elements, and you want them to respect their parent boundary, while also rendering the parent boundary in HTML order.

Let’s demonstrate this:

.box {  
  border: 1px solid;  
  display: inline-block;  
  padding: 50px;  
 **position: relative;**  
}.close-button {  
  background-color: #bbb;  
  border-radius: 50%;  
  color: white;  
  height: 1.4em;  
  line-height: 1.3em;  
  position: absolute;  
 **right: 10px;  
  top: 10px;**  
  width: 1.4em;  
}

![](https://miro.medium.com/max/30/1*wPwkdqS8O-j9KP_GRNab_w.png?q=20)

![](https://miro.medium.com/max/1028/1*wPwkdqS8O-j9KP_GRNab_w.png)

Above, we have a box with padding, and a close button with absolute position. Notice how the offsets for `right` and `top` are set to 10px, relative to the parent boundary.

This works because the parent has relative position, and if it did not, then the button would be offset to the top-right corner of the screen, far from the box.

z-index
-------

For elements with absolute, fixed, or relative position, the `z-index` value helps identify how they lay on top of each other:

<div style="z-index: 1">1</div>  
<div style="z-index: 3">3</div>  
<div style="z-index: 4">4</div>  
<div style="z-index: 5">5</div>  
<div style="z-index: 2">2</div>

![](https://miro.medium.com/max/30/1*iqN5a0NGktCjXPIybEbhUA.png?q=20)

![](https://miro.medium.com/max/1024/1*iqN5a0NGktCjXPIybEbhUA.png)

I have a principle that I like to use in my work: `z-index` values 1–5 are free to use across my UI, while multiples of 10 are reserved for [preprocessor variables](https://sass-lang.com/guide), which I reference in my style code:

$z-index-alert: 30;  
$z-index-screen: 20;  
$z-index-header: 10;  
$z-index-footer: 10;

In the code above, I have a `z-index` arrangement which allows me to lay a screen over my header and footer, and then an alert over that screen. This is ideal for prompting a user to stop and respond.

Also, by centralizing my `z-index` variables in a single place, I can modify the order with ease, instead of using “Search all: z-index” in my IDE.

* * *

Gridding
========

I’m not going to waste time debating different gridding philosophies. I’ll tell you that I avoided [flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) for a long time because, well, new things are scary.

Instead, I kept leaning on inline blocks and floats and tables to do things for which the flexbox was designed. I was late to the flex game, but much better late than never.

Flexbox creates a container for items whereby the height and width of each item will adjust automatically, depending on the size of other items inside the flexbox:

.flex {  
  display: flex;  
}<div class="flex">  
  <div>first item</div>  
  <div>second</div>  
  <div>this is the<br/>third item</div>  
  <div>fourth and final item</div>  
</div>

![](https://miro.medium.com/max/30/1*AIyKWfB1ElRO9BNLG-Ikew.png?q=20)

![](https://miro.medium.com/max/1308/1*AIyKWfB1ElRO9BNLG-Ikew.png)

This is where inline blocks fall short in a big way: Flexbox is able to adjust the height of all elements in a row to match the height of the tallest element. This is especially useful to you if vertical symmetry is part of your design strategy.

Now watch how we use the `justify-content` property to position cells laterally in the box:

.flex {  
  display: flex;  
 **justify-content: flex-end;**  
}

![](https://miro.medium.com/max/30/1*7jik3kY3Hf-slQKxjdz45w.png?q=20)

![](https://miro.medium.com/max/1226/1*7jik3kY3Hf-slQKxjdz45w.png)

And then we use the `align-items` property to position cells vertically:

.flex {  
  display: flex;  
  justify-content: flex-end;  
 **align-items: flex-end;**  
}

![](https://miro.medium.com/max/30/1*1-_U_dGrO6bfq_MRfhgXqw.png?q=20)

![](https://miro.medium.com/max/1224/1*1-_U_dGrO6bfq_MRfhgXqw.png)

You can also decide which elements will increase in width to account for empty row space, using the `flex-grow` property:

<div class="flex">  
  <div>first item</div>  
 **<div style="flex-grow: 1">second</div>**  
  <div>this is the<br/>third item</div>  
  <div>fourth and final item</div>  
</div>

![](https://miro.medium.com/max/30/1*Qib4gmIT7G-3WqOFd8pyPA.png?q=20)

![](https://miro.medium.com/max/1312/1*Qib4gmIT7G-3WqOFd8pyPA.png)

Above, you can see that the width of the second element has increased by the width of the previously empty space, pushing the row to 100% width. If any element in a flexbox has the `flex-grow` property, the flexbox will have a default width of 100%.

Now we see what happens when we give the same `flex-grow` value to another element in the flexbox:

<div class="flex">  
  <div>first item</div>  
  <div style="flex-grow: 1">second</div>  
  <div>this is the<br/>third item</div>  
 **<div style="flex-grow: 1">fourth and final item</div>**  
</div>

![](https://miro.medium.com/max/30/1*FQszQ9ZxVPchV_FEYNC75Q.png?q=20)

![](https://miro.medium.com/max/1314/1*FQszQ9ZxVPchV_FEYNC75Q.png)

Notice how the second and fourth elements split the empty space, while the first and third still have the same widths.

When you have uneven columns of text in a row, sometimes using asymmetrical spacing can be easier to read than using equally spaced columns. Try different arrangements, and put on your user hat.

In our final example, we add a higher `flex-grow` value to the fourth element, to demonstrate how a lower priority column gives up some space to a higher one:

<div style="display: flex">  
  <div>first item</div>  
  <div style="flex-grow: 1">second</div>  
  <div>this is the<br/>third item</div>  
 **<div style="flex-grow: 2">fourth and final item</div>**  
</div>

![](https://miro.medium.com/max/30/1*ST1P1f9rmekksT2BHmUd_g.png?q=20)

![](https://miro.medium.com/max/1312/1*ST1P1f9rmekksT2BHmUd_g.png)

* * *

Margin vs padding
=================

It’s not always clear whether you should be using margin or padding, so as a general rule, use margin for paragraph spacing and padding for block spacing.

If your element has a border, consider whether you want the space to exist inside the border (padding) or outside (margin). You may often find yourself using both, if you want a padded element with space around it.

Look at this simple example:

.margin > div {  
  margin: 20px;  
}.padding > div {  
  padding: 20px;  
}<div style="display: flex">  
  <div class="margin">  
    <div>you are a good programmer</div>  
    <div>even on your bad days</div>  
    <div>the fact that you keep coding</div>  
    <div>is all the proof you need</div>  
  </div>  
  <div class="padding">  
    <div>you are good at design</div>  
    <div>because you are human</div>  
    <div>you just need to listen</div>  
    <div>to what other humans want</div>  
  </div>  
</div>

![](https://miro.medium.com/max/30/1*rwoht6vuLw2hbsgO5bKh7A.jpeg?q=20)

![](https://miro.medium.com/max/486/1*rwoht6vuLw2hbsgO5bKh7A.jpeg)

Using the inspector, I’ve highlighted some lines from each column. You can see how margins overlap from line to line, while padding creates space for each line.

* * *

Font size
=========

em and rem
----------

![](https://miro.medium.com/max/30/1*ATjl6mL03Xlb8JuSt2XONA.png?q=20)

![](https://miro.medium.com/max/1280/1*ATjl6mL03Xlb8JuSt2XONA.png)

The [em measurement](https://en.wikipedia.org/wiki/Em_(typography)) was named after the capital letter M, used for its width to measure the boundaries for every other letter in a set. Today, `em` is used in CSS as a multiple of the inherited font size.

Once you set a font size for a parent element, all of its child elements will inherit that font size, unless otherwise specified. Properties like height and width, or even border and shadow sizes, can be set using inherited font sizes.

If you use this concept wisely, most of your sizing values will be set by inheritance. This way, if you need to tweak your font sizes, you only need to change a few values, and the rest will adjust accordingly.

html {  
  font-size: 16px;  
}.banner {  
  font-size: 24px;  
}.banner h1 {  
  font-size: 2em;  
}.banner h2 {  
  font-size: 1.5em;  
}.banner small {  
  font-size: 0.75em;  
}.banner .alert {  
  font-size: 1.25rem;  
}

In the example above, we have a root font size of 16px and a `.banner` element with a font size of 24px. We use inheritance to size all `h1`, `h2`, and `small` tags which are child elements of `.banner`.

In our example, `.banner h1` has a calculated font size of (24px \* 2em) or 48px, `.banner h2` has a calculated font size of (24px \* 1.5em) or 36px, and `.banner small` is (24px \* 0.75em) or 18px.

Note that `.banner .alert` is using `rem` for sizing, therefore it inherits font size directly from the root, which is on the `html` element. In this case, the calculated font size is (16px \* 1.25rem) or 20px.

Nesting
-------

The code below is a sort of riddle:

.content {  
  font-size: 10px;  
}.content > div {  
  font-size: 2em;  
}.content > div > div {  
  font-size: 0.5em;  
}<div class="content">  
  <div>  
    **<div>What is my font size?</div>**  
  </div>  
</div>

The answer is **10px**. Once you set the font size on `.content > div` to be 2em, which has a calculated font size of 20px, that becomes the inherited font size. Therefore, `.content > div > div` will have a calculated font size of ((10px \* 2em) \* 0.5em) = (20px \* 0.5em) = 10px.

Using font size for other size properties
-----------------------------------------

.outer1 {  
  height: 200px;  
  width: 200px;  
}.outer2 {  
  font-size: 200px;  
  height: 1em;  
  width: 1em;  
}<div class="outer1"></div>  
<div class="outer2"></div>

![](https://miro.medium.com/max/30/1*zJjne4Of_Cco2zP6_p9wkw.png?q=20)

![](https://miro.medium.com/max/453/1*zJjne4Of_Cco2zP6_p9wkw.png)

In the example above, we have two ways of creating two visually identical elements. For `.outer1`, we use pixel values for height and width, whereas for `.outer2`, we set a pixel-value font size, and then use `em` to set the height and width based on that font size.

So how do these approaches differ? Well, consider that we wanted to add a child element with a relative height to each `.outer{n}` element:

.inner {  
  height: 0.5em;  
}<div class="outer1">  
  <div class="inner"></div>  
</div>  
<div class="outer2">  
  <div class="inner"></div>  
</div>

![](https://miro.medium.com/max/30/1*w8sunryv2Jjhakz1YDDuAw.png?q=20)

![](https://miro.medium.com/max/456/1*w8sunryv2Jjhakz1YDDuAw.png)

For the first `.inner` element, since it has no parent with a font size, it inherits the `body` font size, which in this case is 16px. Therefore, the calculated height is (16px \* 0.5em) or 8px.

For `.outer2`, however, the `.inner` element inherits a font size of 200px, so the calculated height is 100px.

Keep in mind that, with the second approach, your text will no longer inherit the root font size, so you will need to set font sizes for your text tags. I personally only use the second approach for fancy animations with lots of empty tags and very little text.

* * *

Pseudo-classes
==============

Many of us are familiar with the CSS state selectors like `:hover` and `:focus`, but what if you wanted to style specific elements in a set? In the example below, we give bottom borders to each row in a set, except for the fourth one:

.row {  
  border-bottom: 1px solid #aaa;  
}.row:nth-child(4) {  
  border-bottom: 0;  
}<div>  
  <div class="row">you are a good programmer</div>  
  <div class="row">even on your bad days</div>  
  <div class="row">the fact that you keep coding</div>  
  <div class="row">is all the proof you need</div>  
</div>

![](https://miro.medium.com/max/30/1*ClPa5keWungyK7DZbth14w.png?q=20)

![](https://miro.medium.com/max/665/1*ClPa5keWungyK7DZbth14w.png)

While this use of the [nth-child selector](https://www.w3schools.com/cssref/sel_nth-child.asp) works for now, it will break if the number of rows changes. For this reason, we use a dynamic selector:

.row {  
  border-bottom: 1px solid #aaa;  
}.row:**last-child** {  
  border-bottom: 0;  
}

Now, we don’t have to worry about the index of the last item. There is also an available selector for `first-child`, as well as `first-of-type`, `last-of-type`, and `nth-of-type`.

The [nth-of-type selectors](https://www.w3schools.com/cssref/sel_nth-of-type.asp) match the nth item in a set which also matches a type, whereas the nth-child selectors only consider the index. Take a look at this example:

.row {  
  color: white;  
}.row:nth-of-type(2n) {  
  background-color: #111;  
}.row:nth-of-type(2n+1) {  
  background-color: #333;  
}<div>  
  <div>Part 1</div>  
  <div class="row">you are a good programmer</div>  
  <div class="row">even on your bad days</div>  
  <div class="row">the fact that you keep coding</div>  
  <div class="row">is all the proof you need</div>  
  <div>Part 2</div>  
  <div class="row">you are good at design</div>  
  <div class="row">because you are human</div>  
  <div class="row">you just need to listen</div>  
  <div class="row">to what other humans want</div>  
</div>

![](https://miro.medium.com/max/30/1*Pw6chZ8Cfqf3uVN4Wz9q8Q.png?q=20)

![](https://miro.medium.com/max/666/1*Pw6chZ8Cfqf3uVN4Wz9q8Q.png)

Notice how the styles are not applied to elements which don’t have the `.row` class, because they don’t match the type. You can use these principles to create elegant table structures with minimal code.

* * *

Media queries
=============

Media queries allow you to separate styles based on screen conditions. In the example below, we have media queries for mobile, tablet, and desktop, respectively:

@media (max-width: 480px) {  
  .content {...}  
}@media (min-width: 481px) and (max-width: 720px) {  
  .content {...}  
}@media (min-width: 720px) {  
  .content {...}  
}

You can also specify a media query based on screen orientation:

@media screen and (orientation: landscape) {  
  .content {...}  
}

Notice the `screen` [keyword](https://stackoverflow.com/questions/8549529/what-is-the-difference-between-screen-and-only-screen-in-media-queries/14168210#14168210) in the media query above. This means the styles in the query only apply to screens, and not to print. Here’s how you would create a media query for print:

@media print {  
  .content {...}  
}

Sometimes, you’ll need to resize certain elements based on pixel density. Below is an example of a media query for Retina screens:

.image {  
  height: 300px;  
  width: 300px;  
}@media screen and (min-resolution: 192dpi) {  
  .image {  
    height: 150px;  
    width: 150px;  
  }  
}

* * *

Transitions and animations
==========================

I’ve written [a detailed article on key principles](/this-aint-disney-a-practical-guide-to-css-transitions-and-animations-a8b87e7c5531) for CSS transitions and animations, you should find some valuable answers if you have questions.

* * *

Sanity tips
===========

Temporary borders everywhere
----------------------------

You’ve probably noticed how many of the elements in my examples have borders. This is not just a teaching tool, I do this when positioning elements in my work.

Since HTML elements are borderless by default, positioning work could become tricky when you have many elements and you want your UI to be pixel perfect.

![](https://miro.medium.com/max/22/1*4clzAhWuuZSejd3paPnXhw.png?q=20)

![](https://miro.medium.com/max/800/1*4clzAhWuuZSejd3paPnXhw.png)

Darshan Singh on [Dribbble](https://dribbble.com/shots/5496405-Your-Cart-View)

Consider creating a CSS class for temporary borders. In the example above, I’m using a dashed line for certain outer borders, and a solid line for inner ones. Find an arrangement which works for you, and this work becomes more pleasant.

Generic CSS classes
-------------------

In the example below, I’ve created some generic classes to use anywhere in my UI:

.font-family-body {font-family: Avenir, sans-serif;}  
.font-weight-body-bold {font-weight: 600;}  
.font-weight-body-normal {font-weight: 400;}  
.font-weight-body-light {font-weight: 300;}.font-family-heading {font-family: Oswald, serif;}  
.font-weight-heading-bold {font-weight: 700;}  
.font-weight-heading-normal {font-weight: 400;}.color-active {color: blue;}  
.color-danger {color: red;}  
.color-warning {color: orange;}  
.color-success {color: green;}.color-text-normal {color: #333;}  
.color-text-dark {color: #111;}  
.color-text-light {color: #555;}

Compared to duplicating the properties across elements the project, this strategy adds much more scalability, since I can easily modify my global styles from one place.

Keep visual and functional components separate
----------------------------------------------

In the following example, we have a card-style element containing text:

.feedback {  
  background-color: white;  
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);  
  padding: 20px 40px;  
}.feedback h1 {  
  color: #333;  
}.feedback p {  
  color: #888;  
}<div class="feedback">  
  <h1>We got your feedback</h1>  
  <p>And we are working hard to respond to you as soon as possible. Please check your email for a message from our team.</p>  
</div>

![](https://miro.medium.com/max/30/1*bH-lLkF1oD6NQJdJJlwS5Q.png?q=20)

![](https://miro.medium.com/max/716/1*bH-lLkF1oD6NQJdJJlwS5Q.png)

There’s nothing inherently wrong with this approach, but there is a more scalable one. Consider this change:

**.card {  
  background-color: white;  
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);  
  padding: 20px 40px;  
}**.feedback h1 {  
  color: #333;  
}.feedback p {  
  color: #888;  
}<div class="feedback **card**">  
  <h1>We got your feedback</h1>  
  <p>And we are working hard to respond to you as soon as possible. Please check your email for a message from our team.</p>  
</div>

By breaking the styles for the feedback card into two classes, `.feedback` and `.card`, we can reuse our card styles elsewhere in the UI for consistency.

* * *

Conclusion
==========

The amount of information missing from this “guide” makes me uneasy. CSS is an endless void, and it will continue to feel that way as long as designers keep making bolder decisions.

Your aim should be to understand aspects of CSS as your need arises, rather than to try and grasp every concept on a philosophical level. Each design task you complete will add more weapons to your arsenal, and as time passes, you will need less documentation to make more progress.

At the end of the day, what matters is most is that your design looks on screen the way it looked in your mind. CSS is here to help you accomplish that; stylesheets work for you, not the other way around.

Side note
---------

There are styles in my examples which don’t show up in the code, I’ve done this to make the concepts easier to visualize without adding clutter. Feel free to DM me if you have any questions about that.

Codepens
--------

*   [Absolute and fixed positions](https://codepen.io/mohammedibrahim/pen/mdbwEKo)
*   [Relative position](https://codepen.io/mohammedibrahim/pen/yLBXWbQ)
*   [Flexbox](https://codepen.io/mohammedibrahim/pen/pozwEJP)
*   [z-index](https://codepen.io/mohammedibrahim/pen/JjPJJYN)
*   [Margin vs padding](https://codepen.io/mohammedibrahim/pen/zYOzENg)
*   [Separating style from function](https://codepen.io/mohammedibrahim/pen/MWgoRwm)