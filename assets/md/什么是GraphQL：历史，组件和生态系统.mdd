![什么是GraphQL：历史，组件和生态系统](https://levelup.gitconnected.com/what-is-graphql-87fc7687b042)
什么是GraphQL：历史，组件和生态系统
=====================

[![布兰达克拉克](https://miro.medium.com/fit/c/48/48/1*ekQOAgM0ndBvenYrYIUgkA.png)](/@brenda.clark?source=post_page-----87fc7687b042----------------------)

[布兰达克拉克](/@brenda.clark?source=post_page-----87fc7687b042----------------------)

跟随

[8月13日](/what-is-graphql-87fc7687b042?source=post_page-----87fc7687b042----------------------) · 7 分钟阅读

![](https://miro.medium.com/max/30/1*K7cL5EO9bQJei8GrgRhoZQ.png?q=20)

RESTful Web服务多年来一直为简单的查询结构提供基本支持。但是，这些服务不能提供对数据的精细控制，这些数据允许开发人员在不创建大量不必要的调用的情况下实现灵活性。

[GraphQL](https://blog.back4app.com/2019/08/08/what-is-graphql/)最初由Facebook构建，是一种API查询语言，可让开发人员_选择_他们想要的请求类型，并在单个请求中接收所需的信息。

在本文中，我将解释[GraphQL](https://blog.back4app.com/2019/08/08/what-is-graphql/)是[什么](https://blog.back4app.com/2019/08/08/what-is-graphql/)，它是如何开始的，以及它如何成为开发人员构建API的基本工具。我们还将介绍GraphQL的关键组件以及GraphQL生态系统中的主要参与者。

让我们开始吧！

什么是GraphQL？
===========

最简单的形式是，GraphQL是一种开源语言，用于从客户端应用程序查询数据库。

“ _GraphQL是一种API的查询语言，可以在客户端和服务器之间转换合同，允许服务器说'这些是我公开的功能'，并允许客户以最终使产品开发人员能够构建的方式描述他们的需求他们想要创造的产品。_“ - [Dancha Sfer](https://www.youtube.com/watch?v=mRgvbtNuCZY)，[GraphQL共同创作者](https://www.youtube.com/watch?v=mRgvbtNuCZY)

在幕后，它告诉API如何将检索到的数据呈现给客户端。这使开发人员能够提供精确的数据请求，以便他们能够准确地获得所需内容 - 仅此而已。

以下是GraphQL为开发人员提供的主要优势：

*   准确地从服务器声明他们需要的内容并以可预测的方式接收所请求的数据。
*   在单个请求中从服务器检索许多资源。
*   它是强类型的，即它允许API用户知道（1）可用的数据和（2）它存在的形式。

GraphQL查询本质上是一个字符串，当发送到服务器时，将JSON返回给客户端。这些查询反映了它们的响应，这使得可以轻松**预测**从运行查询返回**的数据的形状**。如果开发人员知道他们的应用程序需要什么类型的数据，它还可以使编写查询变得容易。

与SQL中的RESTful服务或复杂的连接语句不同，GraphQL是**分层的**。这意味着它遵循对象之间的关系，这种关系适用于分层用户界面使用的图形结构数据。

GraphQL利用现有代码而不是口述或提供**数据存储**。它是**内省的**，这意味着GraphQL服务器可以查询它们支持的类型，从而使工具可以轻松地在此信息之上构建。

使用GraphQL，返回的数据形状完全取决于客户端的查询。因此，可以轻松地将其他字段添加到服务器（例如，在添加新产品功能时），而不会影响现有客户端。这也是相反的方式。因此，当您使用较旧的功能时，相应的服务器字段即使已弃用也会继续运行。通过这种方式，GraphQL带来了向后兼容的过程，无需增加**版本号**。

现在我们已经更好地了解[了GraphQL](https://blog.back4app.com/2019/08/08/what-is-graphql/)是[什么](https://blog.back4app.com/2019/08/08/what-is-graphql/)，让我们快速看看它是如何开始的。

[**使用数据库**](https://www.back4app.com/graphql-database)**构建**[**即时GraphQL API，**](https://www.back4app.com/graphql-database)**并开始发现此技术的工作原理。**
---------------------------------------------------------------------------------------------------------------------------------------------

一切如何开始
======

那么，GraphQL是如何开始的？开发人员在使用GraphQL之前使用了什么？它们对它们有何限制？我们来看看吧！

GraphQL是如何开始的？
--------------

转向移动
----

GraphQL的起源故事可以追溯到行业向移动领域的转变。这是因为与高网络使用相关的问题，Facebook的移动战略（即在移动设备上采用HTML5）无法运行。因此，Facebook决定使用本机技术从头开始重建iOS应用程序。

移动版Facebook _新闻Feed_实施的主要问题。它并不像检索故事，编写故事，说什么，评论列表以及谁喜欢这篇文章那么简单。每个故事都是相互关联，嵌套和递归的。现有的API并非旨在允许开发人员在移动设备上公开丰富的新闻Feed类似体验。它们没有层次性，让开发人员选择他们需要的东西，或者显示异构饲料故事列表的能力。

在2012年，Facebook决定他们需要构建一个新的News Feed API来构建Facebook移动应用程序。这是GraphQL开始成型的时候，在8月中旬，Facebook for iOS 5.0发布了新的GraphQL技术。它允许开发人员利用其数据获取功能来减少网络使用。在接下来的一年半中，GraphQL API的表面区域扩展到除了News Feed之外的大部分Facebook iOS应用程序。2015年，GraphQL规范首次与JavaScript中的参考实现一起发布。

传统REST API的局限性
--------------

传统REST API的主要问题是它很慢并且需要硬编码。加快速度的一种可能解决方案是创建多个端点。但是，当您推断它以涵盖应用程序所需的所有数据源和API客户端时，您会遇到REST API的限制。

让我试着用类比来解释传统REST API的局限性。

说，你有一台自动售货机。使用传统的REST，您可以按下自动售货机上的一个按钮并获得一件事。因此，您必须一次按下许多按钮才能获得所需的一切。这个过程很慢。

但如果你有特殊目的按钮，你可以一次得到多个东西。因此，例如，您可以按一个特殊用途按钮，从自动售货机获取四件事。

这两种方法的混合是拥有一台自动售货机，您可以在其中完全按下所需的按钮，一次性获得所需的一切。这就是GraphQL所做的。

GraphQL旨在通过拥有一个“智能”端点而不是拥有许多“哑”端点来解决这些问题。这里的主要好处是智能端点能够进行复杂的查询并将数据输出整形为客户端所需的任何内容。

实质上，GraphQL层存在于客户端和数据源之间。它的工作是接收客户端请求并根据客户端的要求获取必要的数据。简而言之，GraphQL查询方法可以解决各种大规模应用程序开发问题。

GraphQL如何变得流行
=============

正如您可能想象的那样，业界已经有了像GraphQL这样的解决方案的需求，这就是为什么它很快就会流行起来。在前六个月内，GraphQL在不同的编程语言中实现，包括PHP，JavaScript，Scala，Python和Ruby。

当新公司和业余爱好者开始构建它时，它很快就变得流行起来。最终，该技术被大型公司采用，从2016年开始使用GitHub，后来被Twitter，Yelp，纽约时报，Airbnb等采用。

GraphQL关键组件
===========

实际上，GraphQL API使用三个主要组件：

*   **查询。**一个[查询](https://graphql.org/learn/queries/)是客户端发出请求。查询字段可以指向数组和支持参数。
*   **解析器。**除非您告诉它，否则GraphQL服务器将不知道如何处理它所获得的查询。这是使用[解析器](https://graphql.org/learn/execution/#root-fields-resolvers)完成的。简单来说，解析器告诉GraphQL如何（以及在​​何处）获取对应于特定字段的数据。使用GraphQL，您使用的API模式和数据库模式是分离的。这允许您将它们用作突变解析器来修改数据库的内容。
*   **架构。**一个[GraphQL架构](https://graphql.org/learn/schema/)介绍一旦连接到服务器GraphQL功能的客户端可以使用。模式中的核心构建块称为_类型_。

GraphQL生态系统
===========

在这里，我们将快速浏览GraphQL生态系统中的主要参与者。

GraphQL服务器
==========

由于GraphQL只是一个规范，因此您需要一些GraphQL服务器实现才能开始。

*   [**GraphQL-JS**](https://github.com/graphql/graphql-js)  是 [**GraphQL**](https://github.com/graphql/graphql-js)的原始参考实现，可以与 [Express](https://github.com/graphql/express-graphql)一起使用。
*   [**GraphQL-Server**](https://www.apollographql.com/docs/apollo-server/)是Apollo的一体化GraphQL服务器实现，它正在迅速发挥作用。它可以从任何GraphQL客户端查询。
*   [**GraphQL-Serverless**](https://www.back4app.com/docs/parse-graphql/graphql-getting-started)是Back4App即时GraphQL API与数据库（MongoDB）和云功能完全集成。在这里，您可以访问提供GraphQL API的后端即服务。
*   [**GraphQL Yoga**](https://github.com/prisma/graphql-yoga)是Prisma在Express和Apollo服务器上构建的服务器实现。

GraphQL客户端
==========

虽然您可以直接查询GraphQL API，但拥有专用的客户端库肯定会使事情变得更容易。

*   [**Relay**](https://facebook.github.io/relay/)  是Facebook的JavaScript库，用于利用GraphQL构建React应用程序。
*   [**Apollo Client**](http://www.apollodata.com/)缓存请求并规范化数据，从而节省网络流量。它还支持分页，预取数据以及数据层与视图层之间的连接。

GraphQL网关
=========

也许最受欢迎的GraphQL网关是[**Apollo Engine**](https://www.apollographql.com/platform/)。  它具有查询执行跟踪，查询缓存，错误跟踪和API性能趋势分析。

开源应用和工具
=======

以下是一些使用GraphQL的开源应用程序：

*   在GraphQL的支持下，[**Gatsby**](https://www.gatsbyjs.org/docs/)能够从多个GraphQL API获取数据，并利用它创建一个静态的，仅客户端的React应用程序。
*   [**VulcanJS**](http://vulcanjs.org/)  利用GraphQL让用户快速构建CRUD应用程序。
*   [**GraphQL Playground**](https://github.com/prisma/graphql-playground)  是一个功能强大的IDE，它包含GraphQL查询，突变，订阅，验证等编辑器。它允许开发人员可视化模式的结构。
*   [**GraphiQL**](https://github.com/facebook/graphql/)  是一个浏览器内IDE，可与GraphQL API交互，支持数据查询，执行突变和自动填充查询。

结论
==

虽然GraphQL是为了解决iOS应用程序的Facebook新闻Feed API的一个非常具体的问题，但它很快扩展到在Facebook内部解决更多问题，并最终开源成为大公司使用的社区工具。

您是否认为GraphQL最终可能在未来几年内成为行业标准？请在下面的评论部分告诉我们。