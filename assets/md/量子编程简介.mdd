原文![量子编程简介](https://towardsdatascience.com/introduction-to-quantum-programming-a19aa0b923a9)
#### 最重要的

量子编程简介
======

量子编程从量子比特到运行实际量子程序的演练！
----------------------

[![昆汀·特朗](https://miro.medium.com/fit/c/48/48/2*pzzAFAffbv1bqMPXfbBjcw.png)](/@quentintruong?source=post_page-----a19aa0b923a9----------------------)

[昆汀·特朗](/@quentintruong?source=post_page-----a19aa0b923a9----------------------)

跟随

[8月6日](/introduction-to-quantum-programming-a19aa0b923a9?source=post_page-----a19aa0b923a9----------------------) · 15 分钟阅读

![量子计算机](https://miro.medium.com/max/30/1*2TF0dptrBgesUaQpibf3wA.jpeg?q=20)

![量子计算机](https://miro.medium.com/max/1000/1*2TF0dptrBgesUaQpibf3wA.jpeg)

量子计算机 - 由Rigetti提供

Q uantum计算机存在！量子编程也是如此！在本文中，我将向您介绍开始使用量子编程时需要了解的所有内容。我将首先介绍量子计算机与笔记本电脑等计算机的不同之处，然后解释量子编程的基本原理，最后介绍如何在真正的量子计算机上免费运行程序。

在开始之前，请注意本文适用于想要学习量子编程全部技术细节的人。本文建立在量子比特，量子门和量子电路图的数学基础之上。本文不会解释量子算法或它们的优点，因为这些主题值得他们自己的文章。

由于我们将深入研究量子编程的基础数学，因此读者需要知道矢量，矩阵，线性组合和复数是多少。我推荐[3Blue1Brown](https://youtu.be/fNk_zzaMoSs)用于学习线性代数，而[BetterExplained](https://betterexplained.com/articles/a-visual-intuitive-guide-to-imaginary-numbers/)用于学习复数是多少。

量子计算机
=====

让我们首先了解量子计算机究竟是什么以及它们与其他计算机的区别。

> 量子计算机是一种使用量子力学来执行计算的机器。

那么这与其他电脑有何不同？嗯，一台计算机，最基本的形式，只是一台执行计算的机器。有许多不同类型的计算机。在计算机的早期，我们实际上有机械计算机 - 查尔斯巴贝奇设计了这样一[台机器](https://en.wikipedia.org/wiki/Analytical_Engine)，在1837年进行通用计算。如今，我们的计算机基于数字电子设备，并使用位和逻辑门进行操作。相反，量子计算机使用量子力学来执行计算。量子计算机使用量子比特和量子门，而不是比特和逻辑门。

什么是量子比特和量子门？从物理上讲，它们可以是许多不同的东西中的任何一种 - 谷歌，IBM，微软和Rigetti都有自己的量子比特和量子门实现。目前，我们不会担心量子比特和量子门的物理性质，因为在首次学习量子编程时没有必要。

量子编程
====

在我们开始之前，我强烈建议您在**_清晰的心理平台_**上进行量子编程。不要去寻找如何声明和设置变量，遍历代码，创建功能，等你对编程的任何先入为主可能**_不会_**是有用的。量子编程不仅仅是使我们现有程序运行得更快的一些方法 - 量子编程与当代编程根本不同。

了解Qubits
--------

让我们先从**_什么_**一个量比。

> 量子比特是具有单位长度的两个复数的向量。

让我们来看看**_为什么_**量子比特是这样的，**_它的真正含义_**。Qubits与位完全不同。对于初学者来说，一个比特是0或1.这里没有概率，要么已知为0，要么已知为1。相反，量子比特本质上是概率性的，意味着两个 **_相同_** 量子比特可能有 **_不同_** 价值一旦测量！花点时间真正考虑一下它的严重性。这意味着量子计算本质上是概率性的。

现在，这是第二个关键区别。通过位，我们可以根据需要多次读取该位，而不会影响该位的状态。但是，随着量子位，一旦测得的，它**_decoheres_**（失去其量子特性），并收缩两个可测量状态中的一个（因此在“量子位”的“位”）。因此，我们不能“测量”量子比特; 一旦测量，量子性质就会被**_破坏_**而无法恢复。我们量化了使用两个数字测量量子位的概率性质：|α|²，量子位将被测量为0的概率，|β|²，量子位将被测量为1的概率。

虽然|α|²和|β|²反映了量子比特的**_测量_**概率，但我们认为量子比特的内部**_状态_**是两个“概率幅度”，α和β。这些是复数，它定义了0和1之间的叠加（叠加是线性组合）并且**_无法测量_**。

换句话说，我们将量子位视为具有单位长度的两个复数的向量（向量的长度等于1）。我们可以简洁地将其表达为数学，如下图所示（包含alpha和beta的向量是量子位; alpha上方的条形和β代表复共轭）：

![](https://miro.medium.com/max/30/1*SoEKP7FkWD_Id9oUhnlvSw.png?q=20)

![](https://miro.medium.com/max/1400/1*SoEKP7FkWD_Id9oUhnlvSw.png)

总结一下，量子比特是两个复数的向量，α和β，其中向量具有单位长度。量子位将被测量为0的概率等于α，|α|²的幅度平方。量子位将被测量为1的概率等于β，|β|²的幅度平方。量子位的状态α和β无法测量。只能测量量子比特折叠的值。

Qubit表示法
--------

我们经常用**_Dirac表示法_**表示量子比特，也称为**_Bra-ket表示法_**。这种表示法只是编写向量的便捷方式。胸罩表示行向量并表示`⟨ ∣`; ket表示列向量并表示`∣ ⟩`。例如，我们可以用Bra-ket表示法写出量子位的“0”和“1”状态，如下所示（注意不要混淆bra / ket中的内容与向量内部的内容！）：

![](https://miro.medium.com/max/30/1*-7crnY2oBN2_0xMOKB1VsQ.png?q=20)

![](https://miro.medium.com/max/1400/1*-7crnY2oBN2_0xMOKB1VsQ.png)

Qubits可以处于**_纯状态_**或**_混合状态_**。如果一个量子位的状态可以使用的线性组合来全面地描述`∣0⟩`和`∣1⟩`，则我们说其在纯状态。我们经常使用以下符号表示纯状态量子位：

![ket Psi = alpha ket 0 + beta ket 1](https://miro.medium.com/max/30/1*zOssvGb9QOjjTxQAGQ9E3g.png?q=20)

![ket Psi = alpha ket 0 + beta ket 1](https://miro.medium.com/max/1400/1*zOssvGb9QOjjTxQAGQ9E3g.png)

以下是纯状态量子比特的一些示例和表示它们的常用简写。

![ket +，ket  - ，ket i，ket -i](https://miro.medium.com/max/30/1*zCDlXWs6mWgQ7T76qMy-Bw.png?q=20)

![ket +，ket  - ，ket i，ket -i](https://miro.medium.com/max/1400/1*zCDlXWs6mWgQ7T76qMy-Bw.png)

其他量子比特需要纯态的混合来完全描述它们，因此我们将它们称为混合态量子比特。换句话说，混合状态量子位由纯态的概率分布描述。我们将在本文后面看到一个混合状态量子比特的例子（我会指出它）。

多个Qubits
--------

到目前为止，我们只定义了单个量子比特的状态。**_多个量子比特_**的组合**_状态是_**什么样的？

> 多个量子比特的组合状态是所有量子比特的张量积。

如果您不知道张量产品是什么，请不要担心; 我们将通过一个例子（⊗是张量积运算的符号）。

![](https://miro.medium.com/max/30/1*wAxOjEYtLwwz0z-I0hw2qQ.png?q=20)

![](https://miro.medium.com/max/1400/1*wAxOjEYtLwwz0z-I0hw2qQ.png)

通常，我们可以通过以下两个步骤来对任意两个矩阵进行张紧：

1.  标量将第一矩阵中的每个元素乘以整个第二矩阵
2.  根据元素的原始位置组合生成的矩阵

以下是它如何适用于二维矩阵的第二个示例：

![我张贴H产品](https://miro.medium.com/max/30/1*2FWsB6_dd6clY52g065I5A.png?q=20)

![我张贴H产品](https://miro.medium.com/max/1400/1*2FWsB6_dd6clY52g065I5A.png)

例如，我们也可以用Bra-ket表示法表示多个量子位`∣0⟩⊗∣1⟩`。作为简写，我们可以省略⊗并简单地写`∣0⟩∣1⟩`。作为一个更短的速记，我们只能写一个单词`∣01⟩`。

了解量子门
-----

现在让我们考虑量子门是**_什么_**。

> 量子门是酉矩阵。

让我们得一些**_为什么_**量子门是酉矩阵的背景。首先，量子门将由物理设备实现，因此它们必须遵守量子物理定律。一个相关的物理定律是，在过去和未来的点之间转换时，任何信息都不会丢失¹。这被称为[统一性](https://en.wikipedia.org/wiki/Unitarity_(physics))。由于我们的量子门定义了我们如何在国家之间转换，他们也必须遵守统一性。

其次，请注意我们的量子门将应用于量子比特。我们之前已经知道，量子比特实际上只是向量，因此这意味着量子门必须以某种方式对向量进行操作。幸运的是，我们记得矩阵实际上只是矢量的线性变换！

结合这两个想法，我们将量子门视为**_酉矩阵_**。酉矩阵是复数的任何方阵，使得**_共轭转置_**等于其**_倒数_**。作为快速复习，通过取矩阵中每个元素的共轭（`a + bi`→ `a — bi`），然后取矩阵的转置（元素ij→元素ji），找到矩阵的共轭转置。我们通常用匕首表示共轭转置，†。

关于酉矩阵的关键观察是它们**_保持了范数_**（向量的长度）。假设我们允许改变规范的门，那么我们的量子比特的概率可能总和为一个以外的东西！这没有意义，因为所有概率的总和必须始终等于1。

还要注意，根据定义，酉矩阵具有逆矩阵。这意味着我们无法将量子比特“分配”到任意状态。为了理解为什么不这样做，让我们假设我们确实有一个可以“分配”值的量子门，因此，将两个复数的任何向量转换为两个复数的特定向量。这个量子门将具有一些基础表示作为酉矩阵，并且该矩阵将具有能够将特定向量转换回操作之前量子位的任何状态的逆。但是在操作之前，量子比特可能处于任何状态，并且无法知道哪个状态！因此，我们不能将量子比特“分配”到任意状态。在更高的层次上，所有量子门都是**_可逆的_**这就是为什么我们经常将量子计算视为**_可逆计算的_**一种形式。

最后，请注意，因为我们的量子门是酉矩阵，所以它们在定义上是**_平方_**的，因此我们的量子门必须具有**_相同_**数量的输入和输出量子位（因为平方矩阵将n个标准基矢量映射到n列）！这与大多数逻辑门完全不同; 例如，[AND](https://en.wikipedia.org/wiki/AND_gate)门接收两个输入并产生一个输出。

H和CNOT量子门
---------

现在我们对我们正在使用的内容有所了解，让我们考虑一个例子，**_Hadamard门_**，H。

![](https://miro.medium.com/max/30/1*N-dv2HFtw3OMA9qKOOU1Lw.png?q=20)

我们可以通过检查共轭转置等于其反转来检查H是单一的，或者换句话说，H乘以其共轭转置等于Identity矩阵：

![H乘以H的共轭转置等于I.](https://miro.medium.com/max/30/1*CS8kAxSCRT5iQc6s_8kX_A.png?q=20)

![H乘以H的共轭转置等于I.](https://miro.medium.com/max/1400/1*CS8kAxSCRT5iQc6s_8kX_A.png)

另一个重要的量子门是**_受控非门_**，也称为CNOT。CNOT作用于两个量子位，一个控制量子位和一个目标量子位。我们可以将CNOT视为**_'if语句'_** - 如果控制量子位等于1，则CNOT将NOT（反向门）应用于目标量子位（因此名称为Controlled NOT）。

这是表示CNOT的矩阵。该矩阵将控制量子位视为ket内最右边的值，目标量子位作为最左边的值。

![[[1,0,0,0]，[0,0,0,1]，[0,0,1,0]，[0,1,0,0]]](https://miro.medium.com/max/30/1*ZJUbI34aQ0auanAcx1J8bg.png?q=20)

![[[1,0,0,0]，[0,0,0,1]，[0,0,1,0]，[0,1,0,0]]](https://miro.medium.com/max/1400/1*ZJUbI34aQ0auanAcx1J8bg.png)

让我们看看它的影响`∣00⟩`。

![CNOT酮00 =酮00](https://miro.medium.com/max/30/1*rRP7qcfctzz_1iqoD7eIsA.png?q=20)

![CNOT酮00 =酮00](https://miro.medium.com/max/1400/1*rRP7qcfctzz_1iqoD7eIsA.png)

在这个例子中，我们看到CNOT没有修改它的值`∣00⟩`。这是预期的行为，因为如果控件为1，CNOT仅反转目标。

让我们看看它的影响`∣01⟩`。

![CNOT ket 01 = ket 11](https://miro.medium.com/max/30/1*_szjNILSE_iXSPfsvbSYoA.png?q=20)

![CNOT ket 01 = ket 11](https://miro.medium.com/max/1400/1*_szjNILSE_iXSPfsvbSYoA.png)

在这里，我们可以看到控制等于1，因此CNOT反转目标。因此，结果是`∣11⟩`。

尝试解决其他两种情况，`∣10⟩`并且`∣11⟩`。您应该发现CNOT具有以下行为：

*   `∣00⟩ -> ∣00⟩`
*   `∣01⟩ -> ∣11⟩`
*   `∣10⟩ -> ∣10⟩`
*   `∣11⟩ -> ∣01⟩`

请注意，当控制位为1时，这正是将NOT应用于目标位的行为。

回顾一下，我们可以将量子门视为酉矩阵。这种单一性强制执行量子比特的概率总和为1并使量子计算可逆的约束。由于酉矩阵是方形的，我们发现量子门必须具有相同数量的输入和输出量子位。我们了解了Hadamard和CNOT，它们是两个重要的量子门。存在更多的量子门。

量子电路图
-----

现在我们已经了解了量子比特和量子门的基础知识，让我们看看我们的第一个量子电路图。

![](https://miro.medium.com/max/30/1*78kfi1KsxboqKQ7RizShOg.png?q=20)

![](https://miro.medium.com/max/1400/1*78kfi1KsxboqKQ7RizShOg.png)

量子电路图是我们如何思考量子'程序'。我们将量子比特定义为行，并且我们从左到右依次应用量子门。

让我们来看看这个图的每个部分。首先，我们有两个量子比特。每行对应一个量子位。顶行对应于名为x0的量子位，底部对应于名为x1的量子位。我们认为x0是第0个量子位，因为我们从0开始计数（与编程的其余部分相同）。我们写`x0 : ∣0⟩`并`x1 : ∣0⟩` 意味着`x0`并`x1`开始在州`∣0⟩`。

这`H`是Hadamard门，正在应用于量子比特x0。的`●-⊕`是CNOT门，`●`是控制量子位，并且`⊕`是靶标量子位。这`-`只是为了帮助我们看看哪两个量子位受到影响。换句话说，我们正在应用CNOT，其中控制是量子位x0，目标是x1。注意，我们应用这些门的顺序很重要。在此图中，我们先应用H，然后应用CNOT。

翻译量子电路图
-------

量子电路图只是我们程序的一种表示。它有助于我们思考我们的量子计算，但其他表示也可能有用。我们可以将图表转换为一串符号，这有助于我们准备将其编写为计算机代码。以字符串形式使用它也可以轻松转换为基础数学。这个数学将告诉我们程序的预期输出。

让我们从将图表转换为符号串开始。我们不是将我们的量子比特写成行，而是使用Bra-ket表示法。第0个量子位将是最右边的量子位`∣00⟩`，就像写出二进制数字2一样。这意味着量子比特x1是最左边的量子比特`∣00⟩`。（注意，量子物理学人员倾向于颠倒这种排序³。总是检查量子位排序，因为它是一个**_非常_**常见的错误来源。）

我们还需要翻译大门。由于我们正在申请`H`qubit x0并且没有对qubit x1应用任何东西（相当于应用Identity门`I`），我们将其写为`(I⊗H)`。最后，我们翻译CNOT，指定哪个qubit是控件，哪个是目标。结果是`CNOT[control=0, target=1] (I⊗H) ∣00⟩` （注意，此字符串**_从右向左_**读取）。大！在编写将在量子计算机上运行的代码时，这将非常有用。

写出基础数学
------

使用量子电路图的字符串表示可以轻松地将我们的程序转换为基础数学。有三件，`CNOT[control=0, target=1]`，`(I⊗H)`，和`∣00⟩`。每个部分都可以转换为矩阵，如下图所示：

![](https://miro.medium.com/max/30/1*XOIuVP8SICzQvl1JSjThfQ.png?q=20)

![](https://miro.medium.com/max/1400/1*XOIuVP8SICzQvl1JSjThfQ.png)

我们甚至可以将矩阵相乘以找到结果状态向量，如上所示。这个状态向量是量子计算完成后两个量子位的预期状态。或者，我们可以将其视为我们计划的输出。它告诉我们每个可测量状态的概率幅度。

还记得我们的混合状态量子比特吗？请注意，我们实际上不能再在纯态中写入qubit x0和qubit x1，因为没有任何方法可以使用张量积来分解向量。所以我们的量子比特处于混合状态！

测量状态向量
------

如果我们现在测量量子比特怎么办？我们会收到什么？我们可以通过将状态向量分解为每个可测量状态来找出。我们会衡量我们的量子位的**_标准基础上_**，也被称为`∣0⟩`和`∣1⟩`（有我们可以测量在其他基地，但不要担心，就目前而言）。因此，我们这两个量子比特系统的可衡量的状态是`∣00⟩`，`∣01⟩`，`∣10⟩`，和`∣11⟩`。

![](https://miro.medium.com/max/30/1*htq_CUl7xoOWwdCisIL9og.png?q=20)

![](https://miro.medium.com/max/1400/1*htq_CUl7xoOWwdCisIL9og.png)

我们可以使用|α|²来确定`∣0⟩`单个量子位的概率的方式来确定测量值的概率。由于`∣01⟩`并且`∣10⟩`具有0概率幅度，我们知道我们永远不会测量该状态。我们将测量两者`∣00⟩`和`∣11⟩`概率（1 / sqrt（2））²= 1/2。

现在，假设我们要将这两个量子位分开很远的距离，然后我们测量其中一个。在我们测量它的瞬间，我们也会知道另一个量子比特的价值！这是因为我们知道量子比特只能是`∣00⟩`或`∣11⟩`。

这就是爱因斯坦所说的“远距离的怪异行为”，也称为**_量子纠缠_**。我们认为信息是相关的而不是旅行。如果它正在旅行，那么它可能比光更快地行进，这违反了物理定律。

在量子计算机上运行
=========

现在我们已经了解了量子比特，量子门和量子电路图背后的情况，让我们看看如何在真正的量子计算机上运行。我将使用Rigetti的量子计算机，因为他们目前正向[beta用户](https://medium.com/rigetti/quantum-cloud-services-opens-in-public-beta-31989e15e36e)提供[免费信用](https://medium.com/rigetti/quantum-cloud-services-opens-in-public-beta-31989e15e36e)。或者，我们也可以使用[IBM的量子计算机](https://www.research.ibm.com/ibm-q/technology/experience/)。

以下是Rigetti量子编程过程的基本概述：

1.  编写一个Python程序，指定您的量子电路和任何必要的附加代码
2.  使用量子模拟器测试Python程序
3.  在Rigetti的量子计算机上保留时间
4.  将您的程序发送到Rigetti的服务器
5.  在Rigetti的服务器上执行你的程序（他们会把你的量子程序发送到量子计算机）

这是我们上面的量子电路图的Python版本。

结果将类似于：

\[（0,0），（1,1），（1,1），（0,0），（0,0），（0,0），（1,1），（0,0），（ 0,0），（1,1）\]   
\[（0,0），（0,1），（1,1），（1,1），（1,1），（0,0），（0 ，0），（1,1），（1,0），（0,0）\]

第一行对应于模拟器，结果似乎合理 - 我们得到\[0,0\]大约一半的时间，\[1,1\]剩余的时间。然而，对于真正的量子计算机，除了预期的\[0,0\]和\[1,1\]之外，我们还接收\[0,1\]和\[1,0\]。根据数学，我们应该只接收\[0,0\]和\[1,1\]，那么发生了什么？

问题是今天（2019年7月）真正的量子计算机仍然非常容易出错。例如，我们可能会在尝试将量子比特初始化为0时看到错误率为2-3％。我们可能还有另外1-2个每个单量子比特门操作的误码率为％，对于双量子比特门操作，误差率约为3-4％。测量量子比特时我们甚至有错误率！实际上，这些错误会累积并导致错误的值。

闭幕
==

在本文中，我们了解到量子计算机实际上确实存在并在今天工作，尽管错误率相当高。虽然这些机器的物理实现在不同公司之间存在很大差异，但许多编程概念仍然保持不变。

我们将量子比特视为具有单位长度的两个复数的向量，并且我们将量子门视为酉矩阵。我们记得量子计算是概率性的，因为一旦测量，两个相同的量子位可能具有不同的值。由于量子门是单一的，我们知道量子计算本质上是可逆的。在高层次上，我们可以将量子编程视为复数上应用的线性代数。

我们使用量子电路图来表示我们的量子程序，然后将其转换为Python以在真正的量子计算机上运行。

我希望你学到了一些东西，我很乐意听到你的任何意见或建议！

* * *

常问问题
----

Q）我搜索了CNOT的矩阵形式，它看起来与你的不同，为什么？

A）如果你看\[\[1,0,0,0\]，\[0,1,0,0\]，\[0,0,0,1\]，\[0,0,1,0\]\]，因为它们颠倒了目标并控制了量子位的排序。如果您看到的内容不同于我在上面或本文中所写的内容，那么它就错了。

问）所以我们有常规计算机的位和故障，是否存在类似于量子位的东西？

A）是的，qutrits。量子比特是两级量子系统的一部分。Qutrits是三级量子系统的一部分。还有qudits，它概括了级别的数量。

* * *

参考
--

\[1\] L. Susskind，[第1讲量子纠缠，第1部分](https://www.youtube.com/watch?v=0Eeuqh9QfNI&feature=youtu.be&t=2745)（2008）

\[2\] [Qiskit](https://qiskit.org/documentation/terra/summary_of_quantum_operations.html#basis-vector-ordering-in-qiskit)（2019），Qiskit中的[基矢量排序](https://qiskit.org/documentation/terra/summary_of_quantum_operations.html#basis-vector-ordering-in-qiskit)

\[3\] R. Smith，[Someone Shouts“01000”！谁很兴奋？](https://arxiv.org/pdf/1711.02086.pdf)（2017年），arxiv

\[4\] [Qubit Quality](https://quantumcomputingreport.com/scorecards/qubit-quality/)（2019），量子计算报告