![单片与微服务，以及介于两者之间](https://medium.com/swlh/monolithic-vs-micro-services-and-all-in-between-7d496408ad02)
![](https://miro.medium.com/max/30/1*Kfwiw-hzhBYZYmZOe1-fHw.jpeg?q=20)

单片与微服务，以及介于两者之间
===============

揭开蓝色与红色药丸困境的神秘面纱
----------------

[![Anthony Figueroa](https://miro.medium.com/fit/c/48/48/1*Wfm_c7SRLhcOBarEyDoirQ.jpeg)](/@anthony.figueroa?source=post_page-----7d496408ad02----------------------)

[Anthony Figueroa](/@anthony.figueroa?source=post_page-----7d496408ad02----------------------)

跟随

[8月4日](/swlh/monolithic-vs-micro-services-and-all-in-between-7d496408ad02?source=post_page-----7d496408ad02----------------------) · 8 分钟阅读

开发人员通常  根据个人喜好决定是构建单片架构还是微服务架构。本文将介绍如何通过考虑这两种方法为您的客户设计最佳平台。

单片全连接平台可能满足创业公司的需求，但它们通常存在扩展以支持增长的问题。使用模块化微服务构建的体系结构适用于大型企业，但它们可能过度设计，需要的资源多于初创公司所需的资源。本文将介绍如何将这些构建方法结合起来，从一开始就设计一个功能策略，以适应项目生命周期中的每个点。

这个主题促进了各种讨论。出于某种原因，微服务和单片方法都会产生狂热的奉献者。当设计师对他们喜欢的架构方法有强烈的感受时，经常会发生毫无意义的讨论。

破坏业务的问题
-------

需要明确的是，单片架构非常棒。微服务也是如此。但是每种方法都在项目时间轴的特定点上起到特定作用。当你犯下这两个最大的商业杀手时会出现问题：

*   **过度设计。**如果您在一个平台上过多地使用了比每个开发阶段所需的组件更多的组件，那么您将创建一个有缺陷的，笨重的结构。当您的产品崩溃并且必须修复或完全重做时，过度工程可能会导致严重的技术债务。
*   **缺乏规划。**如果您在没有计划的情况下向前冲并开始编码，那么您将跳过一个重要且关键的设计步骤。不要认为您最喜欢的构建类型会在其增长周期的任何时候满足您所有客户的需求。

所有项目都是独一无二的，所有业务目标都不同。我们需要从一开始就与客户合作，作为合作伙伴，制定最佳方法。然后我们需要在项目展开时调整我们的方法。我们需要敏捷地工作。本文介绍了关于整体和微服务的基础知识，介绍了每种方法，并描述了一种混合方法。最后提出的建议可以解决您可能遇到的一些常见问题。

Monolith方法
==========

将此结构描绘为具有一些输入和一些输出的单个黑盒子。代码可能组织得非常好。但总的来说，它仍然只是一个大黑盒子。换句话说，整体结构的内部工作是不透明的，或者很难看到，而不是透明的。因此，如果您对平台不是很熟悉，可能需要花费时间和精力才能找到需要调整的代码。并且它们都是一体连接的，所以在一个地方出现问题通常会影响整个结构，这意味着更多的挖掘。

![](https://miro.medium.com/max/30/1*0HzPiQJ5X-Q678arRWNyQw.png?q=20)

巨石

整体内部的代码可以遵循软件架构和代码组织模式，如模型视图控制器（MVC）或模型视图视图模型（MVVM）。这些类型的应用程序主要用于创建最小可行产品（MVP）或概念证明。但是在这些应用程序开始增长之后，它们通常会变得更加复杂。这些平台需要更加模块化的方法才能实现可持续发展。

微服务方法
=====

微服务架构的含义有很多定义。我最喜欢的是

> “将软件应用程序设计为  可独立部署的服务套件的一种特殊方式”
> 
> \- Martin Fowler（2014）

**_独立_**是关键词。没有独立模块的微服务只是混乱。如果我们不设计独立的组件，我们只会创建一个高度耦合，低内聚的Frankenstein，需要大量的工作来交付，运行和维护。根据定义，微服务架构比整体架构具有更多的弱链路和更多的熵。所以它需要更多的文档和高技能的团队。

模块化
---

将应用程序分解为独立的小型微服务的一大好处是改进了模块化。微服务应用程序比单块机更易于理解，开发和测试。而且他们对建筑侵蚀更具弹性。

具有成本效益和可扩展性
-----------

扩展微服务平台更具成本效益，因为您只需要扩展单个组件。您不必对整个连接的结构进行全局更改。当您可以单独监控每个组件时，更容易识别瓶颈。

快点
--

微服务开发也比单片开发更快，因为专业团队可以同时在项目的独立部分工作。通过并行开发，小型自治团队可以独立开发，交付，运行和扩展各自的服务。

![](https://miro.medium.com/max/30/1*7ptHd_l3xwgWm9aiyJpyXA.png?q=20)

微服务架构

该图最重要的是将每个“服务”视为一个单独的实体。

**您的主要设计目标是为每种服务以最佳方式解决每个业务目标。**因此，每个单独的服务可能需要NoSQL数据库，Redis缓存或不同的编程语言。架构和部署服务必须支持所有不同的设计决策。理想情况下，单独的子系统不会相互通信，但它们是松散耦合的

> _黄金法则：您是否可以对服务进行更改并自行部署而无需更改其他任何内容？_
> 
> \- Sam Newman，[构建微服务](https://www.goodreads.com/work/quotes/41956437)

过度工程的危险
-------

还有一点需要注意。如果你的团队无法正确构建整体，他们肯定无法构建微服务架构。缺乏经验的团队经常做的最糟糕的事情之一是在一开始就过度设计项目。这个新手的错误可以扼杀一个企业，因为大多数创业公司没有钱烧钱。他们没有资源在不需要时维护多余的部件，或者支付主要的平台大修费用来调整或移除造成危害的部件。过度工程是危险的。它可以扼杀公司的预算，直到没有什么可以继续运作。我见过很多公司因过度工程而失败，而不是缺乏良好的架构。

做出可靠的设计决策
---------

_设计不佳的大型建筑有时意味着没有设计。_

过度工程表明设计团队不知道如何构建适合其客户需求的平台。有时，客户的团队并不清楚地了解或同意他们自己的需求。他们可能对其业务的真实潜力做出不切实际的假设。关于一夜之间成功的诱人幻想可能导致与现实的脱节。当开发团队及其客户过于自信或有偏见时，他们很可能会根据直觉而不是准确的数据做出错误的决定。一个功能强大的敏捷设计团队将指导他们的客户朝着正确的方向前进，并与他们合作建立最佳平台，将他们带到那里。

过度工程通常意味着太多的假设，缺乏与现实的联系，过多的自信和偏见采取基于直觉的决策（而不是更准确的数据驱动的决策）。

混合方法
====

我们经常在现实生活中采用混合方法。一个简单的例子是穿着连帽夹克工作。有了这件夹克的各种穿着或不穿着的选择，你已准备好适应变化的温度和雨天或干燥的天气。现在考虑软件架构中涉及的所有变量：时间限制，团队，预算，可扩展性，公司的成熟度以及期望的业务成果。混合方法是一种灵活的解决方案，可满足所有这些要素的可能需求。

规划您的平台
------

长期规划为我们提供了足够的信息来决定是实现整体结构还是采用更加面向微服务的体系结构。通常，估计可扩展性需求并不难。对于一个成长和成功的项目，它必须建立在一个高质量的平台上，该平台旨在轻松识别瓶颈并一次扩展一步。

模块化巨石
=====

我称之为_模块化整体_结构的是一种混合架构，其中平台不是由多个独立服务组成。但代码是有组织的，因此[语义概念](/swlh/semantics-semantics-and-semantics-e22aa8657e44)是清晰的。使用此设计类型，您首先要识别不同但独立的高级理想或功能组。然后，对代码体系结构进行分区以反映这种自然分离。MVC架构就是一个例子。您可以将此平台视为MVC子系统的集合，并且可以隔离每个子系统的代码。将整体架构更改为模块化整体架构可使平台更容易发展。它消除了将平台转换为微服务的障碍，如果将来需要它们的话。

成功产品的生命周期
=========

让我们说你的公司从一个餐巾纸的想法变成了一个上市的数百万美元的业务，而这一切都始于一个MVP。你可能从精心设计的巨石开始。贵公司试图确定产品市场的合适性并做出许多数据驱动的决策。随着您的业务开始受到关注，确定了一些瓶颈，无论是被动还是使用负载测试模拟。这些痛点需要架构更改，使系统变得越来越模块化。经过更多更改后，一些模块变为接近独立的系统。团队可以单独处理每个模块。与此同时，[DevOps](/faun/devops-servers-can-be-pets-cows-or-ants-c64e84aea622)并且部署管理变得更加复杂，自动化水平每天都在提高。现在，您的产品看起来像一种微服务方法，但它自然地演变为该状态。

大多数公司如何成功
---------

*   设计支持所需业务成果的架构。
*   做出数据驱动的决策。
*   不要过度工程。
*   预测可扩展性挑战并为它们制定计划。务实。
*   避免[自我驱动的决定](/swlh/your-idea-is-such-a-small-part-of-a-working-business-that-it-can-be-considered-a-rounding-error-d8a9f8d42a1)，并保持[敏捷](/swlh/software-development-is-agile-not-transactional-85283315aa35)。

要构建一个有利可图的平台，您必须以最有效和最有效的方式解决设计问题。您不能通过过于复杂的解决方案和不必要的过度工程来浪费资源。您必须遵循强大的架构指南和标准，以便平台可以扩展。

没有“对抗”
======

Monoliths对于某些问题非常有用，微服务对其他人来说非常好。了解如何以及何时调整最佳解决方案或解决方案组合，以满足您项目不断变化的需求。作为开发人员，您的真正价值在于您为特定问题创建最佳解决方案的能力。

**数据知识，经验，直觉，技能和实用主义将坏工程师与好的和最好的工程师分开** - 那些对客户的长期成功产生真正影响的人。

参考
==

康威，我（1968年4月）。“委员会如何发明？”取自[http://www.melconway.com/Home/Committees\_Paper.html](http://www.melconway.com/Home/Committees_Paper.html)。

Fowler，M。（2014年3月25日）。“微服务：这个新架构术语的定义。”取自[https://martinfowler.com/articles/microservices.html](https://martinfowler.com/articles/microservices.html)。

Fowler，M。和Webber，J。（2008年6月6日）。“我的公共汽车在这方面看起来很大吗？”取自：[https](https://www.infoq.com/presentations/soa-without-esb/)：[//www.infoq.com/presentations/soa-without-esb/](https://www.infoq.com/presentations/soa-without-esb/)。

Richardson，C。（2019）。“什么是微服务？取自[https://microservices.io/](https://microservices.io/)。