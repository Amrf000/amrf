![Build Your Pokédex Part 1 — Introduction to NgRX](https://medium.com/better-programming/build-your-pok%C3%A9dex-part-1-introduction-to-ngrx-a89c3be0ea10)
Build Your Pokédex: Part 1 — Introduction to NgRX
=================================================

An Angular tutorial — NgRX step by step
---------------------------------------

[![Carlos Caballero](https://miro.medium.com/fit/c/96/96/1*V7qx_g0CAhvBCQ8zMewnSA.jpeg)](/@ccaballero?source=post_page-----a89c3be0ea10----------------------)

[Carlos Caballero](/@ccaballero?source=post_page-----a89c3be0ea10----------------------)

Follow

[Jul 10](/better-programming/build-your-pokédex-part-1-introduction-to-ngrx-a89c3be0ea10?source=post_page-----a89c3be0ea10----------------------) · 14 min read

This post is part of a series of posts in which I’m describing how to build your Pokédex using NGRX from **beginner to ninja.** If you want to read more, you can read the following posts:

1.  [Part 1. Build your Pokédex: Introduction to NGRX](/p/a89c3be0ea10/)
2.  [Part 2. Build your Pokédex: @ngrx/entity](/@ccaballero/build-your-pokédex-part-2-ngrx-entity-da176edffdfb)
3.  Part 3. Build your Pokédex: Improve NgRX using create\* functions
4.  Part 4. Build your Pokédex: [@ngrx/data](http://twitter.com/ngrx/data)
5.  Part 5. Build your Pokédex: Testing NgRX

![](https://miro.medium.com/max/60/0*0Y5OTBWR-YCcfel5.png?q=20)

![](https://miro.medium.com/max/965/0*0Y5OTBWR-YCcfel5.png)

![](https://miro.medium.com/max/1930/0*0Y5OTBWR-YCcfel5.png)

In this post, we will develop a **pokédex** using [Angular](http://angular.io) framework and [NgRX](https://ngrx.io) as a state management library.

To understand this post properly, you should know how to manage Angular at an intermediate level and know what a state management library is, because, in this series, we will show how a specific example has been developed (Pokédex), which can be a complement to your NgRX learning.

First, the following GIF shows the result of what we’ll build along these posts.

![](https://miro.medium.com/freeze/max/60/0*jxpofLFJ9V7UzSWL.gif?q=20)

![](https://miro.medium.com/max/913/0*jxpofLFJ9V7UzSWL.gif)

![](https://miro.medium.com/max/1826/0*jxpofLFJ9V7UzSWL.gif)

The directory structure of our project is as shown below (you can read the post about Angular’s Architecture from [AngularAcademy](https://angular-academy.com/angular-architecture-best-practices/)):

![](https://miro.medium.com/max/38/0*EFDizQq0VPrpGQYR.png?q=20)

![](https://miro.medium.com/max/538/0*EFDizQq0VPrpGQYR.png)

![](https://miro.medium.com/max/1076/0*EFDizQq0VPrpGQYR.png)

The structure of the application is divided into two clearly differentiated parts:

*   **shared**. Here we will place all elements that are shared among every module, such as pipes, directives, services, models, and the state.
*   **state**. The state is divided in turn into substates that allow us to manage the data structures where the state of the application will be stored. In our application we will only have a state called Pokémon where the information related to Pokémon is stored.
*   **views**. Here you will find the views/pages of the application. The application is structured in modules:
*   **CoreModule**. The services that are essential for the application, which need to be instantiated initially.
*   **SharedModule**. The modules that are shared among all the feature modules.
*   **FeatureModules**. Modules that are organized by features in the application. In our concrete application we will only have one feature module (PokemonModule).

![](https://miro.medium.com/max/60/0*toOjyh6kpM16SsMg.png?q=20)

![](https://miro.medium.com/max/720/0*toOjyh6kpM16SsMg.png)

![](https://miro.medium.com/max/1440/0*toOjyh6kpM16SsMg.png)

The first step in tutorial is to create a new Angular project using the CLI. Then, the result of creating our project and the concrete version that is being used is shown.

ng new ngrx-pokedex

* * *

tsconfig.json && environments
=============================

In the projects I use TypeScript, I like configuring the `path` to access the subdirectories of `shared` without having to use several levels of backward indentation (`../../ ..`). The `tsconfig.json` file allows you to easily configure these aliases for the routes.

On the other hand, I consider it essential to configure the environment variables in the development as soon as possible, to avoid having to carry this out after you decide to go from development to production. Therefore, the path to our developing fake back end will be defined in the `environment.ts` file as shown below:

Instead of developing a back end where CRUD operations are performed on a database or memory, the `in-memory-web-api` module will be used. This allows us to emulate the operations over a REST.

This module intercepts Angular `Http` and `HttpClient` requests that would otherwise go to the remote server and redirects them to an in-memory data store that you control.

Create an `InMemoryDataService` class that implements `InMemoryDbService`.

At minimum, we must implement a `createDb` method that creates a “database” hash whose keys are collection names and whose values are arrays of collection objects to return or update. Also, I've implemented the `genId` method, which generates an unique ID for each new Pokémon from fake-server.

npm i angular-in-memory-web-api

The data comes from a mock file with the following structure:

Finally, a static image is stored in the server for each Pokémon. These images are stored in the `assets/images/pokemon/` path using the `photo` field to identify it.

Register your data store service implementation with the `HttpClientInMemoryWebApiModule` in your root `AppModule.imports`, calling the `forRoot` static method with this service class and an optional configuration object:

This in-memory web api service processes an HTTP request and returns an Observable of HTTP Response object in the manner of a RESTy web api. It natively handles URI patterns in the form `:base/:collectionName/:id?`

Examples:

`//` for requests to an `api` base URL that gets heroes from a _heroes_ collection  
`GET api/heroes //` all heroes  
`GET api/heroes/42 //` the hero with id=42  
`GET api/heroes?name=^j //` 'j' is a regex; returns heroes whose name starting with 'j' or 'J'  
`GET api/heroes.json/42 //` ignores the `.json`

The in-memory web api service processes these requests against a _database_ — a set of named collections — that you define during setup.

* * *

@ngrx/store
===========

_Store_ is RxJS-powered state management for Angular applications, inspired by Redux. Store is a controlled state container designed for helping to write high-performing and consistent applications on top of Angular.

Key concepts:

*   **Actions** describe unique events that are dispatched from components and services.
*   **State changes** are handled by pure functions called reducers that take the current state and the latest action to compute a new state.
*   **Selectors** are pure functions used to select, derive, and compose pieces of state.
*   **State accessed** with the store, an observable of state and an observer of actions.

You only need to install the following package:

npm install @ngrx/store

* * *

@ngrx/effects
=============

Effects is an RxJS-powered side effect model for Store. Effects uses streams to provide new sources of actions to reduce states based on external interactions such as network requests, web socket messages, and time-based events.

Introduction
------------

In a service-based Angular application, components are responsible for interacting with external resources directly through services. Instead, Effects provides a way to interact with those services and isolate them from the components. Effects is where you handle tasks, such as fetching data, long-running tasks that produce multiple events, and other external interactions where your components don’t need explicit knowledge of these interactions.

Key Concepts
------------

*   Effects isolates side effects from components, allowing for purer components that select state and dispatch actions.
*   Effects runs long-running services that listen to an observable of every action dispatched from the Store.
*   Effects filters those actions based on the type of action they are interested in. This is done by using an operator.
*   Effects performs tasks, which are synchronous or asynchronous, and return a new action.

You only need to install the following package:

npm install @ngrx/effects

* * *

@ngrx/store-devtools
====================

Store Devtools provides developer tools and instrumentation for Store.

These are the steps to configure the tool:

1.  Install the package: `npm install @ngrx/store-devtools`.
2.  Install the [Chrome](https://chrome.google.com/webstore/detail/redux-devtools/)/[Firefox](https://addons.mozilla.org/es/firefox/addon/reduxdevtools/) extension.
3.  In your `AppModule`, add instrumentation to the module imports using `StoreDevtoolsModule.instrument`:

After these steps, you will obtain a new redux tab when you open the web browser element inspector. In this new tab, you can see the actions that have been triggered and the application’s state.

![](https://miro.medium.com/max/60/0*yhTYwWcbrE-tib8u.png?q=20)

![](https://miro.medium.com/max/1938/0*yhTYwWcbrE-tib8u.png)

Following the instructions of the [Angular team to build an Angular application architecture](https://angular.io/guide/architecture), two modules will be defined:

*   **SharedModule**. This module imports and exports the modules that are shared in the feature modules. Note that a set of modules belonging to `@angular/material` has been imported, which could have been imported and exported in a specific module named `shared.material.module`. However, it has been exported directly from the `SharedModule` module to simplify the problem. It is necessary to import the `StoreModule` module since it is the responsible to load the store in the application. Finally, modules related to the forms are imported in order to build the user interfaces.
*   **CoreModule.** In this module, the reducers and effects are initialized using the `StoreModule` and`EffectsModule` modules.

Angular Material installation is quite simple since we only need to install the following packages:

npm install @angular/material   
npm install @angular/flex-layout   
npm install @angular/cdk

When we have to use a service with NgRX, we subtract all the logic related to the state of the application. Traditionally, when you develop a service in Angular, you have a set of attributes that model a sub-state of the application.

Using NgRX, the problem is considerably reduced, since all the logic related to the management of the state is delegated to the Store and therefore disappears from the services. In fact, our `Pokemon.service` service can be considered a larger service that encapsulates the logic related to the `HttpClient` service since its only task is to communicate with the b.

It’s not necessary to build a class when you’re not going to include methods related to the data. Therefore, we have decided to create an interface in which the attributes of each Pokémon are modeled as shown below.

[NgRx](https://ngrx.io/) is a framework for building reactive applications in Angular. NgRx provides state management, isolation of side effects, entity collection management, router bindings, code generation, and developer tools that enhance developers’ experience when building many different types of applications.

NgRX is composed of the following concepts:

*   **State**. The `state` that we want to model is defined here. The ideal is to design sub-states that make up the full state.
*   **Actions**. List of actions that can be performed on the store or that have an effect.
*   **Reducers**. Methods that transform the State (creating a new state since immutability is used).
*   **Selectors**. Methods that let you create an observable on a substate of the store. The selectors are very useful because they allow us to create observables only on the fragment that interests us in each component, without needing to observe the whole store.
*   **Effects**.Those methods that do not modify the store are incorporated here. In our case, we will use it to create notifications for whether the operations were carried out satisfactorily or incorrectly. In addition, the effects are used to trigger the actions in case the service’s operations have been satisfactorily or incorrectly performed.

Therefore, the `@shared/state/pokemon` directory consists of the following files:

![](https://miro.medium.com/max/60/0*vqPFGhhZwfFyMf_U.png?q=20)

![](https://miro.medium.com/max/340/0*vqPFGhhZwfFyMf_U.png)

![](https://miro.medium.com/max/680/0*vqPFGhhZwfFyMf_U.png)

The `index.ts` file is only used to improve the verbosity of the imports in the Pokémon directory.

* * *

State Models
============

We now create some state models in `pokemon` file.

The `pokemon` state is composed of two attributes that we define below:

*   **ids**. This is an array of numbers that contains the objects’ keys in a certain order. In this first post, we will not use this array, which is provided by the `@ngrx/entity` module that we will explain in the next post.
*   **entities**. This is a key-value object where the key is a string corresponding to the ID of each Pokémon. In this way, we have direct access to each Pokémon through its key without having to search in arrays.

* * *

Actions
=======

The first thing we must define is the set of actions that can be performed on the store.

The traditional operations are those composing the well-known acronym CRUD. Each operation is complemented by two extra operations: `XX_SUCCESS` and `XX_FAILED`.

In this way, the operation without a suffix is used as a trigger for the execution of the service, which communicates with the back end.

Depending on the value returned by the service, the SUCCESS or FAILED action will be triggered.

In the event that the SUCCESS operation is triggered, the associated reducer that modifies the store and a notification with the message that the operation has been carried out satisfactorily will be executed. On the other hand, when the FAILED operation is executed we do not need to modify the store, but a notification indicates that an error has occurred.

Therefore, the set of actions that we define, with their corresponding namespace `[Pokemon]` are the following:

A class that implements the `Action` interface is used to build each of the actions in the NgRX ecosystem. The `payload` is specified in the constructor method of each of the classes. This `payload` is the argument of the reducers, which modify the state.

The `AddSuccess` class is shown as an example. The `type` attribute is used to define the type of action to which that class corresponds. Finally, the `payload` associated with this action is a `Pokemon` coming from the back end.

The `pokemon.actions.ts` file is the one shown below:

* * *

Reducers
========

Reducers in NgRx are responsible for handling transitions from one state to the next in your application. Reducers functions handle these transitions by determining which actions to handle based on the action’s type.

In the NgRX ecosystem, it is only necessary to export a function to reduce to the `CoreModule`. In our concrete problem, this function is `pokemonReducer`. State changes are defined in the function reducer.

This function has the following signature:

Where two parameters are received:

*   **state**. The current state, prior to the modification. In case there is no current state, the initial state will be used, which has been defined in a function.
*   **action**. The action that will be carried out on the state.

The reduce function consists of a `switch` in which a new `PokemonState` must be returned.

Note that the cases that modify the state are “SUCCESS” where the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) is used to build the new state.

For example, the `ADD_SUCCESS` case returns a new object in which the current state (`... state`) and the modification of the `entities` property are combined. The `entities` property is a new object composed of the combination of the old `state.entities`, in which the `action.pokemon.id` position is modified with the new `action.pokemon`.

It’s important to note that in the received payload object will be a property called `pokemon`, which is the object passed as a parameter from the created action.

The `pokemon.reducer.ts` file is the one shown below. The `arrayToObject` function is an auxiliary function that converts an array into an object.

* * *

Selectors
=========

Selectors are [pure functions](https://www.carloscaballero.io/understanding-javascript-typescript-memoization/) used for obtaining slices of store state. @ngrx/store provides a few helper functions for optimizing this selection. Selectors provide many features when selecting slices of state.

NgRX provides two functions to create selectors:

*   **CreateFeatureSelector**. This function allows us to create a selector for a substate.
*   **CreateSelector**. This function allows us to create selectors using two parameters: 1. A selector; 2. A function that defines what value we want to select.

In our Pokédex we only need a selector (load them all). If we have a page with details of each Pokémon, we could create a specific selector called `selectById`.

The `pokemon.selector.ts` file is the one shown below.

* * *

Effects
=======

The effects are a fundamental part of our implementation of Pokédex since we have delegated the responsibility of deciding which action to dispatch for the purpose. Below are the effects associated with loading Pokémon as examples.

`loadAllPokemon $` is listening for the appearance of the `LOAD_POKEMONS` action (which will be dispatched from the components). From this point on, a minimum knowledge of the [RxJS library](https://rxjs-dev.firebaseapp.com/) is required for NgRX because it will work with the observable streams.

In the first place, the `switchMap` operator is used, which allows you to discard the sequence of values coming from the issuer to only have a flow managed at each moment. This is where the `PokemonService` service is used, which returns an `Observable<Pokemon[]>`from the back end. If the operation from the back end is successful, then the `LoadPokemonSuccess` action is triggered in which the payload is the `pokemon` array. On the other hand, if an error occurs from the back end, then the `LoadPokemonFailed` action is triggered, in which the payload is the server error message.

In our case, the problem has been simplified by creating two effects that listen to the SUCCESS and FAILED operations. In both effects, the same notification message is always displayed.

It is important to note that the parameter `dispatch: false` has been indicated to the `Effect` decorator since each effect by default triggers an action; if it is not defined, it triggers the same action at the end, which can lead to an infinite loop.

Both effects listen for actions of a specific type ( `POKEMON_ACTIONS_SUCCESS` or `POKEMON_ACTIONS_FAILED`) and trigger a notification using Angular Material's `snackBar` service.

Don’t wait for an effect for the SUCCESS action in which the store is modified, since that is precisely the task performed by the reducer that we have previously defined.

Finally, the `pokemon.effects.ts` file is the one shown below.

* * *

Root.reducer
============

Finally, and not least, we need a `root.reducer` file from which all the sub-states of our application will be loaded. In our particular case, we only have `pokemon.reducer`.

Now we will begin to build the visual part of our application. Keep in mind that all management of the state of the application is delegated to NgRX and therefore we don’t need to worry about changing the state in any component.

This fact simplifies the pages/views a lot, as we will only have to define two types of components:

*   **SmartComponents**. Components that will perform tasks with the store through the `dispatch` method or using the selectors.
*   **DummyComponents**. Components that only have to show data and manage events towards the SmartComponent.

This architecture was presented in the [ng-conf](https://www.carloscaballero.io/p/8f9dc168-b63b-4ea1-9e4e-bd2f67081a79/(https://www.ng-conf.org/2019/angular-architecture-specific-layers/)) as a stable architecture. The following image shows the architecture used in which we have omitted the [Facade pattern](https://www.carloscaballero.io/design-patterns-facade/) because it is not necessary for our concrete problem because we only have one module.

![](https://miro.medium.com/max/60/0*gUJK8yNbyTdlT_b5.png?q=20)

![](https://miro.medium.com/max/602/0*gUJK8yNbyTdlT_b5.png)

![](https://miro.medium.com/max/1204/0*gUJK8yNbyTdlT_b5.png)

The structure of the views directories is as follows:

![](https://miro.medium.com/max/60/0*X_sgjaPZpa2FeiiI.png?q=20)

![](https://miro.medium.com/max/454/0*X_sgjaPZpa2FeiiI.png)

![](https://miro.medium.com/max/908/0*X_sgjaPZpa2FeiiI.png)

Returning to our concrete problem (Pokédex), PokemonComponent is the smart component. On the other hand, the components related to the list and the form are dummies components.

The launcher of our Pokémon module is the `app.component`, which is quite simple as I show you next.

* * *

PokemonModule
=============

The Pokémon Module is only responsible for loading the three components for which the application is composed, and of course, the SharedModule as shown below.

* * *

Pokemon Component (Smart Component)
===================================

The Pokémon component interacts with the state through the `dispatch` method and the selectors. Communication with the component dummies is done through the attributes `[pokemon]` and the events `onUpdate`, `onAdd`, `onDelete`, and `onSelect`.

The `app-pokemon-list` component receives a list of Pokémon which are constantly subscribed to the store through the `selectAll` selector. The pipe `async` is the one that performs the task of `subscribe` and `unsubscribe` for the Pokémon so that the component dummy receives the list of Pokémon and only focuses on performing the task of displaying them properly.

The constructor of this component is responsible for loading all the Pokémon using the `LoadPokemon` action as shown in the code:

CRUD operations are performed in methods that are very simple:

The code of this component is the following:

The PokemonForm component focuses on performing the operations `add` and `update`.

This component only needs to focus on what is relevant to the view: **Form Validation**.

Communication between components is done using `EventEmitter`. On the other hand, this component receives a Pokémon from the `smartComponent` because you can select a Pokémon to edit from the `PokemonList`.

* * *

PokemonList Component (Delete/Select Pokémon)
=============================================

Finally, the `PokemonList` component has the task of communicating with the `smartComponent` to do the `delete` and `select` operations. This component is very similar to the previous one. In this case we should only focus on showing the list of Pokémon without having to worry about the application's state.

Finally, we have designed this application using Flex-Layout and Angular Material using the `Indigo-pink` theme which is configured from Angular's `styles.css` file.

In this post, we have built a small example in which fundamental points of the architecture of a large SPA application are presented:

*   Decouple the management of the state of the visual components.
*   Create the elements for the management of the state efficiently and easily.
*   Create components that focus on the relevant: **The view**.
*   The components are classified in SmartComponent and DummyComponent according to whether they will communicate with the state of the application.

The following posts in this series will cover interesting topics such as:

*   Automating the creation of the state since it is very repetitive using @ngrx/entity.
*   Using a facade pattern through the `@ngrx/data` package.
*   Testing the application’s state.

What’s important really are the concepts, not the technique or library used. Therefore, this post should be taken as a guide for those who start to have large Angular applications and require applying architectural principles.

**Here is this post’s** [**GitHub branch**](https://github.com/Caballerog/ngrx-pokedex/tree/ngrx-part1)**.**