![Rust中的WebAssembly模块](https://medium.com/@rossbulat/webassembly-modules-an-introduction-5554b8982402)
Rust中的WebAssembly模块：简介
======================

如何生成和构建Wasm模块，并将其导入React项目
--------------------------

[![罗斯布拉特](https://miro.medium.com/fit/c/48/48/1*49Z_ce0CnC1mH7xtlmAkSg.jpeg)](/@rossbulat?source=post_page-----5554b8982402----------------------)

[罗斯布拉特](/@rossbulat?source=post_page-----5554b8982402----------------------)

跟随

[9月2日](/@rossbulat/webassembly-modules-an-introduction-5554b8982402?source=post_page-----5554b8982402----------------------) · 13 分钟阅读

![](https://miro.medium.com/max/30/1*9hFW7f_3s3gEcPoG05f4KA.jpeg?q=20)

![](https://miro.medium.com/max/1200/1*9hFW7f_3s3gEcPoG05f4KA.jpeg)

WebAssembly，网络的未来？
------------------

[WebAssembly](https://developer.mozilla.org/en-US/docs/WebAssembly)被称为Web _的_未来技术，能够以接近本机的速度在浏览器中运行代码。WebAssembly（通常缩写为wasm）是一种紧凑的二进制格式，它使用C和C ++等语言编译，以及Rust - 我们将在本文中演示的语言。

Rust是一种相对较新的语言，它已经为WebAssembly中的模块开发，编译和发布提供了大量支持，主要由Mozilla Foundation领导。Rust和WebAssembly的开发正在进行中，尽管Rust处于更成熟的状态。尽管如此，我们可以预期本文中讨论的API会随着时间的推移而发生变化，我们会在发布版本时尝试及时更新。

[_AssemblyScript_](https://github.com/AssemblyScript/assemblyscript)_是Typescript的一个严格子集，是另一种有趣的语言，旨在让Javascript开发人员开始采用Wasm，前端开发人员的学习曲线比Rust或C ++更小。这是WebAssembly生态系统中创新的一个很好的例子。_

在这篇文章中，我们将发布一个向Github发出获取请求的wasm模块，并返回生成的JSON。然后将在Create React App项目中从Javascript调用此编译的wasm函数。

可以[在Github](https://github.com/rossbulat/wasm-fetch-example)上找到与此作品相符的完整项目。

Rust WebAssembly工具
------------------

要使用Rust构建一个wasm模块，我们将利用两个框架来打包模块并使编译的WebAssembly与浏览器进行交互：

*   `[**wasm-pack**](https://rustwasm.github.io/docs/wasm-pack/)`（[Github](https://github.com/rustwasm/wasm-pack)）：用于为网络编译基于Rust的WebAssembly的“一站式服务”。`wasm-pack`是一个CLI工具，可以构建，测试和发布WebAssembly模块
*   `[**wasm-bindgen**](https://rustwasm.github.io/docs/wasm-bindgen/)`  （[Github](https://github.com/rustwasm/wasm-bindgen)）**：** Rust库和CLI工具，用于促进与Javascript和DOM的交互。事实上，`wasm-bindgen`为所有Web API提供绑定的底层API，可以操作DOM，监听事件，调用获取请求，websockets等等 - 所有这些都是用Rust编译的

重要的是要强调WebAssembly不能直接访问DOM。毫无疑问，这将在1 - 2年内有所不同，现在开发的[各种提案](https://github.com/WebAssembly/proposals)将解决[多线程](https://github.com/webassembly/threads/blob/master/proposals/threads/Overview.md)和直接DOM操作等功能，这是目前存在的WebAssembly采用的两个主要瓶颈。

目前，`wasm-bindgen`它充当了与Javascript API交互的桥梁，所有这些API都在库中具有Rust绑定。这是通过两个底层依赖项来完成的`wasm-bindgen`：`[js-sys](https://docs.rs/js-sys/0.3.27/js_sys/)`crate和`[web-sys](https://docs.rs/web-sys/0.3.27/web_sys/)`crate，分别将整个Javascript标准库和Web API库暴露给Rust和WebAssembly。

总结一下这个介绍，我们在短期内最有可能期待的是：

*   `wasm-bindgen`随着更多WebAssembly提案的实施和支持在浏览器中推出，大大加快。我们还可以期望更小的模块尺寸，因为样板代码变得不必要了
*   `wasm-bindgen`将在功能推出时尝试维护其顶级API，但`web-sys`随着直接DOM操作的推出，底层无疑会发生重大变化
*   `js-sys`仍然会出现与Javascript标准库和Javascript模块进行交互的目的，**这两种语言将携手合作**

最后一点很可能是短期内WebAssembly的主要用例。在Javascript中已经建立了模块库（以及整个Web应用程序），没有什么动力将整个项目重新构建到WebAssembly中。

但是，我们可以期待的是基于WebAssembly的模块，它可以很好地完成特定的事情，包含在NPM模块中并导入到Javascript项目中。模块如：

*   **计算成本高昂的** **东西，**如处理数字，渲染3D对象或运行机器学习算法。在wasm中的这些任务将比它们的Javascript对应程序快一个数量级
*   **区块链轻客户端和分布式网络协议**。使用区块链客户端，特别是Parity的以太网和Substrate框架，很明显将其现有源代码编译到WebAssembly中将具有充分意义，让客户端客户端作为导入模块在浏览器中运行。这些还将利用速度和效率，同时从您的UX代码模块化协议级API
*   借助Rust内置的内存安全性和严格的打字功能，我们还可以将安全功能和实时聊天/实时Web环境等**关键任务工具**实现为WebAssembly模块，并注重稳定性

Javascript不会去任何地方
-----------------

这些在Javascript方面意味着什么？在这一点上，很难看到没有Javascript成为网络主导语言的未来。Javascript不会随处可见，而WebAssembly很可能是对Javascript的补充，而不是替代，加速了应用程序的某些部分，并提供了更多方法来使其他语言的代码库在浏览器中运行。

有了这个理解，让我们现在跳进一个真实世界的例子。我们将稍微修改Github上托管的[示例中](https://github.com/rustwasm/wasm-bindgen/tree/master/examples)的[获取请求示例](https://github.com/rustwasm/wasm-bindgen/tree/master/examples/fetch)。`wasm-bindgen`[](https://github.com/rustwasm/wasm-bindgen/tree/master/examples)

然后，我们将异步导入此模块到Create React App项目中，并在React组件中调用我们的wasm函数，为webpack提供了在过程中识别基于wasm的模块而无需弹出项目的方法。

* * *

安装Wasm Pack
===========

为了便于讨论，我们将克隆与此部分重合的[git存储库](https://github.com/rossbulat/wasm-fetch-example)，其中包含一个`wasm-pack`生成的Rust项目，其中包含获取请求代码。我们还将介绍一些基本的设置步骤。

关于VS代码的说明
---------

Visual Studio代码对[RLS](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust)扩展的Rust提供了很好的支持。此外，[WebAssembly](https://marketplace.visualstudio.com/items?itemName=dtsvet.vscode-wasm)扩展还可用于强制语法突出显示和轻松预览wasm二进制文件的功能。

_以下说明假定您已在系统上安装了Rust。如果没有，请转到_[_Rust Installation页面_](https://www.rust-lang.org/tools/install)_并下载_`_rustup_`_。_

让我们首先为我们的esm努力安装所需的CLI工具，从开始`wasm-pack`。最新的安装说明将在其[安装页面上](https://rustwasm.github.io/wasm-pack/installer/)，但安装软件包只需要一个curl请求：

**#install wasm-pack  
** curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | SH

一个`wasm-pack`二进制文件将安装在您的`~/.cargo/bin`目录中。该程序包含`new`，`build`，`test`和`publish`命令的文件，其中可以发现[在这里](https://rustwasm.github.io/docs/wasm-pack/commands/index.html)。

熟悉wasm-bindgen
--------------

还建议克隆整个`wasm-bindgen`存储库，并在系统上显示所有示例代码以进行测试：

**#clim wasm-bindgen**  
 git clone [https://github.com/rustwasm/wasm-bindgen](https://github.com/rustwasm/wasm-bindgen)

该`[examples/](https://github.com/rustwasm/wasm-bindgen/tree/master/examples)`文件夹包含一系列项目，虽然未配置为构建为模块。每个示例都可以在线查看，并附有专门的文档页面。请参阅每个示例的`README.md`文件以获取实时演示和文档的链接。

最简单的`wasm-bindgen`例子是`[console_log](https://github.com/rustwasm/wasm-bindgen/tree/master/examples/console_log)`项目，展示了如何将`console.log()`Javascript函数绑定到Rust函数 - 最简单的实现如下：

**＃\[wasm\_bindgen\]**  
 extern“C”{ **＃\[wasm\_bindgen（js\_namespace = console）\]** fn log（s：＆str）; }  

我们必须注释所有的wasm块和函数，`#[wasm_bindgen]`让编译器知道这个代码块将被编译成WebAssembly。这是一种[条件编译](https://doc.rust-lang.org/reference/conditional-compilation.html)，`wasm_bindgen`称为属性。

**_注意：_**_您可能会看到一些WebAssembly示例包含在内_`_extern {}_`_，而其他__示例__则包含在其中_`_extern “C” {}_`_。目前两者之间没有任何意义。一位有关开发人员__为这种差异_[_打开了一个问题_](https://github.com/rustwasm/wasm-bindgen/issues/422)_，这似乎源于其自动格式化功能_`rustfmt`_。_

访问条件编译
------

Rust内置了一系列条件编译属性，例如`[#cfg](https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg-attribute)`用于确定是否应该基于变量编译代码块的属性，一些是内置的，例如程序正在编译的平台。以下是从文档中获取的几个示例：

**//此函数仅在编译macOS时编译**  
＃\[cfg（target\_os =“macos”）\]   
fn macos\_only（）{   
 // ...   
} **//只有在定义了foo或bar时编译此函数**＃\[cfg （任何（foo，bar））\]   
fn needs\_foo\_or\_bar（）{   
 // ...   
}

在第一个示例中，`[target_os](https://doc.rust-lang.org/reference/conditional-compilation.html#target_os)`是一些[设置配置选项之一](https://doc.rust-lang.org/reference/conditional-compilation.html#set-configuration-options)，它确定我们正在编译的平台。我们甚至可以定义平台特定的依赖关系`Cargo.toml`; 如果我只想在该平台上支持macOS核心库，我可以在以下方面执行以下操作`Cargo.toml`：

**#Cargo.toml** **\[target.'cfg（target\_os =“macos”）'。dependencies\]**  
 cocoa =“0.18.4”   
core-foundation =“0.6”   
core-graphics =“0.17.3”   
......

您可能也注意到`#[test]`Rust项目中的属性 - 阻止编译注释的代码`#[test]`，并与之一起运行`cargo test`。

所以，`#[wasm]`并且`#[wasm-bindgen]`是专门用于编译到WebAssembly的自定义注释。重新访问该`console.log`示例，我们还使用属性参数来指定Javascript名称空间以将我们的函数绑定到：

**＃\[wasm\_bindgen（js\_namespace = console）\]**  
 fn log（s：＆str）;   
...

在上面的例子中，我们的目标是将`log()`函数绑定到`console.log()`Javascript函数。

关于条件编译的主题，WebAssembly项目通常也使用`feature` `cfg`参数，进一步过滤基于我们定义的特征编译的内容`Cargo.toml`：

\[功能\]   
默认= \[“super\_mode”\]

这些功能可以在以下内容中使用`#[cfg]`：

＃\[cfg（feature =“super\_mode”）\]   
fn super\_execute（s：＆str;）{   
 ...   
}

使用属性可以很有趣，为代码增加灵活性，同时适应您可能遇到的边缘情况 - 例如针对特定客户的自定义构建。双方`wasm-pack`并`wasm-bindgen`在很大程度上依赖于定制汇编成WASM的功能。在[此处](https://doc.rust-lang.org/reference/attributes.html#attributes)阅读有关Rust中属性的更多信息。

回到`console.log`演示，该演示还记录了`console.log()`多态的方式，并且可以接受多个参数。因此，我们还可以绑定多个签名，同时确保`console.log()`仍然使用`js_name`属性参数调用该函数：

**＃一个带有无符号整数的日志函数**＃\[wasm\_bindgen（js\_namespace = console，**js\_name = log**）\]   
fn log\_u32（a：u32）;

这是Rust如何绑定到Javascript的一个很好的例子，与我们尝试使用我们的fetch示例相反，旨在从Javascript端调用Rust编译的wasm。

除了从存储库运行这些示例之外，最好将功能从它们复制到您自己的`wasm-pack`项目中，记住要包含所需的依赖项`Cargo.toml`以与函数一致。

随着一些Rust理解的巩固，让我们现在转到我们的wasm fetch演示。

* * *

Wasm获取项目结构
==========

克隆以下存储库以获取我们接下来将要介绍的示例演示，其中包含Rust模块和React应用程序客户端：

git clone https://github.com/rossbulat/wasm-fetch-example

该`wasm-module`目录包含Rust项目，而该`client`目录包含React客户端。

_为方便起见，我已将两个项目打包到一个存储库中。建议他们在顶层（分成独立的仓库，并有每个项目的配置文件_`_Cargo.toml_`_，_`_package.json_`_等等）。_

内部的模块
-----

`wasm-pack new`已运行以生成项目结构，并且已将[fetch](https://github.com/rustwasm/wasm-bindgen/tree/master/examples/fetch)功能插入到我们的`lib.rs`。

在调用`call_fetch()`函数（我们将在Javascript中执行）时，将向Github `wasm-bindgen`存储库调用获取请求，从repo获取最新的提交。返回生成的JSON，然后可以在Javascript端解构。

文件夹结构很简单，我们的Rust源文件在`src/`目录中，并`Cargo.toml`概述了项目依赖项（以Cargo [crates](https://crates.io/)的形式），以及一些初始配置：

 #Rust **项目结构** src /   
fetch.rs   
 lib.rs   
 utils.rs .gitignore   
Cargo.toml   
...

这些是我们感兴趣的文件。让我们深入了解这个项目包含的内容：

*   该`src/`文件夹包含要编译的Rust代码。该项目的内容是`[lib.rs](https://github.com/rossbulat/wasm-fetch-example/blob/master/wasm-module/src/lib.rs)`，`call_fetch()`我们希望在Javascript中调用函数。此文件包含一系列use语句，可将各种库纳入范围，包括所需的`wasm_bindgen`Javascript绑定和类型
*   `[src/fetch.rs](https://github.com/rossbulat/wasm-fetch-example/blob/master/wasm-module/src/fetch.rs)`只包含一些将用于存储返回的获取数据的结构。在[原始的](https://github.com/rustwasm/wasm-bindgen/blob/master/examples/fetch/src/lib.rs) `wasm-bindgen` fetch示例中，这些结构也在lib.rs中定义，以及示例代码的其余部分。为了便于阅读，我选择将它们与主执行分开
*   `[Cargo.toml](https://github.com/rossbulat/wasm-fetch-example/blob/master/wasm-module/Cargo.toml)`是一个要理解的关键文件，定义项目中使用的依赖项和“功能”。我们将访问这些工作如何进一步发展

在将返回的Promise转换为Rust Future之前，内部的执行流程`call_fetch()`调用来自`wasm-bindgen`绑定的Javascript获取请求\- Rust承诺的Rust等价物。一旦从Github收到响应，它就会通过定义的结构进行持久化和格式化`fetch.rs`。

这是完整的执行流程：

#fetch **请求执行流程** - > JS调用call\_fetch（）\- >通过wasm-bindgen绑定调用获取请求，返回promise \- > JS Promise转换为Rust Future \- > Await Github响应并通过提供的结构存储\- > Rust Future转换回到JS Promise \- >返回在JS中使用的响应

正如我们之前探讨的那样，随着WebAssembly规范变得更强大，这个过程将变得更加简化。

使用wasm-pack构建构建模块
-----------------

运行时`wasm-pack build`，编译结果将输出到`pkg/`项目文件夹中的目录。事实上我们现在可以这样做来检查结果：

#build **project** cd wasm-fetch-example wasm-pack build \> \[INFO\]：🎯检查Wasm目标...   
\> \[INFO\]：🌀编译为Wasm ...   
\>编译proc-macro2 v0.4.30   
 ...

项目构建时间取决于您的系统。生成的`pkg/`文件夹将包含我们编译的模块：

 #pkg **contents** pkg /   
README.md   
 wasm\_fetch\_example.d.ts   
 wasm\_fetch\_example\_bg.d.ts   
 package.json   
 wasm\_fetch\_example.js   
 wasm\_fetch\_example\_bg.wasm

我们可以看到，`wasm-pack`它不仅仅`.wasm`为我们输出二进制文件：

*   `package.json`已生成A ，将此目录视为模块本身，准备发布到NPM或其他目录（我们将简要介绍如何将模块发布到私有注册表中）
*   `.d.ts`在将模块导入基于Typescript的项目时，已为模块和周围绑定函数生成类型定义文件。这些文件包含每个`export`wasm模块的类型\- 这些类型可以是常量，函数类等
*   `wasm_fetch_example.js` 包含与wasm模块本身的Javascript绑定
*   您`README.md`也将被复制到包中，以提供有关该模块的文档

`wasm-pack`已完成格式化项目的工作，准备作为模块发布，并支持Javascript及其Typescript超集。编译后，您可能会在控制台中看到此警告：

\> Cargo.toml中缺少可选字段：'description'，'repository'和'license'。这些不是必需的，但建议使用

`wasm-pack`将尝试从此`Cargo.toml`填充此信息`package.json`。您确实可以在`Cargo.toml`以下`[package]`部分中输入此信息：

**#Cargo.toml** \[package\]   
description =“一个基于Rust的WebAssembly项目，通过wasm-bindgen实现获取请求。”   
license =“MIT”   
repository =“ **<your\_repo\_url>”**，  
...

**_注意：_**_后续构建要快得多，只需重新编译您所做的更改。_

* * *

发布wasm模块
========

如果您希望公开发布WebAssembly模块，您可以使用`[pack](https://rustwasm.github.io/wasm-pack/book/commands/pack-and-publish.html)`[和](https://rustwasm.github.io/wasm-pack/book/commands/pack-and-publish.html)`[publish](https://rustwasm.github.io/wasm-pack/book/commands/pack-and-publish.html)`[命令](https://rustwasm.github.io/wasm-pack/book/commands/pack-and-publish.html) `wasm-pack`提供：

*   `wasm-pack pack`从`pkg/`目录创建一个tarball
*   `wasm-pack publish`从`pkg/`目录创建一个tarball ，然后将其发布到公共NPM注册表

_该_`_publish_`_命令只是指向命令的指针，该_`_npm publish_`_命令是发布到NPM注册表的官方方式。因此，所有可用的标志_`_npm publish_`_也可用_`_wasm-pack publish_`_。_

**＃发布到公共npm注册表  
** wasm-pack build

您可能希望将模块私有地发布到私有注册表。我已经发布了一篇关于如何使用私有代理注册表Verdaccio设置此类注册表的文章。请阅读以下文章中的操作方法：

[

使用Proxy Registry Verdaccio发布私有NPM包


--------------------------------------

### 

如何在保持对公共npm注册表的访问权限的同时私下发布包

#### 

medium.com



](/@rossbulat/publish-private-npm-packages-with-proxy-registry-verdaccio-56b769bca659?source=post_page-----5554b8982402----------------------)

设置私有注册表后，只需提供带有`--registry`标志的URL ：

**＃发布到私有注册表  
** wasm-pack publish --registry“http：// <your\_registry\_ip\_or\_domain>”

这提供了一种在内部测试WebAssembly库的方法 - 对于随着规范的发展而迭代开发WebAssembly模块的组织而言，这是一种更现实的方案。

`wasm-pack`现在已经发挥了作用，它的作用在发布过程之后停止，我们的模块准备作为依赖项添加到项目中。现在让我们探讨如何在React项目中使用wasm模块。

* * *

导入wasm模块
========

为了测试获取功能，我在这篇文章的随附存储库中包含了一个基本的[Create React App项目](https://github.com/rossbulat/wasm-fetch-example/tree/master/client)。

为了保护读者不要发布wasm模块本身用于这个项目，我将它包含在内部`node_modules`，忽略了除此模块之外的整个目录：

**// .gitignore** client / node\_modules / \*   
！/ client / node\_modules / wasm-fetch-example   
...

修改Create React App以支持wasm模块
---------------------------

Create React App当前不支持Webpack配置中基于WebAssembly的模块。

**_注意：_**[_ECMA脚本模块集成_](https://github.com/webassembly/esm-integration)_目前是一个活跃的WebAssembly提议 - 一旦这些功能最终确定并推出，我们可以期待更简化的集成过程。_[](https://github.com/webassembly/esm-integration)

这也很可能是短期问题，并且随着WebAssembly获得更多采用而得到解决 - 但是有一个解决方案。

为了支持我们新发布的模块，我们需要修改Create React App的Webpack配置，添加一个wasm loader。我们确实可以在没有弹出CRA的情况下使用一个名为的包`[react-app-rewired](https://www.npmjs.com/package/react-app-rewired)`，同时`[wasm-loader](https://www.npmjs.com/package/wasm-loader)`向Webpack添加WebAssembly支持。

这些已作为dev依赖项安装：

yarn add react-app-rewired wasm-loader --dev

`[config-overrides.js](https://github.com/rossbulat/wasm-fetch-example/blob/master/client/config-overrides.js)`已在客户端的根目录中定义了一个脚本，该脚本插入了对基于wasm的模块的支持。

这里的最后一个修改是在`package.json`我们调用的地方，`react-app-rewired`而不是`react-scripts`在编译和运行应用程序时：

**//的package.json** “脚本”：{   
 “开始”： “ **反应-APP-重新布线**开始”，   
 “ 建立”： “ **反应-APP-重新布线**的构建”，   
 “ 测试”： “ **反应-APP-重新布线**测试”，   
 。..   
}

异步导入wasm模块
----------

`App.tsx` 演示了如何异步导入wasm模块并将其加载到组件的状态。

这是完整的解决方案：

* * *

综上所述
====

本文旨在介绍从Rust构建WebAsssembly模块的过程，`wasm-pack`以及生成和编译最终模块的方法。我们已经确定：

*   这`wasm-bindgen`为我们提供了对Javascript标准库和标准Web API库的绑定，使我们能够访问调用Javascript，操作DOM，获取窗口和事件数据等 - 所有这些都来自我们的Rust wasm模块
*   `wasm-pack` 是一个有用的工具，用于生成基于Rust的WebAssembly项目，并自动编译wasm的过程并准备将结果包作为模块发布
*   默认情况下，创建React App当前不支持其Webpack配置中的.wasm模块扩展。要将WebAssembly放入组件中，`react-app-rewired`可以使用该软件包将wasm-loader插入Webpack配置，扩展CRA配置，而无需弹出项目
*   通过Promises异步导入wasm模块不会中断您的应用程序流。可以使用加载指示符或提示让用户知道您的模块正在加载到状态