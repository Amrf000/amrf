![前端JS开发没有透明的源代码](https://medium.com/better-programming/bye-bye-transpile-3e4413f7f590)
前端JS开发没有透明的源代码
==============

使用Google Chrome，ES模块和导入地图
-------------------------

[![法比亚诺泰利](https://miro.medium.com/fit/c/48/48/2*S9rbJQ5i29eUBsVM0a11Vg.jpeg)](/@ftaioli?source=post_page-----3e4413f7f590----------------------)

[法比亚诺泰利](/@ftaioli?source=post_page-----3e4413f7f590----------------------)

跟随

[7月10日](/better-programming/bye-bye-transpile-3e4413f7f590?source=post_page-----3e4413f7f590----------------------) · 9 分钟阅读

![](https://miro.medium.com/max/30/1*XEnEE7B_IYvKobT0vmaG7A.jpeg?q=20)

![](https://miro.medium.com/max/4288/1*XEnEE7B_IYvKobT0vmaG7A.jpeg)

照片由[Farzad Nazifi拍摄](https://unsplash.com/@euwars?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)于[Unsplash](https://unsplash.com/search/photos/source-code?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)

* * *

什么是Transpiling？
===============

[Transpiling](https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them)正在缩进从编程语言中引导某些源代码并在另一种编程语言（或同一语言的两种不同方言/版本）中生成等效代码的过程。

在前端浏览器开发中，转换主要用于使用JS以外的语言开发应用程序，并将原始代码转换为JavaScript（例如[TypeScript](https://www.typescriptlang.org/)，[CoffeeScript](https://coffeescript.org/)，[Closure](https://developers.google.com/closure/compiler/)，Java，[C＃](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/)等）。

另一个用例是将您的本机JavaScript代码从一个版本转换为另一个版本（[ECMAScript版本](https://en.wikipedia.org/wiki/ECMAScript)），这样您就可以使用浏览器（或其中一些[版本](https://en.wikipedia.org/wiki/ECMAScript)）尚不支持的功能。

* * *

透明度的成本
======

在开发过程中使用转换可能非常诱人; 所有这些功能完整的语言和语法糖可供选择！

所有这些都承诺让您在更短的时间内以更少的错误开发更好的应用程序。但这些承诺是真的吗？那是多少钱？

JavaScript的语言很糟糕，尤其是构建复杂的大型应用程序。但是近年来JavaScript已经发展了很多，并且随着每个新的语言规范版本（[ECMAScript版本](https://en.wikipedia.org/wiki/ECMAScript)）变得越来越好。

浏览器采用新功能的速度比以往更快，您无需等待很长时间才能看到Google Chrome和其他浏览器支持的重要新功能。

最后，今天的JavaScript是一种强大而可靠的语言。

JavaScript是一种解释动态语言。与编译语言（如TypeScript，Java，Closure，C＃等）相比，您无需等待编译即可查看应用程序的运行和调试。

当您开始开发新应用时，这可以被视为一个微不足道的时间，但随着您的应用变得越来越大，越来越复杂，它将会增长和增长。如果你选择转变，你会失去这种优势，而不仅仅是这种优势。

转换的另一个问题是浏览器运行的代码不是您编写的代码。因此，调试和优化性能可能变得非常棘手。是的，你有源地图，但它不是一回事。

源映射映射代码中的位置，但它们不映射两个变量名称如何相互关联。优化可以使编译的源代码与您所编写的代码所期望的行为不匹配.¹

[Google Chrome Inspector](https://developers.google.com/web/tools/chrome-devtools/)是目前最强大，最高效的软件调试程序之一，使用源映射为其添加不必要的复杂性并且不会直接在您编写的代码上释放其功能真是一种耻辱。

在开发过程中使用的基于转换的许多项目之后，我可以向您保证，直接在Inspector中处理原始代码（没有源地图中介或其他翻译）是一种更好的体验。

今天，可以直接在Google Chrome中编写，运行和调试前端JavaScript代码，并仅在生产和交付时进行转换。

那么，你说在没有转换的情况下开发我的前端会更好但是我怎么做到这一点？我如何使用非ES-ready依赖项？如果我想进行静态打字检查怎么办？

让我们看一个使用[React](https://reactjs.org/) / [JSX](https://reactjs.org/docs/introducing-jsx.html)的例子\- The Endgame应用程序。

* * *

Google Chrome中的ES模块
===================

今天，Chrome在您的JavaScript代码中了解导入/导出没有任何问题。您可以将应用程序拆分为ES模块文件，并直接在浏览器上运行它，没有任何问题。

当您想要使用第三方库时会出现问题。

JavaScript依赖关系管理的事实标准来自[Node.js中的](https://nodejs.org/api/modules.html)包管理。

您可以使用包实用程序（如[Yarn](https://yarnpkg.com/lang/en/)，[npm](https://www.npmjs.com/)等）来要求您的库并使主题在本地文件夹中可用（通常`node_modules`）。

不幸的是，并非所有可用的软件包都支持ES。大多数软件包使用[Node.js](https://nodejs.org/)模块语法（它们使用“require”而不是“import”）。即使是ES-ready模块也可能依赖于非ES模块。

为了避免这种不便并能够直接使用所有现有的包，我们可以在等效的ES模块（我们称之为_Web模块_）中转换我们的依赖关系。

这种转换仅对依赖关系（不是我们的源代码）产生影响，并且仅在我们添加新库时才执行一次。

* * *

ES叠加
====

并非所有依赖项都可以自动转换为ES模块。在某些情况下，我们必须编写如何将lib移植到ES模块（手动命名导出）的程序。

为此，我们创建了中间件包，用于导入所需的lib（任何有效的Node.js lib）并将其导出为ES。

然后，我们使用[汇总](https://rollupjs.org/guide/en/)将ES中间件依赖项转换为Web模块，准备在Chrome中使用。

为了简化这一步，我们开发了几个实用程序脚本：覆盖和网络模块（随意根据您的需要调整它们）。

![](https://miro.medium.com/max/30/1*O3raMvIEXk5yuqDBo431ww.png?q=20)

![](https://miro.medium.com/max/953/1*O3raMvIEXk5yuqDBo431ww.png)

由于HTML中声明的导入映射，Chrome会从web\_modules文件夹中加载ES模块，其名称为“react”。创建ES覆盖模块并用于为不准备ES的包构建Web模式。

请注意，对于已经ES兼容的软件包，ES覆盖不是必需的。有关已兼容软件包的列表，请参阅[pika列表](https://www.pika.dev/)。

* * *

叠加脚本
====

第一个脚本覆盖（[脚本源代码](https://github.com/FbN/endgame/blob/master/scripts/overlay.js)）用于初始化我们的中间件ES模块。

例如，在我们的项目中，我们想要使用React，因此我们开始使用Yarn将它添加到依赖项：

$ yarn add react   
$ yarn add react-dom

此时，这两个依赖关系在其中声明`package.json`并且在本地可用，`node_modules`但我们无法在ES模块中使用它们。

像这样的代码不起作用，因为React不是ES模块，我们没有告诉浏览器在哪里搜索它。

现在，我们将为两个库进行叠加。

$ yarn run overlay  -  pkg react   
$ yarn run overlay  -  pkg react-dom

该实用程序做两件事：

*   在`@es`文件夹中创建中间件包文件。每个包都由a `package.json`和a组成`index.js`。这些文件很好（默认情况下它们从原始dep导出所有内容），但在某些情况下，您必须编辑`index.js`并手动指定命名导入/导出。
*   在叠加包添加到`package.json`下`“webmodules”`属性。

每个中间件ES模块都由一个`package.json`文件组成，该文件在文件中声明原始依赖项，该`index.js`文件导入/导出所有原始依赖项名称。

例如：

此表单适用于大多数包。对于某些包，您可能被迫手动声明要导入/导出的名称。

* * *

Web模块脚本
=======

现在我们已经声明了我们的ES模块，我们希望它们被转换为可用的模块。为此，我们运行一个Web模块脚本（[脚本源代码](https://github.com/FbN/endgame/blob/master/scripts/web-modules.js)）。

这个脚本的源代码是对pika / web项目的破解²。

与鼠兔的不同之处在于我们可以管理各种依赖，而不仅仅是那些准备就绪的依赖。

$ yarn运行web-modules

该脚本读取有关需要从中进行转换的Web模块的信息`package.json`。

然后，使用[Yarn链接功能](https://yarnpkg.com/lang/en/docs/cli/link/)（如果您愿意，可以轻松地将其更改为使用npm）使ES中间件模块（由覆盖脚本生成）可用于Node脚本，并将其链接在内部`node_modules`。

最后，脚本运行汇总以转换模块并将它们输出到`web_modules`文件夹中。

* * *

告诉Chrome在何处查找模块
===============

此时，我们已准备好以`web_modules`正确的ES模块格式在内部使用我们的依赖项。

但是，当我们使用[裸](https://github.com/WICG/import-maps#bare-specifiers)注释器导入时，Chrome将如何知道从哪里搜索？（例如从'react'导入React）？

我们将使用一种新的（仍然是实验性的）谷歌Chrome功能，称为_导入地图_ ³⁴。

要启用它，请打开Goog​​le Chrome的标记配置页（通过键入此URL :) `chrome://flags`并启用“内置模块infra和导入地图”。

![](https://miro.medium.com/max/30/1*b4E87H78OGopPvMf6Gb6Ig.png?q=20)

![](https://miro.medium.com/max/1166/1*b4E87H78OGopPvMf6Gb6Ig.png)

使用导入映射，您可以告诉浏览器在哪里查找裸导入，并在HTML中的特殊脚本标记中声明它们。

为方便起见，我们的`web-modules`脚本会自动更新所有HTML文件中的导入映射选项卡。

index.html中的导入映射声明示例

* * *

服务脚本
====

我们需要一个网络服务器，以便将所有文件提供给Chrome并运行我们的应用。

我们创建了一个`serve`脚本，该脚本使用[Browsersync](https://www.browsersync.io/)启动本地Web服务器并将项目发布到`localhost:3000`。

如果您查看`serve.js`下面的内容，我们已将`‘/web_modules’`URL 映射到我们的`web_modules`文件夹。

* * *

如何使用JSX
=======

JSX是一种语法糖，可以在JS文件中编写类似HTML的语句，而不是直接调用React `createElement`函数。需要转换使用JSX的文件。

要使用JSX但保持项目的主文件不被转换，我们将JSX用法与我们称之为`views`文件的内容隔离开来。

我们创建一个`views`文件夹并将我们的JSX文件放入其中。然后，我们添加一个脚本来转换所有JSX文件并将输出（有效的ES模块）放在一个`./tmp`文件夹中。

该`.tmp`文件夹在Browsersync中声明，因为它是辅助根文件夹，因此在主根（app文件夹）中找不到的路径将在文件夹中搜索`.tmp`。

通过这样做，我们现在可以将已转换的JSX文件导入到主要的非转换源代码中。

重要的是要理解，仅当我们在JSX中更改某些内容并且仅针对JSX文件时才会发生转换。

* * *

最终项目结构
======

![](https://miro.medium.com/max/7/1*7Mz70xqkst3FWETgtvXfkw.png?q=20)

![](https://miro.medium.com/max/281/1*7Mz70xqkst3FWETgtvXfkw.png)

*   `.tmp`：临时文件夹，未修订。包含已转换的JSX文件。由Browsersync服务器搜索为辅助根。
*   `@es`：包含我们的中间件ES模块，用于将非ES节点模块转换为适用于Web的ES。修改过的文件夹。由覆盖脚本生成，可在需要时使用自定义代码。文件夹内容`node_modules`通过Yarn链接（或npm链接）链接到文件夹内。
*   `app`：包含应用程序源文件和资产。所有文件都已修订。该文件夹是Browsersync服务器发布的主根。此处的所有源文件都不会被转换。
*   `scripts`：Node.js脚本文件，用作管理项目的实用工具。该目录已修订。
*   `views`：JSX修改过的文件。JSX在这里被转换成`.tmp`文件夹
*   `.babelrc`：[Babel](https://babeljs.io/)配置文件。包含JSX转换的配置。请注意，Babel仅用于JSX。

其余内容应该是显而易见的。

* * *

运行示例应用程序：Endgame
================

非常简单：

*   克隆它（Git clone：[https](https://github.com/FbN/endgame.git)：[//github.com/FbN/endgame.git](https://github.com/FbN/endgame.git) ./endgame）
*   输入克隆项目（cd endgame）
*   纱线安装
*   纱线跑 `web-modules`
*   纱线JSX
*   纱线服务

* * *

把它带到生产
======

本文针对您的应用程序的开发阶段。但是将其发布用于生产呢？

目前，进口地图无法用于生产; 您必须将项目转换为更受支持的JavaScript表单。但这不是一件难事。

您可以使用Babel和汇总或[webpack](https://webpack.js.org/)将源代码像往常一样转换为目标浏览器功能级别。生产运输不是问题; 在发展过程中不断转变是问题所在。

* * *

如果我想要静态类型检查怎么办？
===============

信不信由你，可以让TypeScript检查你的本机JavaScript源代码，并在你的IDE中拥有所有TypeScript优势而不放弃原始JavaScript。

我现在正在做这个，我正在计划一个快速的方法，很快就会在[JSDoc](https://devdocs.io/jsdoc/)和[Atom](https://atom.io/)集成中使用TypeScript 。

* * *

结论
==

开发和直接查看在Chrome上运行的原始代码是一件非常愉快的事情。

Chrome Inspector是一款令人难以置信的调试器，绕过源地图使其无与伦比。

优化代码并毫无顾虑地放置断点。保存修改后的代码以在浏览器中查看结果，而无需等待任何额外的构建时间，这非常棒。

通过正确的设置，您甚至可以使用TypeScript验证代码，并让IDE完成代码而无需放弃纯JavaScript。

缺点？您必须为非本机ES-ready的软件包创建和维护ES覆盖模块，但实际上只需要很少的努力。

* * *

源代码
===

最终的示例项目在GitHub上可用：

[https://github.com/FbN/endgame](https://github.com/FbN/endgame)

* * *

引文和链接
=====

\[1\] Matt Zeunert：源地图如何运作？  
[https://www.mattzeunert.com/2016/02/14/how-do-source-maps-work.html](https://www.mattzeunert.com/2016/02/14/how-do-source-maps-work.html)

\[2\] Pika Web Project  
[https://github.com/pikapkg/web](https://github.com/pikapkg/web)

\[3\] Google Chrome导入地图状态  
[https://chromestatus.com/feature/5315286962012160](https://chromestatus.com/feature/5315286962012160)

\[4\] Google Chrome导入地图设计规范  
[https://chromestatus.com/feature/5315286962012160](https://docs.google.com/document/d/1vFQzbmxg9ilpg8CT_P8roEYcpTfZ06Q5N4J9-ZQqqZo/edit)