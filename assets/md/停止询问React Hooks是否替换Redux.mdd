![停止询问React Hooks是否替换Redux](https://medium.com/swlh/stop-asking-if-react-hooks-replace-redux-448c54d79551)
#### 最重要的

停止询问React Hooks是否替换Redux
========================

[![MaxGonzález](https://miro.medium.com/fit/c/96/96/0*bQnF3NTqv1HcG0Bb.jpg)](/@thamaxlg?source=post_page-----448c54d79551----------------------)

[MaxGonzález](/@thamaxlg?source=post_page-----448c54d79551----------------------)

跟随

[8月25日](/swlh/stop-asking-if-react-hooks-replace-redux-448c54d79551?source=post_page-----448c54d79551----------------------) · 6 分钟阅读

很多同事一直在问我同一个问题的变化：

_“如果我们在项目中使用钩子，我们是否还需要Redux？”_

_“不要反应钩子使Redux过时了吗？我不能只做Redux用挂钩做的所有事情吗？“_

快速谷歌搜索将显示人们在互联网上提出这些问题。

“Do React hooks取代Redux？”的快速回答是“不是真的”。

更细致但礼貌的答案是“嗯，这真的取决于你正在使用的项目类型。”

我倾向于告诉别人的答案是“我不确定你知道你在说什么。”有几个理由为什么“React钩子取代Redux？”是一个根本上有缺陷的问题。首先：

Redux一直是可选的！
============

根据Dan Abramov（Redux的创建者之一），[您可能不需要Redux](/@dan_abramov/you-might-not-need-redux-be46360cf367)。如果您不需要使用它，则无需更换任何东西。

Redux是一个JavaScript库，如果您正在使用React（另一个JavaScript库），React-Redux是另一个JavaScript库，您需要将其导入到您的应用程序中才能使用Redux。在项目中使用库会增加您的包大小，这会增加您的应用加载所需的时间。因此，您不应该使用任何库，如jQuery，Redux，[MobX](https://mobx.js.org/intro/overview.html)（另一个状态管理库），甚至是React，除非您有_真正的理由_使用它们。

当人们询问钩子是否取代Redux时，他们似乎经常认为他们的React应用程序_需要_使用其中一个。事实并非如此。如果您正在编写一个不需要存储大量状态的应用程序，或者如果您的组件层次结构非常简单以避免过多的螺旋钻孔，那么使用整个状态管理库是没有意义的。 无论是否有钩子，你的状态都可以通过React提供。

即使你确实有一个巨大的应用程序状态，或者像古树的根一样扭曲和分叉的React组件层次结构，你仍然_不需要_使用状态管理库。支撑钻孔可能很麻烦，但是普通的React为您提供了大量的状态管理选项，并且钩子肯定可以帮助您保持状态井井有条。Redux是一个轻量级的库，但它的设置很复杂，增加了你的包大小，并带来了各种权衡。有很多理由可以选择不在项目中使用它，所有这些原因都是有效的。你并不总是需要Redux。

所有这些都说，有很多理由使用Redux。如果您的项目从一开始就使用Redux，那么它可能是一个很好的理由，它是否与组织有关（应用程序状态的可预测的单一事实来源在复杂的应用程序中可能有用），中间件或Redux强大的开发人员工具和调试功能。如果您有理由使用Redux，则React挂钩不会使该原因无效。如果你之前需要Redux，你可能仍然需要它。这是因为

React hooks和Redux并没有试图解决同样的问题！
==============================

Redux是一个州管理图书馆。Hook是最近对React进行更新的一部分，让您编写功能组件，完成您曾经需要类组件执行的所有操作。

那么为什么在不使用类的情况下编写React应用程序的能力突然使状态管理库过时了？

**_它没有。_**

根据[文档](https://reactjs.org/docs/hooks-intro.html)，React钩子的开发主要有三个原因：

*   在类组件之间重用逻辑很困难。
*   生命周期方法通常包含混乱的无关逻辑。
*   两种机器（和人类）都难以理解类。

请注意，这些动机都不直接与州管理有关。

话虽这么说，React钩子确实为您提供了一些管理应用程序状态的新选项。值得注意的是，这些方法`[useState](https://reactjs.org/docs/hooks-reference.html#usestate)`，`[useReducer](https://reactjs.org/docs/hooks-reference.html#usereducer)`并`[useContext](https://reactjs.org/docs/hooks-reference.html#usecontext)`为您提供了新的方法来维护您的状态，这些方式可以说比React在钩子之前给出的选项更好，更有条理。

但是这些钩子并不是什么新东西或神奇的东西，并且它们不会使状态管理库过时，因为事实是，

React hooks不会让你的React应用程序做任何它以前无法做的事情！
======================================

那就对了。您现在可以编写执行以前需要执行的操作的功能组件，但这些功能组件不会执行类组件无法执行的任何操作，除了可以说具有更好的组织和重用代码的能力。它们不一定会让您的应用更好。钩子是为了让_开发人员体验_更好。

`useState`而`useReducer`只是管理组件状态的方式，以及他们的工作几乎以同样的方式`this.state`，并`this.setState`在课堂上做元器件。您仍然需要使用这些方法深入挖掘道具。

`useContext`是人们似乎认为是Redux的棺材，因为它可以让你在没有螺旋钻孔的情况下在各个组件之间共享应用程序状态，但是这个并没有真正做任何新的事情。该[上下文API](https://reactjs.org/docs/context.html)已至此反应一段时间的一部分。该`useContext`钩只是让你使用的上下文，而不必使用一个`<Consumer>`包装。虽然一些开发人员选择使用上下文来管理他们的整个应用程序状态，但这并不是它的设计目标。根据文件，

> Context旨在共享可被视为React组件树的“全局”数据，例如当前经过身份验证的用户，主题或首选语言。

换句话说，预计不会经常更新的东西。

文档还建议谨慎使用上下文，因为_“它使组件重用变得更加困难”。_他们还警告开发人员，如果开发人员不小心，很容易用上下文触发不必要的重新渲染。

我已经看到项目成功使用React上下文来管理应用程序状态。这是可能的。这是另一种选择。但是，状态管理并不完全是上下文的设计目标，而Redux和其他状态管理库的设计考虑了这一特定目的。

此外，React钩子绝对不是Redux的死亡，因为，如果你看一下[React-Redux最近更新](https://react-redux.js.org/next/api/hooks)的[文档](https://react-redux.js.org/next/api/hooks)，你会看到

React-Redux也有自己的钩子！
===================

那就对了。React钩子有助于重振React-Redux库并消除它的一些痛点，与“替换”它相去甚远。

[我在另一篇文章中详细介绍了React-Redux钩子](/swlh/clean-up-redux-code-with-react-redux-hooks-71587cfcf87a)，但这里是重点。在挂钩之前，您必须定义`mapStateToProps`和`mapDispatchToProps`函数，并将您的组件包装在`connect`函数中，以创建一个更高阶的组件，该组件将您在映射函数中指定的Redux存储的调度函数和部分作为props传递到连接的组件中。

让我们看一个非常简单的计数器应用程序的示例（太简单甚至不需要Redux，真的，但这只是一个信息性的概述。）想象一下，我们已经在其他地方定义了一个Redux存储`increment`和`decrement`动作创建者（看看我上面链接的文章是完整的Redux代码。）

多烦啊 如果我们不必将组件包装在更高阶的组件中以使其访问Redux存储，那不是很好吗？嗯，这就是钩子进来的地方。钩子都是关于代码重用的，并且不需要通过更高阶的组件输入“包装器地狱”。这是相同的组件，使用React-Redux钩子转换为函数“

不漂亮吗？简而言之，`useSelector`您可以将Redux存储的各个部分保存为组件中的变量。`useDispatch`非常简单。它只是为您提供了一个可用于将更新发送到Redux存储的调度功能。最重要的是，您不再需要编写这些丑陋的映射函数并将您的组件包装在`connect`函数中。现在，一切都很好地包含在您的组件中。它更短，因此更具可读性，可以说更有条理。重点是，

在竞争中没有必要将React钩子和Redux作为技术构建。
-----------------------------

显然，这两种技术可以相互补充。React hooks不会“替换Redux”，它们只是为您提供了新的，可以说是更好的方法来组织您的React应用程序，并且如果您最终决定使用Redux来管理您的状态，则可以编写更好的连接组件。

所以，请停止询问_“React钩子取代Redux吗？”_

相反，开始问自己_“我正在制作什么样的应用程序？我有什么样的国家管理需求？Redux有意义，还是有点过分？钩子有意义，还是我应该坚持上课？如果我决定使用Redux和React钩子_（或者MobX和React钩子，或者Redux和jQuery，没有React - 这些都是有效的选择取决于你正在做什么），_我怎样才能使这些技术相互补充并一起工作和谐？”_