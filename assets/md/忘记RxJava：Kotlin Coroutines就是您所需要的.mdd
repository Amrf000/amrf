![忘记RxJava：Kotlin Coroutines就是您所需要的](https://proandroiddev.com/forget-rxjava-kotlin-coroutines-are-all-you-need-d4dbdb509708)
忘记RxJava：Kotlin Coroutines就是您所需要的。第2/2部分 - 频道。
==============================================

[![弗拉基米尔·伊万诺夫](https://miro.medium.com/fit/c/48/48/0*zt9SScqjWPOMIEps.)](/@dzigorium?source=post_page-----d4dbdb509708----------------------)

[弗拉基米尔·伊万诺夫](/@dzigorium?source=post_page-----d4dbdb509708----------------------)

跟随

[1月23日](/forget-rxjava-kotlin-coroutines-are-all-you-need-d4dbdb509708?source=post_page-----d4dbdb509708----------------------) · 3 分钟阅读

关于RxJava的系列 - Coroutines替换在[这里](/forget-rxjava-kotlin-coroutines-are-all-you-need-part-1-2-4f62ecc4f99b)开始继续。现在我们正在考虑比拥有一堆网络呼叫更复杂的情况。

RxJava是一个功能强大的事件处理库。但是我们如何才能对Kotlin Coroutines做同样的事情并没有完全覆盖在前一部分中，读者并没有错过任何机会指出它：

![](https://miro.medium.com/max/30/1*MQYqwDbJnzNPJw4jwFopIg.png?q=20)

![](https://miro.medium.com/max/1278/1*MQYqwDbJnzNPJw4jwFopIg.png)

![](https://miro.medium.com/max/30/1*KJBI9GVIZQQQb3BDqRdmxA.jpeg?q=20)

![](https://miro.medium.com/max/6016/1*KJBI9GVIZQQQb3BDqRdmxA.jpeg)

通道。来自[https://unsplash.com/photos/qMMzHPF3ajQ](https://unsplash.com/photos/qMMzHPF3ajQ)

让我们考虑一下这种情况。

想象一下，我们正在移动应用程序中实现Github存储库搜索，如下所示：

![](https://miro.medium.com/max/17/1*12u_JONwz7zdQ3Meqz7lCA.png?q=20)

![](https://miro.medium.com/max/1080/1*12u_JONwz7zdQ3Meqz7lCA.png)

RxJava代码如下：

我们肯定在这里受益于RxJava：事实上我们可以去除发送网络请求，因为我们不想在每个字母类型上执行它，并且我们可以保存它们以防用户添加和删除一封信件几行代码很棒。

由于PublishSubject的用法，与EditText的集成也很简单：

searchQuery.addTextChangedListener（object：TextWatcher {   
 override fun afterTextChanged（s：Editable？）{  publishSubject.onNext（s.toString（））   
 }   
}

我们来看看Kotlin在这里提供的服务。

在非阻塞的协程世界中，有一个叫做“ [频道](https://kotlinlang.org/docs/reference/coroutines/channels.html) ” 的实体。您可以将通道视为[BlockingQueue](https://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/BlockingQueue.html)的非阻塞变体。

而不是阻塞_放_和_采取_的渠道已经BlockingQueue的方法_发送_和_接收_的：

![](https://miro.medium.com/max/30/1*pzd7jPcqXDAlvx4wIe5KQg.png?q=20)

![](https://miro.medium.com/max/778/1*pzd7jPcqXDAlvx4wIe5KQg.png)

看来我们可以使用这个发送 - 接收对来模仿来自Rx世界的PublishSubject。

虽然RxJava代码相当简短，但我们可以通过Kotlin渠道做得更好：

为了在那里发送查询，我们需要将它们提供给频道，就像我们使用PublishSubject一样：

searchQuery.addTextChangedListener（object：TextWatcher {   
 override fun afterTextChanged（s：Editable？）{  broadcast.send（s.toString（））  
 }   
}

我们在这里看不到任何_receive_（）调用，因为我们正在使用[_consumeEach_](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/consume-each.html)  扩展函数。您现在需要知道的是，通道支持不同的容量，因此您可以选择[在挂起之前](https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/channels.md#channels-experimental)接受多少元素。

在回答完全替换RxJava的问题时，我们需要说两件事：

1.  当然渠道没有如此庞大的运营商。例如，您没有zip，switchMap等。但是a）由于你编写代码的方式你不需要它们b）如果你确实需要它，它很容易实现。在[EPAM中，](http://github.com/epam/)我们正在开发一个运营商库来弥补这一差距，该代码已经在审核中，并将很快发布到github。
2.  然而，这种方法仅支持热流，现在只[讨论](https://github.com/Kotlin/kotlinx.coroutines/issues/254)冷流。您已经使用CoroutineStart参数获得了某种冷流支持，但它并未涵盖所有情况。这导致渠道API仍处于试验阶段，未来可能会发生变化。

这里的示例非常简单，但您可以自由地尝试将应用程序中的当前Rx链替换为非阻塞范例。

不要忘记在[Twitter上](https://twitter.com/vvsevolodovich)关注我，以便继续关注！