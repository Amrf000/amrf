![带管道和GridSearch的NLP](https://towardsdatascience.com/nlp-with-pipeline-gridsearch-5922266e82f4)
带管道和GridSearch的NLP
==================

[![Eric Stokes](https://miro.medium.com/fit/c/48/48/2*7F5yMGyInwykUCCwx5BH8A.jpeg)](/@estokes4?source=post_page-----5922266e82f4----------------------)

[Eric Stokes](/@estokes4?source=post_page-----5922266e82f4----------------------)

跟随

[7月29日](/nlp-with-pipeline-gridsearch-5922266e82f4?source=post_page-----5922266e82f4----------------------) · 6 分钟阅读

![](https://miro.medium.com/max/30/1*9M27n3hXWYrhT4qxRmPMZA.jpeg?q=20)

[资源](http://Photo by Rodion Kutsaev on Unsplash)

N atural Language Processing或简称NLP，对Alexa，Siri和Google智能助理等人工智能助手风靡一时。好像就在昨天，当我第一次在钢铁侠电影中看到JARVIS时。看到这一点，更加激发了我对计算机交互的兴趣。能像人类一样听到和回应的电脑吗？它是如何工作的？它似乎很神奇，但实际上计算机将文字分解为更简单的形式，并且在某些情况下创建这些形式的列表以进行排序。计算机查找某些单词之间的模式或关系，然后根据这些关系进行预测。

我们将使用Pipeline和GridSearch运行多个模型，并确定哪个模型最适合预测任何博客主题的帖子位置。例如，如果我的帖子可以在NHL或Fantasy Hockey中找到，那么模型是否能够具有一定的效果？我将使用我自己的数据集，但在大多数情况下代码是可重现的。

![](https://miro.medium.com/max/30/1*BrK7flP7RtWa8AVy0gkKtw.jpeg?q=20)

[资源](http://Photo by Andrik Langfield on Unsplash)

我们开始建设吧！
========

首先，您需要导入库和数据集，这个步骤我不会显示导入，因为列表可能会很长。我们将在数据已经被清理之后开始，并且我们可以开始建模。

让我们声明我们的变量吧！我们将要创建和X和Y变量，并使用列车测试拆分。

＃Creating X，y Variables X，y = df \['post'\]，df \['blog\_topic'\] ＃设置列车测试拆分  
X\_train，X\_test，y\_train，y\_test = train\_test\_split（X，y）

我们在这里做的是将我们的数据集分成两个数据集：训练数据和测试数据。我们现在声明我们的X变量是博客文章，我们的Y变量是博客主题。我们希望我们的模型能够收录博客文章并预测该帖子是否应该在NHL或Fantasy Hockey主题中。

管道
==

管道将采用具有某些参数的模型，然后我们可以通过GridSearch查看哪个模型和参数可以获得最佳结果。

#Pipeline＆Gridsearch setup   
＃TFIDF管道设置  
tvc\_pipe =管道（\[   
（'tvec'，TfidfVectorizer（）），  
（'mb'，  
MultinomialNB （））\]）＃Randomforest管道设置rf\_pipe =管道（\[ （'tvec'，TfidfVectorizer （）），（'rf'，RandomForestClassifier（））\]）#fit   
tvc\_pipe.fit（X\_train，y\_train）  
rf\_pipe.fit（X\_train，y\_train）＃设置TFIDF Vectorizer gridsearch的参数  
tf\_params = {   
'tvec\_\_max\_features'：\[100， 2000\]，  
'tvec\_\_ngram\_range'：\[（1,1），（1,2），（2,2）\]，  
'tvec\_\_stop\_words'：\[无，'英语'\]，  
   
} ＃设置randomforest参数  
rf\_params = {   
'tvec\_\_max\_features “：\[2000\]，  
'tvec\_\_ngram\_range'：\[（1,2）\]，  
'tvec\_\_stop\_words'：\['english'\]，  
'rf\_\_max\_depth'：\[1000\]，  
'rf\_\_min\_samples\_split'：\[100\]，  
'rf\_\_max\_leaf\_nodes'：\[无\]   
}

现在我们有了模型，让我给你一个公平的**警告**。RandomForest将需要一些时间来运行，如果你有合适的计算能力，我建议只运行一个模型。

P arameters必须指定一个模型，并建立与键和值的字典。这里的方法是我们的​​RandomForest模型变量是'rf'，我们需要在变量和参数之间使用双下划线'\_\_'。例如，如果我们想在RandomForest中设置叶子节点的数量，我们需要在我们的参数中写出它：'rf\_\_max\_leaf\_nodes'：\[None\]'。为了避免出错，我们需要使用括号'\[\]'以列表形式传递每个字典值，即使它只是一个。您不需要调用每个参数，只需要调用您在模型中尝试使用的参数。

GridSearch
==========

为了设置GridSearch，我们将使用我们构建的参数传递Pipeline。我们将在我们的模型上运行标准交叉验证，折叠为五。

＃为Randomforest设置GridSearch   
rf\_gs = GridSearchCV（rf\_pipe，param\_grid = rf\_params，cv = 5，verbose = 1，n\_jobs = -1）＃为TFIDFVectorizer设置GridSearch   
tvc\_gs = GridSearchCV（tvc\_pipe，param\_grid = tf\_params，cv = 5，详细= 1，n\_jobs = -1）#Fitting TVC GS   
tvc\_gs.fit（X\_train，y\_train）#Fitting Randomforest CV GS   
rf\_gs.fit（X\_train，y\_train）

使用GridSearch时，我们将Pipeline作为估算器传递。然后我们必须给它一个param\_grid，这是我们在构建Pipeline时设置的参数。建议您使用三倍或五倍交叉验证。我更喜欢使用五重交叉验证，但你可以为'cv'传递三个。

我建议在运行任何模型时设置'verbose = 1'和'n\_jobs = -1'。详细将告诉我们经过的时间以及模型运行的时间。n\_jobs参数允许我们指定要在CPU上使用的核心数。这可以减少运行模型时的时间。在这里使用-1将告诉它使用CPU上的所有内核。此过程将花费最长时间，因为模型现在正在数据集上进行自我训练。然后我们将使用它来给我们一个准确度分数，告诉我们我们的模型表现得如何。

![](https://miro.medium.com/max/30/1*bP79FSAe7Cylpqy-Xx0BfA.jpeg?q=20)

[资源](http://Photo by JOSHUA COLEMAN on Unsplash)

评分
==

现在我们已经构建并适合我们的模型，我们希望在训练数据和测试数据上对其进行评分。你还记得我们之前把它分成两个数据集吗？我们在训练数据集上“训练”或“拟合”了我们的模型。我们还将使用训练数据集对其进行评分，以查看它是否可以使用特征（X变量）来确定我们的目标（y变量）。

让我们对模型进行评分：

＃在TFIDFVectorizer上评分训练数据  
tvc\_gs.score（X\_train，y\_train）#score：0.8742193813827052 ＃在TFIDFVectorizer上评分测试数据  
tvc\_gs.score（X\_test，y\_test）#score：0.8627148523578669 ＃在RandomForest评分训练数据  
rf\_gs.score（X\_train，y\_train）#score：0.9380648005289839 ＃在RandomForest上检查测试分数  
rf\_gs.score（X\_test，y\_test）#score：0.881004847950639

看起来两个模型表现都很好！实际上，TFIDF Vectorizer的表现优于RandomForest。当我们查看分数时，我们希望训练分数和测试分数尽可能接近。在这里，RandomForest在训练和测试分数之间有更大的距离，而我们的TFIDF矢量化器几乎是相同的分数。我们可以看看这两个模型，看看RandomForest是否过分，因为得分不同。我们希望选择TFIDF Vectorizer作为用于我们预测的模型。

重要性
===

所以我们知道什么样的模型表现最好。它用于做出这些预测的话语怎么样？当使用管道时，我们需要“步入”估算器，从那里我们可以看到它在进行预测时发现哪些特征（单词）是最重要的。让我们使用它来制作数据框列并按最重要的方式对其进行排序。

tvc\_title = pd.DataFrame（rf\_pipe.steps \[1\] \[1\] .feature\_importances\_，tvc\_pipe.steps \[0\] \[1\] .get\_feature\_names（），columns = \['importance'\]）tvc\_title.sort\_values（'importance'，ascending =假）。头（20）

上面的代码将为我们提供一个数据框，其中包含我们的模型用于预测的前20个最重要的单词。从这里我们可以创建一些可视化来更好地表示我们的模型。

结论
==

通过上述信息，我们可以得出结论，凭借自然语言处理的强大功能，我们可以预测一个帖子可能位于哪个博客主题，效率为88％。这怎么可能有用？从业务角度来看，我们想知道帖子是否会出现在我们定位的主题中，以便我们可以关注最有可能看到该帖子的受众群体。我们还可以显示在生成预测时最重要的功能，并查看每个功能对预测的影响程度。