原文地址：[https://www.baeldung.com/apache-cxf-rest-api](https://www.baeldung.com/apache-cxf-rest-api)
项目地址：[https://github.com/eugenp/tutorials/tree/master/apache-cxf/cxf-jaxrs-implementation](https://github.com/eugenp/tutorials/tree/master/apache-cxf/cxf-jaxrs-implementation)
1.概述
本教程将Apache CXF作为符合JAX-RS标准的框架引入，该标准定义了对REpresentational State Transfer（REST）体系结构模式的Java生态系统的支持。
具体来说，它逐步介绍了如何构建和发布RESTful Web服务，以及如何编写单元测试来验证服务。
这是Apache CXF系列中的第三篇; 第一个重点是将CXF用作JAX-WS完全兼容的实现。在第二篇文章中提供了有关如何使用CXF和春天有个指导。
2\. Maven依赖
第一个必需的依赖项是org.apache.cxf：cxf- rt -frontend- jaxrs。此工件提供JAX-RS API以及CXF实现：
```
<dependency>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-rt-frontend-jaxrs</artifactId>
    <version>3.1.7</version>
</dependency>
```
在本教程中，我们使用CXF创建服务器端点以发布Web服务，而不是使用servlet容器。因此，Maven POM文件中需要包含以下依赖项：
```
<dependency>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-rt-transports-http-jetty</artifactId>
    <version>3.1.7</version>
</dependency>
```
最后，让我们添加HttpClient库以方便单元测试：
```
<dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpclient</artifactId>
    <version>4.5.2</version>
</dependency>
```
在这里您可以找到最新版本的cxf-rt-frontend-jaxrs依赖项。您可能还想参考此链接以获取最新版本的org.apache.cxf：cxf-rt-transports-http-jetty工件。最后，可以在这里找到最新版本的httpclient。
3.资源类和请求映射
让我们开始实现一个简单的例子; 我们将使用两个资源Course和Student来设置我们的REST API 。
我们将从简单开始，随着时间的推移走向更复杂的例子。
3.1。资源
以下是Student资源类的定义：
```
@XmlRootElement(name = "Student")
public class Student {
    private int id;
    private String name;
    // standard getters and setters
    // standard equals and hashCode implementations
}
```
请注意，我们使用@XmlRootElement批注告诉JAXB应该将此类的实例封送到XML。
接下来是Course资源类的定义：
```
@XmlRootElement(name = "Course")
public class Course {
    private int id;
    private String name;
    private List<Student> students = new ArrayList<>();
    private Student findById(int id) {
        for (Student student : students) {
            if (student.getId() == id) {
                return student;
            }
        }
        return null;
    }
    // standard getters and setters
    // standard equals and hasCode implementations
}
```
最后，让我们实现CourseRepository - 它是根资源，并作为Web服务资源的入口点：
```
@Path("course")
@Produces("text/xml")
public class CourseRepository {
    private Map<Integer, Course> courses = new HashMap<>();
    // request handling methods
    private Course findById(int id) {
        for (Map.Entry<Integer, Course> course : courses.entrySet()) {
            if (course.getKey() == id) {
                return course.getValue();
            }
        }
        return null;
    }
}
```
注意使用@Path注释的映射。该CourseRepository是根资源在这里，所以它的映射来处理所有URL开始课程。
@Produces注释的值用于告诉服务器在将此类中的方法返回的对象发送到客户端之前将其转换为XML文档。我们在这里使用JAXB作为默认值，因为没有指定其他绑定机制。
3.2。简单的数据设置
因为这是一个简单的示例实现，我们使用内存数据而不是完整的持久解决方案。
考虑到这一点，让我们实现一些简单的设置逻辑，将一些数据填充到系统中：
```
{
    Student student1 = new Student();
    Student student2 = new Student();
    student1.setId(1);
    student1.setName("Student A");
    student2.setId(2);
    student2.setName("Student B");
    List<Student> course1Students = new ArrayList<>();
    course1Students.add(student1);
    course1Students.add(student2);
    Course course1 = new Course();
    Course course2 = new Course();
    course1.setId(1);
    course1.setName("REST with Spring");
    course1.setStudents(course1Students);
    course2.setId(2);
    course2.setName("Learn Spring Security");
    courses.put(1, course1);
    courses.put(2, course2);
}
```
此类中负责处理HTTP请求的方法将在下一小节中介绍。
3.3。API - 请求映射方法
现在，我们来看看实际REST API的实现。
我们将开始在资源POJO中添加API操作 - 使用@Path注释。
重要的是要理解这与典型Spring项目中的方法有显着差异 - API操作将在控制器中定义，而不是在POJO本身上定义。
让我们从Course类中定义的映射方法开始：
```
@GET
@Path("{studentId}")
public Student getStudent(@PathParam("studentId")int studentId) {
    return findById(studentId);
}
```
简单地说，在处理GET请求时调用该方法，由@GET注释表示。
注意到从HTTP请求映射studentId路径参数的简单语法。
然后我们只是使用findById帮助器方法返回相应的Student实例。
以下方法通过将收到的Student对象添加到学生列表来处理POST请求（由@POST注释指示）：
```
@POST
@Path("")
public Response createStudent(Student student) {
    for (Student element : students) {
        if (element.getId() == student.getId() {
            return Response.status(Response.Status.CONFLICT).build();
        }
    }
    students.add(student);
    return Response.ok(student).build();
}
```
如果创建操作成功，则返回200 OK响应;如果已存在具有提交的id的对象，则返回409 Conflict。
另请注意，我们可以跳过@Path注释，因为它的值是一个空字符串。
最后一个方法负责DELETE请求。它从学生列表中删除一个元素，该元素的id是接收的路径参数，并返回一个OK（200）状态的响应。如果没有与指定id关联的元素，这意味着没有要删除的内容，则此方法返回Not Found（404）状态的响应：
```
@DELETE
@Path("{studentId}")
public Response deleteStudent(@PathParam("studentId") int studentId) {
    Student student = findById(studentId);
    if (student == null) {
        return Response.status(Response.Status.NOT_FOUND).build();
    }
    students.remove(student);
    return Response.ok().build();
}
```
让我们继续请求CourseRepository类的映射方法。
以下getCourse方法返回一个Course对象，该对象是课程图中条目的值，其键是GET请求的接收courseId路径参数。在内部，该方法将路径参数调度到findById辅助方法以完成其工作。
```
@GET
@Path("courses/{courseId}")
public Course getCourse(@PathParam("courseId") int courseId) {
    return findById(courseId);
}
```
以下方法更新课程地图的现有条目，其中收到的PUT请求的主体是条目值，courseId参数是关联的密钥：
```
@PUT
@Path("courses/{courseId}")
public Response updateCourse(@PathParam("courseId") int courseId, Course course) {
    Course existingCourse = findById(courseId);        
    if (existingCourse == null) {
        return Response.status(Response.Status.NOT\_FOUND).build();
    }
    if (existingCourse.equals(course)) {
        return Response.notModified().build();    
    }
    courses.put(courseId, course);
    return Response.ok().build();
}
```
如果更新成功，则此updateCourse方法返回具有OK（200）状态的响应，如果现有和上载的对象具有相同的字段值，则不会更改任何内容并返回Not Modified（304）响应。如果在课程地图中找不到具有给定id的课程实例，则该方法返回具有未找到（404）状态的响应。
此根资源类的第三种方法不直接处理任何HTTP请求。相反，它将请求委托给Course类，其中请求由匹配方法处理：
```
@Path("courses/{courseId}/students")
public Course pathToStudent(@PathParam("courseId") int courseId) {
    return findById(courseId);
}
```
我们在Course类中展示了处理委托请求的方法。
4. 服务器端点
本节重点介绍如何构建CXF服务器，该服务器用于发布其资源如上一节所述的RESTful Web服务。第一步是实例化JAXRSServerFactoryBean对象并设置根资源类：
```
JAXRSServerFactoryBean factoryBean = new JAXRSServerFactoryBean();
factoryBean.setResourceClasses(CourseRepository.class);
```
然后，需要在工厂bean上设置资源提供程序以管理根资源类的生命周期。我们使用默认的单一资源提供程序，为每个请求返回相同的资源实例：
```
factoryBean.setResourceProvider(
  new SingletonResourceProvider(new CourseRepository()));
```
我们还设置了一个地址，以指示发布Web服务的URL：
```
factoryBean.setAddress("http://localhost:8080/");
```
现在，factoryBean可用于创建将开始侦听传入连接的新服务器：
```
Server server = factoryBean.create();
```
本节上面的所有代码都应该包含在main方法中：
```
public class RestfulServer {
    public static void main(String args\[]) throws Exception {
        // code snippets shown above
    }
}
```
这种主要方法的调用见第6节。
5.测试用例
本节介绍用于验证之前创建的Web服务的测试用例。这些测试在响应四种最常用方法（即GET，POST，PUT和DELETE）的 HTTP请求后验证服务的资源状态。
5.1 制备
首先，在测试类中声明两个静态字段，名为RestfulTest：
```
private static String BASE\_URL = "http://localhost:8080/baeldung/courses/";
private static CloseableHttpClient client;
```
在运行测试之前，我们创建一个客户端对象，用于与服务器通信并在以后销毁它：
```
@BeforeClass
public static void createClient() {
    client = HttpClients.createDefault();
}
@AfterClass
public static void closeClient() throws IOException {
    client.close();
}
```
现在，客户端实例已准备好供测试用例使用。
5.2。获取请求
在测试类中，我们定义了两种方法来将GET请求发送到运行Web服务的服务器。
第一种方法是在资源中获取一个给定其id的Course实例：
```
private Course getCourse(int courseOrder) throws IOException {
    URL url = new URL(BASE\_URL + courseOrder);
    InputStream input = url.openStream();
    Course course
      = JAXB.unmarshal(new InputStreamReader(input), Course.class);
    return course;
}
```
第二个是获得一个Student实例，给出课程的id和资源中的学生：
```
private Student getStudent(int courseOrder, int studentOrder)
  throws IOException {
    URL url = new URL(BASE\_URL + courseOrder + "/students/" + studentOrder);
    InputStream input = url.openStream();
    Student student
      = JAXB.unmarshal(new InputStreamReader(input), Student.class);
    return student;
}
```
这些方法将HTTP GET请求发送到服务资源，然后将XML响应解组到相应类的实例。两者都用于在执行POST，PUT和DELETE请求后验证服务资源状态。
5.3。POST请求
本小节介绍了POST请求的两个测试用例，说明了当上载的Student实例导致冲突时以及成功创建冲突时Web服务的操作。
在第一个测试中，我们使用从conflict\_student.xml文件中解组的Student对象，该文件位于类路径中，其中包含以下内容：
```
<Student>
    <id>2</id>
    <name>Student B</name>
</Student>
```
这是将内容转换为POST请求正文的方式：
```
HttpPost httpPost = new HttpPost(BASE\_URL + "1/students");
InputStream resourceStream = this.getClass().getClassLoader()
  .getResourceAsStream("conflict\_student.xml");
httpPost.setEntity(new InputStreamEntity(resourceStream));
```
在内容类型标头设置告诉请求的内容类型是XML服务器：
```
httpPost.setHeader("Content-Type", "text/xml");
```
由于上传的Student对象已存在于第一个Course实例中，因此我们预计创建失败并返回具有Conflict（409）状态的响应。以下代码段验证了期望：
```
HttpResponse response = client.execute(httpPost);
assertEquals(409, response.getStatusLine().getStatusCode());
```
在下一个测试中，我们从类路径上的名为created\_student.xml的文件中提取HTTP请求的主体。这是文件的内容：
```
<Student>
    <id>3</id>
    <name>Student C</name>
</Student>
```
与之前的测试用例类似，我们构建并执行请求，然后验证是否已成功创建新实例：
```
HttpPost httpPost = new HttpPost(BASE\_URL + "2/students");
InputStream resourceStream = this.getClass().getClassLoader()
  .getResourceAsStream("created\_student.xml");
httpPost.setEntity(new InputStreamEntity(resourceStream));
httpPost.setHeader("Content-Type", "text/xml");
HttpResponse response = client.execute(httpPost);
assertEquals(200, response.getStatusLine().getStatusCode());
```
我们可以确认Web服务资源的新状态：
```
Student student = getStudent(2, 3);
assertEquals(3, student.getId());
assertEquals("Student C", student.getName());
```
这是对新Student对象的请求的XML响应如下所示：
```
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Student>
    <id>3</id>
    <name>Student C</name>
</Student>
```
5.4。PUT请求
让我们从无效的更新请求开始，其中更新的Course对象不存在。以下是用于替换Web服务资源中不存在的Course对象的实例的内容：
```
<Course>
    <id>3</id>
    <name>Apache CXF Support for RESTful</name>
</Course>
```
该内容存储在类路径上名为non\_existent\_course.xml的文件中。它被提取，然后用于通过以下代码填充PUT请求的主体：
```
HttpPut httpPut = new HttpPut(BASE\_URL + "3");
InputStream resourceStream = this.getClass().getClassLoader()
  .getResourceAsStream("non\_existent\_course.xml");
httpPut.setEntity(new InputStreamEntity(resourceStream));
```
在内容类型标头设置告诉请求的内容类型是XML服务器：
```
httpPut.setHeader("Content-Type", "text/xml");
```
由于我们故意发送无效请求以更新不存在的对象，因此预期将收到未找到（404）响应。响应已经过验证：
```
HttpResponse response = client.execute(httpPut);
assertEquals(404, response.getStatusLine().getStatusCode());
```
在PUT请求的第二个测试用例中，我们提交了一个具有相同字段值的Course对象。由于在这种情况下没有任何改变，我们期望返回具有未修改（304）状态的响应。整个过程如下：
```
HttpPut httpPut = new HttpPut(BASE\_URL + "1");
InputStream resourceStream = this.getClass().getClassLoader()
  .getResourceAsStream("unchanged\_course.xml");
httpPut.setEntity(new InputStreamEntity(resourceStream));
httpPut.setHeader("Content-Type", "text/xml");
HttpResponse response = client.execute(httpPut);
assertEquals(304, response.getStatusLine().getStatusCode());
```
其中unchanged\_course.xml是类路径上的文件，用于保存用于更新的信息。这是它的内容：
```
<Course>
    <id>1</id>
    <name>REST with Spring</name>
</Course>
```
在PUT请求的最后一次演示中，我们执行了有效的更新。以下是changed\_course.xml文件的内容，其内容用于更新Web服务资源中的Course实例：
```
<Course>
    <id>2</id>
    <name>Apache CXF Support for RESTful</name>
</Course>
```
这是构建和执行请求的方式：
```
HttpPut httpPut = new HttpPut(BASE\_URL + "2");
InputStream resourceStream = this.getClass().getClassLoader()
  .getResourceAsStream("changed\_course.xml");
httpPut.setEntity(new InputStreamEntity(resourceStream));
httpPut.setHeader("Content-Type", "text/xml");
```
让我们验证对服务器的PUT请求并验证上传成功：
```
HttpResponse response = client.execute(httpPut);
assertEquals(200, response.getStatusLine().getStatusCode());
```
让我们验证Web服务资源的新状态：
```
Course course = getCourse(2);
assertEquals(2, course.getId());
assertEquals("Apache CXF Support for RESTful", course.getName());
```
以下代码段显示了发送先前上载的Course对象的GET请求时XML响应的内容：
```
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Course>
    <id>2</id>
    <name>Apache CXF Support for RESTful</name>
</Course>
```
5.5。删除请求
首先，让我们尝试删除一个不存在的Student实例。该操作应该失败并且期望具有未找到（404）状态的相应响应：
```
HttpDelete httpDelete = new HttpDelete(BASE\_URL + "1/students/3");
HttpResponse response = client.execute(httpDelete);
assertEquals(404, response.getStatusLine().getStatusCode());
```
在DELETE请求的第二个测试用例中，我们创建，执行和验证请求：
```
HttpDelete httpDelete = new HttpDelete(BASE\_URL + "1/students/1");
HttpResponse response = client.execute(httpDelete);
assertEquals(200, response.getStatusLine().getStatusCode())
``` 
我们使用以下代码片段验证Web服务资源的新状态：
```
Course course = getCourse(1);
assertEquals(1, course.getStudents().size());
assertEquals(2, course.getStudents().get(0).getId());
assertEquals("Student B", course.getStudents().get(0).getName());
```
接下来，我们列出在Web服务资源中请求第一个Course对象后收到的XML响应：
```
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Course>
    <id>1</id>
    <name>REST with Spring</name>
    <students>
        <id>2</id>
        <name>Student B</name>
    </students>
</Course>
```
很明显，第一个学生已被成功删除。
6.测试执行
第4节描述了如何在RestfulServer类的main方法中创建和销毁Server实例。
使服务器启动并运行的最后一步是调用该main方法。为了实现这一点，在Maven POM文件中包含并配置了Exec Maven插件：
```
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>exec-maven-plugin</artifactId>
    <version>1.5.0<version>
    <configuration>
        <mainClass>
          com.baeldung.cxf.jaxrs.implementation.RestfulServer
        </mainClass>
    </configuration>
</plugin>
```
可以通过此链接找到此插件的最新版本。
在编译和打包本教程中说明的工件的过程中，Maven Surefire插件会自动执行包含在名称以Test开头或结尾的类中的所有测试。如果是这种情况，则应将插件配置为排除这些测试：
```
<plugin>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>2.19.1</version>
    <configuration>
    <excludes>
        <exclude>\*\*/ServiceTest</exclude>
    </excludes>
    </configuration>
</plugin>
```
使用上述配置，ServiceTest将被排除，因为它是测试类的名称。您可以为该类选择任何名称，前提是其中包含的测试在服务器准备好连接之前不由Maven Surefire插件运行。
有关Maven Surefire插件的最新版本，请在此处查看。
现在，您可以执行exec：java目标来启动RESTful Web服务服务器，然后使用IDE运行上述测试。等效地，您可以通过在终端中执行命令mvn -Dtest = ServiceTest test来开始测试。
7.结论
本教程说明了如何将Apache CXF用作JAX-RS实现。它演示了如何使用框架为RESTful Web服务定义资源并创建用于发布服务的服务器。
所有这些示例和代码片段的实现都可以在GitHub项目中找到。
相关资料：
=====
[https://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html](https://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html)
[https://docs.oracle.com/javaee/6/tutorial/doc/giepu.html](https://docs.oracle.com/javaee/6/tutorial/doc/giepu.html)
### 使用JAX-WS构建Web服务
用于XML Web服务的Java API（JAX-WS）是一种用于构建使用XML进行通信的Web服务和客户端的技术。JAX-WS允许开发人员编写面向消息以及面向远程过程调用（面向RPC）的Web服务。
在JAX-WS中，Web服务操作调用由基于XML的协议（如SOAP）表示。SOAP规范定义了用于表示Web服务调用和响应的信封结构，编码规则和约定。这些调用和响应通过HTTP作为SOAP消息（XML文件）传输。
虽然SOAP消息很复杂，但JAX-WS API隐藏了应用程序开发人员的这种复杂性。在服务器端，开发人员通过在用Java编程语言编写的接口中定义方法来指定Web服务操作。开发人员还编写一个或多个实现这些方法的类。客户端程序也很容易编码。客户端创建代理（表示服务的本地对象），然后只调用代理上的方法。使用JAX-WS，开发人员不会生成或解析SOAP消息。它是JAX-WS运行时系统，用于转换API调用和SOAP消息的响应。
使用JAX-WS，客户端和Web服务具有很大的优势：Java编程语言的平台\*独立性。此外，JAX-WS不是限制性的：JAX-WS客户端可以访问未在Java平台上运行的Web服务，反之亦然。这种灵活性是可能的，因为JAX-WS使用W3C定义的技术：HTTP，SOAP和WSDL。WSDL指定XML格式，用于将服务描述为对消息进行操作的一组端点。
什么是RESTful Web服务？
-----------------
**RESTful Web服务**旨在最好地在Web上运行。Representational State Transfer（REST）是一种体系结构样式，它指定约束，例如统一接口，如果应用于Web服务，则会引入所需的属性，例如性能，可伸缩性和可修改性，从而使服务在Web上运行得最好。在REST架构风格中，数据和功能被视为资源，并使用**统一资源标识符（URI）**进行访问，通常是网络上的链接。通过使用一组简单，定义明确的操作来处理资源。REST架构风格将架构限制为客户端/服务器架构，旨在使用无状态通信协议，通常是HTTP。在REST架构风格中，客户端和服务器通过使用标准化接口和协议来交换资源的表示。
以下原则鼓励RESTful应用程序简单，轻量且快速：
*   **通过URI进行资源识别**：RESTful Web服务公开一组资源，用于标识与其客户端交互的目标。资源由URI标识，URI为资源和服务发现提供全局寻址空间。见[该@Path注释和URI路径模板](https://docs.oracle.com/javaee/6/tutorial/doc/gilik.html#ginpw)的详细信息。
*   **统一接口**：使用固定的四个创建，读取，更新，删除操作来操作资源：PUT，GET，POST和DELETE。PUT创建一个新资源，然后可以使用DELETE删除它。GET以某种表示形式检索资源的当前状态。POST将新状态转移到资源上。有关更多信息[，请](https://docs.oracle.com/javaee/6/tutorial/doc/gilik.html#gipys)参阅[响应HTTP方法和请求](https://docs.oracle.com/javaee/6/tutorial/doc/gilik.html#gipys)。
*   **自描述消息**：资源与其表示分离，以便可以以各种格式访问其内容，例如HTML，XML，纯文本，PDF，JPEG，JSON等。关于资源的元数据是可用的并且例如用于控制高速缓存，检测传输错误，协商适当的表示格式以及执行认证或访问控制。有关详细信息，请参阅[响应HTTP方法和请求](https://docs.oracle.com/javaee/6/tutorial/doc/gilik.html#gipys)以及[使用实体提供程序映射HTTP响应和请求实体机构](https://docs.oracle.com/javaee/6/tutorial/doc/gilik.html#gipze)。
*   **通过超链接进行有状态的互动**：每次与资源的互动都是无国籍的;也就是说，请求消息是自包含的。有状态的交互基于显式状态转移的概念。存在几种交换状态的技术，例如URI重写，cookie和隐藏表单字段。状态可以嵌入在响应消息中以指向交互的有效的未来状态。有关详细信息，请参阅JAX-RS概述文档中的[使用实体提供程序映射HTTP响应和请求实体主体](https://docs.oracle.com/javaee/6/tutorial/doc/gilik.html#gipze)以及“构建URI”
[Difference between JAX-WS, Axis2 and CXF](https://stackoverflow.com/questions/11566609/difference-between-jax-ws-axis2-and-cxf)
================================================================================================================================
[](https://stackoverflow.com/questions/11566609/difference-between-jax-ws-axis2-and-cxf)[https://blog.csdn.net/nndtdx/article/details/6755251](https://blog.csdn.net/nndtdx/article/details/6755251)
[https://javaee.github.io/metro-jax-ws/](https://javaee.github.io/metro-jax-ws/)
[https://www.ibm.com/support/knowledgecenter/en/SSAW57\_8.5.5/com.ibm.websphere.nd.multiplatform.doc/ae/cwbs\_jaxws.html](https://www.ibm.com/support/knowledgecenter/en/SSAW57_8.5.5/com.ibm.websphere.nd.multiplatform.doc/ae/cwbs_jaxws.html)
[REST和SOAP Web Service的比较（写得非常清晰易懂，转载于此）](https://www.cnblogs.com/zhangz721/archive/2009/10/02/1577316.html)
[SOA接口的两种常用实现比较：SOAP vs REST](https://blog.csdn.net/zhaohuabing/article/details/39643127)
[REST Vs SOAP，Soap 和 Rest 的区别](https://blog.csdn.net/defonds/article/details/49000993)
wadl生成
[http://cxf.apache.org/docs/jaxrs-services-description.html](http://cxf.apache.org/docs/jaxrs-services-description.html)
[https://stackoverflow.com/questions/10807668/generate-wadl-from-existing-cxf-rest-service](https://stackoverflow.com/questions/10807668/generate-wadl-from-existing-cxf-rest-service)
链接:[Apache CXF Support for RESTful Web Services](https://bbs.huaweicloud.com/blogs/ee61d37de75f11e8bd5a7ca23e93a891)