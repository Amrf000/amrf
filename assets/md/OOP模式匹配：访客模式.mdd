![OOP模式匹配：访客模式](https://medium.com/better-programming/oop-pattern-matching-visitor-pattern-2a26cc559e09)
OOP模式匹配：访客模式
============

使用访问者模式作为路由点（使用Kotlin示例）
------------------------

[![卢卡皮奇内利](https://miro.medium.com/fit/c/48/48/0*S1RsTT_uqgbpEKCV.jpg)](/@luca_picci?source=post_page-----2a26cc559e09----------------------)

[卢卡皮奇内利](/@luca_picci?source=post_page-----2a26cc559e09----------------------)

跟随

[8月14日](/better-programming/oop-pattern-matching-visitor-pattern-2a26cc559e09?source=post_page-----2a26cc559e09----------------------) · 4 分钟阅读

![](https://miro.medium.com/max/30/0*uTA8RSLA87y2DIyL?q=20)

摄影：[Aaron Burden](https://unsplash.com/@aaronburden?utm_source=medium&utm_medium=referral)在[Unsplash上](https://unsplash.com?utm_source=medium&utm_medium=referral)

功能编程在IT领域获得了巨大的发展势头; 很多东西来来去去，但FP不是其中之一。它比OOP更具表现力。

几年前，在博洛尼亚的[LambdaConf](http://lambdaconf.us/)期间，我开始深入研究它，我得到的洞察力越多，我就越喜欢FP。

6月份，我参加了一个应用函数式编程研讨会，老师深入研究了代数数据类型和模式匹配。我终于明白了monad是什么，但这是另一个故事。

我曾经认为模式匹配是一种有趣的方法来解构列表。现在，我知道它是FP软件设计的基础，也是解决域对象数据和行为解耦需求的有效方法。

我们来看一个例子吧！

* * *

按国家划分的ERP
=========

假设我们想要编写ERP软件，以便在两个不同国家的市场中竞争：意大利和德国。我们将在许多域对象中编写许多CRUD操作。这里没什么挑战。

但是，在不同的数据结构中，在同一功能流中建模特定于国家/地区的业务规则呢？

例如，两个国家的数据库中都有文章，您肯定希望对这些文章进行搜索。但是，搜索规则和获取的数据可能完全不同。

由于数据结构不同，我们不能只拥有域实体`Article`\- 我们至少需要一个`ItalianArticle`和一个`GermanArticle`。

考虑到数据存储也可能因结构而异。

* * *

FP方式
====

我们来看看[Scala的](https://www.scala-lang.org/)  实现。

写一个总和类型`Article`**_。_**

然后，我们将其专门化为产品类型`ItalianArticle`  和`GermanArticle`。

此外，我们可以预期，当我们搜索某些内容时，有时我们什么都找不到。所以，我们也会考虑`ArticleNotFound`。

每当我们`Article`从某个地方收到回来时，我们就会对它进行模式匹配。在比赛中，我们可以访问其专业数据。

* * *

不是开关吗？
======

乍一看，它可能看起来像一个经典的程序“转换”，然后是一个向下铸造。

有一个重要的区别：编译器知道我们是否匹配每种类型`Article`。例如，如果我们忘记匹配`ArticleNotFound`：

然后，默认情况下，`sbt compiler`  它会发出警告。

![sbt编译输出](https://miro.medium.com/max/30/1*vrCeLMY0TKwoGk-BhiJang.png?q=20)

**图1：** sbt编译输出

由于编译器知道出现了问题，我们可以提出错误而不是警告。

* * *

新要求：西班牙
=======

在这一点上，发生了一些意外的事情！该业务带来了新的要求：我们还需要在西班牙分销。

实际上，我们已经准备好了，所以让我们添加`EspArticle`到我们的`Article`  总和类型。

现在，我们需要添加西班牙语业务逻辑。

通过正常切换，搜索我们实施特定国家/地区业务规则的每个地方都会很痛苦。

相反，通过模式匹配，编译器会告诉我们必须进行干预的位置。

* * *

OOP可能吗？
=======

是的，当然是访客模式！

如果您不了解访客模式，请查看此[Wikipedia页面](https://en.wikipedia.org/wiki/Visitor_pattern)。如果您不了解“ [四人帮”](https://en.wikipedia.org/wiki/Design_Patterns)（编写“ _设计模式：可重复使用的面向对象软件的元素_ ”一书），  请阅读它。

访客模式长期以来一直被认为是一种  反模式。添加新项类型时，您将向访问者界面添加新方法。

在这种情况下，编译器会破坏每个具体的访问者，直到您在每个访问者中实现新方法。这是反模式的原因之一。

实际上，对于我们的担忧，这个“问题”看起来就像我们正在寻找的那样！

* * *

Kotlin例子
========

这是我们的和类型的[Kotlin](https://kotlinlang.org/)实现：

您会注意到，我更愿意考虑“应用于数据使用者的数据”，而不是使用名称“接受”和“访问者”。（我正在寻找更好的名字，所以如果你有建议，请告诉我。）

而且，在这里，我们可以实施特定国家/地区的业务规则。

此示例的语义与FP模式匹配完全相同。

当我们添加新的国家时，编译器将打破一切，直到我们不在`fun use(article: SpaArticle)`每个国家实现新的`ArticleConsumer`。

* * *

结论
==

访问者模式的最初目的是迭代异构对象集合上的操作，这些对象不共享相同的接口和数据类型。

在本文中，我建议使用它作为路由点。最终枚举域实体并需要设置本地化域上下文时，它非常有用。

在方法中枚举域实体被认为是一个问题。在这个用例中，它是模式的关键特征。

我还证明了这种用法在语义上等于FP模式匹配。

谢谢你的阅读！