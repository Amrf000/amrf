![jQuery提示：不要使用DOM来存储数据](https://medium.com/@hayavuk/jquery-tip-dont-use-the-dom-to-store-data-a7257ec1a73)
jQuery提示：不要使用DOM来存储数据
=====================

这个技巧将提升你的jQuery游戏并为大框架做好准备
--------------------------

[![Hajime Yamasaki Vukelic](https://miro.medium.com/fit/c/48/48/0*TRCOMzxd-KRt4ZQU.)](/@hayavuk?source=post_page-----a7257ec1a73----------------------)

[Hajime Yamasaki Vukelic](/@hayavuk?source=post_page-----a7257ec1a73----------------------)

跟随

[2017年10月18日](/@hayavuk/jquery-tip-dont-use-the-dom-to-store-data-a7257ec1a73?source=post_page-----a7257ec1a73----------------------) · 3 分钟阅读

如果你还没有使用反应，棱角分明，Vue.js，或[浮萍](https://github.com/foxbunny/duckweed)，并坚持[jQuery的](http://jquery.com/)，它的确定。它仍然有很多有效的用途。但是，如果使用正确，jQuery可用于构建甚至更复杂的应用程序。

jQuery是一个优雅而强大的DOM API抽象。虽然多年来DOM API已经变得非常标准化和能力，但它仍然是丑陋和冗长的。我当然可以理解那些宁愿使用其他东西的人。虽然jQuery很强大，但仍然有一些你不应该做的事情。其中之一是将您的应用程序数据存储在DOM中。

本文将解释这意味着什么，如何避免它，以及如果您以后决定切换，这里描述的方法如何为更大的框架做好准备。

将数据存储在DOM中？那是什么？
================

这就是“将数据存储在DOM中”的含义。

假设您有一个带有提交按钮的表单。

<form id =“myform”>   
 <input name =“first”>   
 <input name =“last”>   
 <button>保存</ button>   
</ form>

您通常做的是让用户输入他们想要的任何内容，当他们点击提交按钮时，您将从表单中读取值，并使用AJAX提交。

$（'＃myform'）。on（'submit'，function（e）{   
 e.preventDefault（）;   
 var data = $（this）.serialize（）;   
 $ .post（'/ foo'，data）  
 .done （onSuccess）  
 .fail（onError）;   
}）;

您基本上使用表单元素作为存储，您可以从中检索数据。在这个简单的例子中可能没问题，但想象一个复杂的DOM结构，比如有很多输入或更糟的表。

一个更好的方法
=======

这是处理这个问题的更好方法。从我们之前的相同标记开始，但现在使用不同的代码。

我们首先定义一个存储数据的对象。我们的对象很简单，只有`first`和`last`键。（顺便说一句，键的默认值必须与表单中的默认值匹配。）

var model = {   
 first：“”，  
 last：“”，  
};

接下来，我们定义一种更新模型的方法。

function update（key，val）{   
 model \[key\] = val;   
}

同样，我们的功能非常简单。它所需要的只是关键和新的价值。这个函数不是我们的事件处理程序。它是一个通用函数，可以在不同的上下文中调用。

实际的事件处理程序可能如下所示：

function onInput（e）{   
 var input = $（e.target）;   
 var key = input.attr（'name'）;   
 var val = input.val（）。trim（）;   
 更新（key，val）;   
}

事件处理程序从表单输入中提取必要的信息，并更新模型。它使模型与用户输入保持同步。

由于我们将数据保存在`model`对象中，因此我们不再需要序列化表单。这就是为什么我们的提交处理程序可以更简单一些：

function onSubmit（e）{   
 e.preventDefault（）;   
 $ .post（'/ foo'，model）  
 .done（onSuccess）  
 .fail（onError）;   
}

我们现在需要做的就是把一切都搞定。

var form = $（'＃myform'）;   
form.on（'input'，onInput）;   
form.on（'submit'onSubmit）;

不同的心境
=====

当然，这比第一个例子要多得多，但它有其优点。它引入了一种称为[关注分离的](https://en.wikipedia.org/wiki/Separation_of_concerns)东西。

我们将处理表单数据的整个问题划分为单独的域，一个处理纯数据，另一个处理将数据与DOM状态同步的机制。

我们还始终使DOM与数据保持同步，这使我们可以轻松获取最新信息。

这就是现代框架（大多数情况下）如何做到这一点，采用这种思维方式将为你的大跳跃做好准备。

如果这篇文章引起了你的好奇，我已经准备了一个[小提琴](https://jsfiddle.net/foxbunny/9g0kymbj/)，它可以为你提供完整的包，从数据中渲染初始视图，并根据数据更新视图。