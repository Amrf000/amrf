![使用GO，GORM，JWT，Postgres，Mysql和测试的Crud Restful API](https://medium.com/@victorsteven/crud-restful-api-with-go-gorm-jwt-postgres-mysql-and-testing-460a85ab7121)
使用GO，GORM，JWT，Postgres，Mysql和测试的Crud Restful API
================================================

[![维克多史蒂文](https://miro.medium.com/fit/c/48/48/2*aGZQshONxHHiXh7onDB-_w.jpeg)](/@victorsteven?source=post_page-----460a85ab7121----------------------)

[维克多史蒂文](/@victorsteven?source=post_page-----460a85ab7121----------------------)

跟随

[8月28日](/@victorsteven/crud-restful-api-with-go-gorm-jwt-postgres-mysql-and-testing-460a85ab7121?source=post_page-----460a85ab7121----------------------) · 12 分钟阅读

![](https://miro.medium.com/max/30/1*1dzH5UxzoQS7LDpMUOOm6A.png?q=20)

Golang是一种通用编程语言，专为当今计算机（[upwork](https://www.upwork.com/hiring/development/golang-programming-language/)）的多核现实而[构建](https://www.upwork.com/hiring/development/golang-programming-language/)。

在这篇文章中：
-------

我们将构建一个**博客**应用程序，用户可以在其中：

*   注册（注册）
*   编辑他的帐户。
*   关机（删除他的帐户）
*   创建一篇博文。
*   编辑由他创建的博客文章
*   查看所有博文
*   查看特定的博客文章
*   查看其他用户发布的其他博文
*   删除他创建的博客文章

此API将使用以下内容构建：

*   走
*   GORM（A Golang ORM）
*   智威汤逊
*   Postgres的
*   Mysql的
*   Gorilla Mux（用于HTTP路由和URL匹配器）

您可能想知道看到Postgres和Mysql。API将以您可以决定使用**Mysql或Postgres驱动程序**的方式构建，只需更改配置即可`.env`。

**所有方法和端点都将进行全面测试。表测试还将用于测试特定功能的每种可能情况。**

在以后的文章中：
--------

这篇文章只是第一部分。将来的文章将解释如何：

*   Dockerize API
*   部署在Kubernetes上
*   整合Travis，Coveralls，Code Climate等
*   在AWS，Digital Ocean和/或Heroku上托管API。
*   使用React / Vue使用API​​端点

我们_开始......_
============

第1步：基本设置
========

创建项目所在的目录。可以在计算机的任何位置创建。相信我！

我们称之为**fullstack**

mkdir fullstack

接下来，启动**go模块**，使依赖版本信息显式且易于管理

go mod init github.com/username/projectdir

其中username是您的**github**用户名，**projectdir**是上面创建的目录。对于我的情况，我会：

go mod init github.com/victorsteven/fullstack

我们将在此应用程序中使用第三方软件包。如果以前从未安装过它们，则可以运行以下命令：

go get github.com/badoux/checkmail  
go get github.com/jinzhu/gorm  
go get golang.org/x/crypto/bcrypt  
go get github.com/dgrijalva/jwt-go  
go get github.com/gorilla/mux  
go get github.com/jinzhu/gorm/dialects/mysql" //If using mysql   
go get github.com/jinzhu/gorm/dialects/postgres //If using postgres  
go get github.com/joho/godotenv  
go get gopkg.in/go-playground/assert.v1

Next, create an `api` and `tests` directory inside the **fullstack** directory

mkdir api && mkdir tests

Create the `.env` file to house our environmental variables

touch .env

At this point this is the structure we have

fullstack  
├── api  
├── tests  
├── .env  
└── go.mod

Step 2: Env Details
===================

Let’s settle the database connection details now.

Open the `fullstack` folder in your favorite editor (VSCode, Goland, etc). Then open the `.env` file

Observe that we have the `postgres` and `mysql` details in the `.env` file.

The default connection is postgres. If you want to use mysql, simply comment the postgres and uncomment the mysql details in the `.env`.

Note, you can only use **one connection at a time**. But you can make things fancy by using Postgres for live and mysql for testing. Well, you decide what to do.

Step 3: Create Models
=====================

Inside the `api` create the **models** directory

mkdir models

由于我们正在建立一个**博客**，我们现在将有两个模型文件，“ **用户** ”和“ **发布** ”

最好是发布整个文件而不是部分文件，以避免任何混淆。

用户模型：

在路径中`api/models`创建用户模型：

触摸User.go

邮政模式：

在路径中`api/models`创建帖子模型

触摸Post.go

第4步：创建自定义响应
===========

现在，在我们创建将与上面定义的模型交互的控制器之前，我们将创建一个自定义响应包。这将用于http响应。

在`api`目录中，创建**响应**目录

mkdir的回应

然后在路径中创建**json.go**文件：`api/responses`

触摸json.go

json.go

第5步：创建JSON Web令牌（JWT）
=====================

请记住，用户需要先进行身份验证：更新或关闭其帐户，创建，更新和删除帖子。

所以，让我们编写一个包，帮助我们生成JWT令牌，使用户可以执行上述操作。

在`api`目录中，创建auth包（目录）。

mkdir auth

在路径中创建**token.go**文件：`api/auth`

touch token.go

这是内容：

token.go

从token.go文件中观察，我们将导入：“github.com/dgrijalva/jwt-go”分配给**jwt**

第6步：创建中间件
=========

我们将创建两个主要的中间件：

*   **SetMiddlewareJSON**：这将格式化对**json的**所有响应
*   **SetMiddlewareAuthentication：**这将检查提供的身份验证令牌的有效性。

Inside the `api` directory, create the **middlewares** package(directory)

mkdir middlewares

Then create a **middlewares.go** file in the path `api/middlewares`

touch middlewares.go

middlewares.go

Step 7: Create Custom Error Handling
====================================

To format some error messages in a more readable manner, we need to a create a package to help us achieve that.

Remember we created a `utils` directory earlier. We will create that package inside this directory.

In the path `api/utils` create the package **formaterror**

mkdir formaterror

Then create a **formaterror.go** file in the path: `api/utils/formaterror`

`formaterror.go`

When we “wire” the controllers and routes package, the above will make sense to you.

Step 8: Create Controllers
==========================

Now, we have reach to the meat of the application. Lets create the controllers package that will interact with our models package:

Inside the `api` directory, create the controllers package(directory)

mkdir controllers

In the path `api/controllers` create a file called `base.go`

touch base.go

This file will have the our database connection information, Initialise our routes and start our server:

base.go

Observe the **underscore** we used when we imported the mysql and postgres packages. You can simply import the one you need, except if you want to experiment with both.

Also observe that, we called the **initializeRoutes()** method. It will be defined in the **routes.go** file shortly.

Let’s Create a **home\_controller.go** file that welcomes us to the API:

In the path: `api/controllers`

touch home\_controller.go

home\_controller.go

Let’s Create the **users\_controller.go** file:

In the path: `api/controllers`

touch users\_controller.go

users\_controller.go

Let’s Create the **posts\_controller.go** file:

In the path: `api/controllers`

touch posts\_controller.go

posts\_controller.go

Lets Create the **login\_controller.go** file:

In the path: `api/controllers`

touch login\_controller.go

login\_controller.go

Now, Let’s light up the whole place up by creating the **routes.go** file

In the path: `api/controllers`

touch routes.go

routes.go

Step 9: Seeding the Database with Dummy Data
============================================

If you wish, you can add a dummy data to the database before adding a real one.

Let’s create a **seed package** to achieve that:

In the path `api/`

Create the seed package

mkdir seed

Then create the **seeder.go** file:

touch seeder.go

Step 10: Create an Entry File to the API Directory
==================================================

We need to call the **initialize()** method we defined in the **base.go** file and also the seeder we define above. We will create a file called **server.go**

In the path `api/`

touch server.go

This is the content:

Step 11: Create app entry file: main.go
=======================================

Create the main.go file in the root of the **fullstack** directory

touch main.go

This is the file that actually “start the engine”. We will call the **Run** method that was defined in **server.go** file

This is the content:

main.go

Before we run the app, lets confirm your directory structure:

fullstack  
├── api  
│   └── auth  
│   │   └── token.go  
│   ├── controllers  
│   │   ├── base.go   
│   │   ├── home\_controller.go  
│   │   ├── login\_controller.go  
│   │   ├── posts\_controller.go  
│   │   ├── users\_controller.go    
│   │   └── routes.go  
│   ├── middlewares   
│   │     └── middlewares.go  
│   ├── models  
│   │     ├── User.go  
│   │     └── Post.go  
│   ├── responses  
│   │     └── json.go  
│   ├── seed  
│   │     └── seeder.go  
│   ├── utils  
│   │     └── formaterror  
│   │         └── formaterror.go  
│   │       
│   │       
│   └── server.go  
├── tests  
├── .env  
├── go.mod  
├── go.sum  
└── main.go

Also ensure that your database(s) are created and you have entered relevant data in the `.env` file.

Now, without further ado, let’s run the app:

go run main.go

This will start up the app and run migrations.

![](https://miro.medium.com/max/30/1*o3jXYZ6a9CuZRXZ-Wbfxgw.png?q=20)

starting the application

Yes! you did it. Well done.

Step 12: Testing the Endpoints in Postman
=========================================

You can use Postman or your favorite testing tool, then in the next step, we will **write test cases**

Lets test endpoints at random:

**a. GetUsers (/users):**

Remember we seeded the users table

![](https://miro.medium.com/max/30/1*iF1nDcE_n9ScJPsAxIWQIA.png?q=20)

**b. GetPosts (/posts):**

Remember we also seeded the posts table

![](https://miro.medium.com/max/30/1*AT8wqq8gJHbRrB-24ZcVYg.png?q=20)

**c. Login (/login)**

Lets Login User 1: We will use that token to update the post in the next test.

![](https://miro.medium.com/max/30/1*1_dF3sOG85DGpAOa5TSRig.png?q=20)

**d. UpdatePost (/posts/{id}):**

To update a post, we will need the authentication token for a user and in the above, we generated a token when we logged in user 1. The token look like this:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE1NjY5NDE3MzgsInVzZXJfaWQiOjF9.CK8rJ-3IG3xHdCj3iHKA4ihizepij5HNXz4RWrXe50

I will use this token and put it in **Authorization: Bearer Token** in Postman:

![](https://miro.medium.com/max/30/1*rk8sehATnRQyUbf7Y1Vb6g.png?q=20)

Then i will use json in the body to send data to update:

![](https://miro.medium.com/max/30/1*dzId7Mce7nSz5yuwjtIDhA.png?q=20)

If **user 2** try to update **user 1** post, the response will be authorised

![](https://miro.medium.com/max/30/1*N_cZSOEBGkWflRdXuPPMSw.png?q=20)

**e. DeleteUser (/users/{id}):**

For the user to shutdown his account, he needs to be login first, so as to generate the JWT token.

Let us login **user 2** and delete him.

![](https://miro.medium.com/max/30/1*bwqwbBOIqVlWTEWif84j3g.png?q=20)

抓取令牌，将其插入**授权：承载令牌**。然后在邮递员中使用“ **删除** ”方法。

![](https://miro.medium.com/max/30/1*NDhNPng45KxTySCqc4eQnQ.png?q=20)

注意**状态代码**是**204**，这意味着**没有内容**。响应是**1**，这意味着成功。

**F。UpdateUser（/ users / {id}）：**

**请记住登录“用户更新”并使用令牌**。由于用户2被删除，让我们更新用户1：

![](https://miro.medium.com/max/30/1*E-FMTNc5_Z8_pmbwEk8PwQ.png?q=20)

**G。CreateUser（/ users）：**

我们不需要通过身份验证来创建用户（注册）。让我们创建第三个用户：

![](https://miro.medium.com/max/30/1*gU72hgYaZ4rlXGpRSFDIgw.png?q=20)

**H。CreatePost（/ posts）：**

让新用户创建帖子。再次记住，他必须登录并在**授权中**使用他的令牌**：Bearer Token**

![](https://miro.medium.com/max/30/1*0oBpfkGiKmGyRDSKMTAnQQ.png?q=20)

您可以测试剩余的端点：

一世。**GetUser** **（/ users / {id}）** - 获取一个用户（无需令牌）

学家 **GetPost（/ posts / {id}）** - 获取一个帖子（无需令牌）

ķ。**DeletePost（/ posts / {id}）** - 经过身份验证的用户删除他创建的帖子（需要令牌）

湖 **主页（/）** - 获取主页（无需代币）

第13步：为端点编写测试用例
==============

我们已经证明了端点正在工作。但这还不够，我们仍然需要对它们进行真正的测试以进一步证明。

记住我们在我们这里定义了测试数据库`.env`，你可以单独为测试创建一个新的数据库。

我知道我们可以使用接口和模拟数据库调用，但我决定复制测试时在现实生活中发生的完全相同的过程。

At the start of this project, we created the **tests** directory.

Now, we will create two packages inside it: **modeltests** and **controllertests**

**a. Models Tests**

We are going to test the methods in the **models package** defined in **step 3**

in the path `tests/` create the modeltests package:

mkdir modeltests

**cd** into the package and create a file **model\_test.go**

cd modeltests && touch model\_test.go

Inside the **model\_test.go** file:

**TestMain()** do necessary setup before testing. It loaded the `.env` file and called the **Database()** function to connect to the test database.

You can also see that we wrote other helper functions that we will use in the actual test, such as refreshing the test database and seeding it, this will be done for every test. **So no test depend on another to pass.**

**i. user\_model\_test.go**

Now, Let’s Create tests for the methods in the User model. Create the file **user\_model\_test.go** in the path same as the **model\_test.go**: `tests/modeltests`

touch user\_model\_test.go

This is the content:

user\_model\_test.go

We can run individual tests in user\_model\_test.go. To run **TestFindAllUsers,** simply do:

go test --run TestFindAllUsers

![](https://miro.medium.com/max/30/1*r2PmiATbVMDEqwbisK1Kaw.png?q=20)

Get a more detailed output by attaching the `-v` flag:

go test -v --run TestFindAllUsers

![](https://miro.medium.com/max/30/1*APKiEk8E8ie0js6wuRptlA.png?q=20)

**ii. post\_model\_test.go**

Let’s also Create tests for the methods in the Post model. Create the file **post\_model\_test.go** in the path same as the **model\_test.go**: `tests/modeltests`

This is the content:

post\_model\_test.go

Lets run one test:

go test -v --run TestUpdateAPost

Output:

![](https://miro.medium.com/max/30/1*spU3ZPCZATUwQEqFFNM3eg.png?q=20)

Let’s make a test **FAIL** so that you can see what it looks like for failing test. For the TestUpdateAPost test, i will change this assertion:

assert.Equal(t, updatedPost.ID, postUpdate.ID)toassert.Equal(t, updatedPost.ID, 543) //where 543 is invalid

Now, when we run this test, it will fail:

![](https://miro.medium.com/max/30/1*0dPVDFrIfUtX6xs3mISySQ.png?q=20)

You can see that line:

post\_model\_test.go:101 **1** does not equal **543**

**Running all tests in the modeltests package:**

要在modeltests包中运行**测试套件**，请确保在终端中，您在路径中：`tests/modeltests`。

然后运行：

去测试-v

好极了！模型测试包中的所有测试都会运行并全部通过。

**湾 控制器测试**

在测试路径中：`/tests`，我们将创建一个名为**controllertests**的包，它与**modeltests**位于相同的目录路径中**。**

mkdir controllertests

接下来，我们将创建**controller\_test.go**文件，我们将在其中定义**TestMain（）**，它加载`.env`文件，设置数据库连接和浏览器功能。

在路径中： `tests/controllertests`

touch controller\_test.go

controller\_test.go

**一世。login\_controller\_test.go**

我们将在这里使用**TABLE TEST**。**表测试**背后的想法是，在结构中定义的所有可能情况，它使用循环来运行每个测试用例。这节省了我们很多时间，因为我们倾向于仅使用一个测试函数来测试特定功能的所有情况。

在与controller\_test.go相同的目录路径中，我们创建了一个文件

触摸login\_controller\_test.go

随着内容：

login\_controller\_test.go

运行TestLogin：

去测试-v --run TestLogin

![](https://miro.medium.com/max/30/1*6vS7igu3VQzIiAK4QKB1DA.png?q=20)

TESTLOGIN

**II。user\_controller\_test.go**

该测试文件广泛使用**TABLE TEST**来测试所有可能的情况，而不是为每种情况创建单独的测试函数，从而为我们节省了大量时间。

在与controller\_test.go相同的路径中，创建**user\_controller\_test.go文件**

触摸user\_controller\_test.go文件

让我们在该文件中运行一个测试函数来演示。

运行**TestCreateUser**

去测试-v --run TestCreateUser

![](https://miro.medium.com/max/30/1*QGQrm3XbZyN9GIJbtBae5w.png?q=20)

TestCreateUser

观察这个：

![](https://miro.medium.com/max/30/1*K8O-ERvYJ1IvAsWOMHgg8g.png?q=20)

这是我们的表格测试中的一个案例：

{   
 inputJSON：\`{“nickname”：“Pet”，“email”：“grand@gmail.com”，“password”：“password”}\`，statusCode：500，errorMessage：“Nickname Al Taken”，  
}，

由于此测试访问数据库并确定Nickname已存在且无法插入该记录，因此返回错误，这正是我们在该测试中所需的。**因此测试通过了**。电子邮件重复时同样适用。

**III。post\_controller\_test.go**

**TABLE TEST**也广泛用于此文件中。在与controller\_test.go相同的目录中，创建**post\_controller\_test.go**文件

触摸post\_controller\_test.go

随着内容：

在这个测试文件中我们可以运行**TestDeletePost**函数

去测试-v --run TestDeletePost

![](https://miro.medium.com/max/30/1*ebKOoWTZ1ddFHAWXw8E8ow.png?q=20)

TestDeletePost

**在controllertests包中运行所有测试**

我们还可以运行controllertests包的**测试套件**。

在路径`tests/controllertests`运行中：

去测试-v 

所有测试都通过了。感觉不错！

**C。在应用程序中运行整个测试。**

此时，您的文件夹结构应如下所示：

![](https://miro.medium.com/max/27/1*4-UZkh-HG0VbLGIjJ1oqaA.png?q=20)

现在，要运行**测试套件**，您应该在`tests/`目录中。

然后运行：

去测试-v。/ ...

这将运行在所有的测试**modeltests**和**controllertests**包。

![](https://miro.medium.com/max/28/1*7XTMOAJdGc7Zs8UF-SwMhw.png?q=20)

没有一个测试失败。有多甜。

包起来。
====

坦率地说，我做了很多研究，把这篇文章放在一起。由于编写测试用例，我不得不改变整个应用程序结构。这真是一个痛苦的屁股。我认为现在都值得，测试每一个功能/方法都会提供更好的软件。真的，我感觉很好。

**接下来是什么？**

*   Docker化应用程序。
*   在Kubernetes上部署
*   整合Travis，Code Climate和Coveralls
*   在AWS，Digital Ocean或Heroku上部署应用程序。
*   使用React / Vue来使用API​​。

您可以在媒体上关注我以获取更新。你也可以在[twitter](https://twitter.com/@stevensunflash)上关注我[](https://twitter.com/@stevensunflash)

获取[github](https://github.com/victorsteven/Go-JWT-Postgres-Mysql-Restful-API)上的源代码[](https://github.com/victorsteven/Go-JWT-Postgres-Mysql-Restful-API)
-------------------------------------------------------------------------------------------------------------------------------------------------------

快乐的编码！