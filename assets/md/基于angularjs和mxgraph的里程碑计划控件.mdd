控件效果:
![p1.png](https://bbs-img.huaweicloud.com/blogs/img/1564485262910490.png "1564485262910490.png")![p2.png](https://bbs-img.huaweicloud.com/blogs/img/1564485322856515.png "1564485322856515.png")
![p3.png](https://bbs-img.huaweicloud.com/blogs/img/1564485328370488.png "1564485328370488.png")![s3.png](https://bbs-img.huaweicloud.com/blogs/img/1564485335537761.png "1564485335537761.png")
控件实现:
首先下载 :[https://github.com/jgraph/mxgraph](https://github.com/jgraph/mxgraph)最新的版本
需要其中的mxgraph-master\\javascript\\examples\\grapheditor\\www目录中的所有和src中的mxClient.js文件，
控件模板:
-----
```
<head>
<meta charset="UTF-8">
<link rel="stylesheet" type="text/css" href="/resources/mx/styles/grapheditor.css">
<script type="text/javascript">
mxBasePath = '/resources/mx/';
STYLE\_PATH = '/resources/mx/styles';
RESOURCES\_PATH = '/resources/mx/resources';
STENCIL\_PATH = '/resources/mx/stencils';
</script>
<!--mxGraph编辑器的相关js依赖-->
<script type="text/javascript">
var mile\_ui = null;
function drawInit(xml){
    var editorUiInit = EditorUi.prototype.init;
    EditorUi.prototype.init = function(){
     ....
    };
mxResources.loadDefaultBundle = false;
var bundle = mxResources.getDefaultBundle(RESOURCE\_BASE, mxLanguage) ||
mxResources.getSpecialBundle(RESOURCE\_BASE, mxLanguage);
mxUtils.getAll([bundle, STYLE\_PATH + '/default.xml'], function(xhr)
{
....
// Main
mile\_ui = new EditorUi(new Editor(urlParams['chrome'] == '0', themes),document.getElementById('eContainer'));
updateDraw(xml);
//sco["htm"]=$('#eContainer').html();
}, function()
{
....
});
}
function updateDraw(xml){
mile\_ui.editor.graph.model.beginUpdate();
        try {
var doc = mxUtils.parseXml(xml);
mile\_ui.editor.graph.resizeContainer = true;
mile\_ui.editor.setGraphXml(doc.documentElement);
mile\_ui.editor.graph.centerZoom = false;
mile\_ui.editor.graph.setTooltips(false);
mile\_ui.editor.graph.setEnabled(false);
mile\_ui.editor.graph.resizeContainer = false;
        } catch (e) {
            console.error(e);
        } finally {
            mile\_ui.editor.graph.model.endUpdate();
        }
}
</script>
</head>
<div class="mgt10 mgb40 pdl130 pdr30 position-relative">
<table class="table table-bordered table-striped table-hover">
<thead>
<tr>
    <th id="item" scope="colgroup">年</th>
    <th ng-repeat="year in RangeYear" id="y\_{{year}}" scope="colgroup" colspan="12">{{year}}</th>
    <th scope="colgroup" rowspan="2" style="width:80px;">操作</th>
</tr>
<tr>
   <th scope="col" rowspan="1">月</th>
   <th ng-repeat="month in RangeMonth  track by $index" id="m\_{{month}}">{{month}}</th>
</tr>
</thead> 
<tbody>
<tr ng-repeat="tData in timelineData">
<td scope="colgroup" style="height:{{ht/timelineData.length}}px">{{tData.title}}</td>
<td ng-if="$index==0" scope="colgroup" colspan="{{RangeYear.length\*12}}" id="eContainer" style="height:{{ht}}px;padding:0;" rowspan="{{timelineData.length}}"></td>
<td scope="colgroup">
<div class="pull-right pdt10 mgb10" ng-click="addMileStone($event,$index)">
<button class="btn btn-info btn-small ng-scope">
<i class="icon-plus"></i>
<span class="ng-binding">添加</span>
</button>
</div>
<div class="pull-right pdt10 mgb10" ng-click="updateMileStone($event,$index)">
<button class="btn btn-success btn-small ng-scope">
<i class="icon-refresh"></i>
<span class="ng-binding">更新</span>
</button>
</div>
<div class="pull-right pdt10 mgb10" ng-click="showPlan($event,$index)">//这里要注意这里$index 如果放到里面回合checkbox扩展的相关功能冲突，$index始终为用tdata为参数始终为第一个的问题
<input type="checkbox" class="new-checkbox" id="showPlan" name="showPlan" ng-model="tData.showplan"/>//同时写在外层也会有触发两次的问题使用preventdefeat处理
<label for="showPlan">显示计划</label>
</div>
<div class="pull-right pdt10 mgb10" ng-click="showAct($event,$index)"> 
<input type="checkbox" class="new-checkbox" id="showCt" name="showAct" ng-model="tData.showact"/>
<label for="showCt">显示实际</label>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="modal" id="addMileModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static">
....
</div>
<div class="modal" id="updateMileModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static">
.....
</div>
```
控制器:
----
```
angular.module('xxx.milestone', []).component('mview', {
    controller: ['$scope', '$http', '$window', '$stateParams', '$timeout','$compile', 'xxxService', function($scope, $http, $window, $stateParams, $timeout,$compile, xxxService) {
var tid = 0;
        var oldtid = tid;
Object.defineProperty(this, 'tid', {
get: function() {
  return tid;
},
set: function(newVal) {
if(oldtid!=0 && oldtid == newVal){
return;
}
oldtid = newVal;
tid = newVal;
console.log('tid changed:', newVal);
$scope.timelineId = tid;
$scope.initData();
}
});
        var contextpath = window.Ruban.contextPath;
        $scope.RangeYear = [];
        $scope.RangeMonth = [];
        $scope.timelineData = [];
        $scope.addMile = {};
        $scope.xml = "";
        $scope.timelineId = 1;
        $scope.initDraw = false;
        $scope.ht = 300;
        $scope.contentRestore = {};
        $scope.initData = function () {
var param = {
                "timelineId": $scope.timelineId
            };
            $scope.ht = $scope.timelineId.split(",").length \* 300;
var url = contextpath + 'api/private/xxxx/getTimeline.json';
xxxService.commonPostJQlike(url, param, function (response) {
                if(!response.data.success){
                   window.location.href=contextpath +"xxxHome.html#!/error";
                   return;
                }
                $scope.timelineData = response.data.data;
                $scope.xml = response.data.xml;
            var bgDate = new Date($scope.timelineData[0].bg);
            var edDate = new Date($scope.timelineData[0].ed);
            $scope.RangeYear = [];
            $scope.RangeMonth = [];
            for(var i = bgDate.getFullYear();i < edDate.getFullYear();++i){
            $scope.RangeYear.push(i);
            for(var j=1;j<=12;++j){
            $scope.RangeMonth.push(j);
            }
            }
            if($scope.RangeMonth.indexOf(edDate.getFullYear())==-1){
            $scope.RangeYear.push(edDate.getFullYear());
            for(var j=1;j<=12;++j){
            $scope.RangeMonth.push(j);
            }
            }            
$timeout(function() {
            if($scope.initDraw==false){//attan
            drawInit($scope.xml);
            $scope.initDraw = true;
            }else{
            //$('#eContainer').html($scope.contentRestore["htm"]);
            drawInit($scope.xml);//updateDraw--pro in this scene
            //这里不用updateDraw是因为当控件在ng-repeat中显示的时候，angularjs刷新子元素的一些过程导致开始的mxgraph绑定失效
            }
            date();
            });       
            });
        };
$scope.addMileStone = function(e,cid) {
e.preventDefault();
$scope.currentStone = $scope.timelineData[cid];
$scope.addMile = {};
$("#addMileModal").modal();
};
$scope.submitMileAdd = function() {
$("#add\_mile").attr("disabled", "disabled");
    var req = {
    "timelineId":$scope.currentStone.id,
    "addMile.planDesc":$scope.addMile.planDesc,
    "addMile.planDate":$scope.addMile.planDate
        };
    var url=contextpath+"api/private/xxxxx/addMileView.json";
    xxxService.commonPostJson(url,req,function () {
    ....
    });
};
$scope.updateMileStone = function(e,cid) {
e.preventDefault();
$scope.currentStone = $scope.timelineData[cid];
$timeout(function() {
            date();//用于刷新新增的日期控件功能
            });     
$("#updateMileModal").modal();
};
$scope.submitMileUpdate = function() {
$("#update\_mile").attr("disabled", "disabled");
    var req = {
    "timelineId":$scope.currentStone.id,
    "milestone":$scope.currentStone.milestone,
    "title":$scope.currentStone.title
        };
    var url=contextpath+"api/private/xxxxx/updateMileView.json";
    xxxService.commonPostJson(url,req,function () {
    ....
    });
};
$scope.showPlan  = function(e,cid) {
e.preventDefault();
//console.log(cid); maybe syli double
$scope.currentStone = $scope.timelineData[cid];
    var req = {
    "timelineId":$scope.currentStone.id,
    "showplan":!$scope.currentStone.showplan
        };
    var url=contextpath+"api/private/xxxxx/updateMileView.json";
    xxxService.commonPostJson(url,req,function () {
    ....
    });
};
$scope.showAct  = function(e,cid) {
e.preventDefault();
$scope.currentStone = $scope.timelineData[cid];
    var req = {
    "timelineId":$scope.currentStone.id,
    "showact":!$scope.currentStone.showact
        };
    var url=contextpath+"api/private/xxxx/updateMileView.json";
    xxxService.commonPostJson(url,req,function () {
    ....
    });
};
}],
    controllerAs: 'MilestoneController',
    templateUrl: window.Ruban.contextPath+'pages/xxxx/milestone.html',
    bindings: {
        tid: '@'
    }
});
```
使用形式：
-----
```
<div class="bgWhite">
    <mview tid="${timelineId}"></mview>//timelineId来自springcontrol绑定形式为以，分割的timelineId
</div>
```
后端的一些实现：
--------
主要是使用dom4j写了一个MxGraphService的类来对显示到前端的mxgraph绘制对应的xml文件，
```
public static String formatXmlByInfo(List<Map<String,Object>> drawParam)；
```
//说明根据数据库中由timelineId查询到对应的里程碑信息来请求格式化绘图xml节点信息
public static List<Node> formatMileLine(int id[],int y)；
//id 为用来递增为绘图图元的id，该函数用来格式化返回最基本的中间的时间线
```
public static List<Node> formatToday(int id[],int x,int y,int parent)；
```
//返回指示当前日期的位置图元
```
public static List<Node> formatMilestone(int id[],int x,int y,Map<String,Object> info,String color,int parent)；
```
//返回计划里程碑图元
```
public static List<Node> formatMilestoneD(int id[],int x,int y,Map<String,Object> info,String color,int parent)；
```
//返回实际完成时间点图元
说明：上面的格式化过程其实很简单，具体是解析参数化过后的样本结构xml获得相应的xml节点返回，注意返回的xml Node需要clone以便添加到最终的根节点；
链接:[基于angularjs和mxgraph的里程碑计划控件](https://bbs.huaweicloud.com/blogs/219d7441b2c111e9b759fa163e330718)