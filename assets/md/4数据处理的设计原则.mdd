![4数据处理的设计原则](https://towardsdatascience.com/4-design-principles-for-data-processing-964d6a45cb7c)
4数据处理的设计原则
==========

[

![斯蒂芬妮沉](https://miro.medium.com/fit/c/48/48/0*kt7Vn21xO_GsnyLy.png)

](/@jshen9889?source=post_page-----964d6a45cb7c----------------------)

[斯蒂芬妮沉](/@jshen9889?source=post_page-----964d6a45cb7c----------------------)

跟随

[9月3日](/4-design-principles-for-data-processing-964d6a45cb7c?source=post_page-----964d6a45cb7c----------------------) · 9 分钟阅读

设计模式的实践在面向对象编程（OOP）中最为流行，在Erich Gamma和Richard Helm的经典着作“设计模式：可重复使用的面向对象软件的元素”中对其进行了有效的解释和总结。以下是维基百科的设计模式的定义：

“ **软件设计模式**是**软件设计中**给定上下文中常见问题的通用，**可重用的**解决方案。它不是可以直接转换为源代码或机器代码的完成设计。它是如何解决可在许多不同情况下使用的问题的**描述或模板**。设计模式是形式化的**最佳实践**，程序员可以在设计应用程序或系统时使用它来**解决常见问题**。“

对于数据科学，许多人可能会问同样的问题：数据科学编程是否有设计模式？我会说是的。但是，为了将它们与OOP区分开来，我将其称为数据科学的设计原则，其实质上与OOP的设计模式相同，但处于更高的层次。在Robert Martin的书“清洁架构”的启发下，本文重点介绍了数据处理和数据工程的4个顶级设计原则。我的下一篇文章将介绍优化性能的通用设计原则。在这两个领域，都有可重用的解决方案和最佳实践，已经证明：

1.  减少整体开发周期;
2.  使数据处理更易于维护（无论使用哪种编程语言或数据准备工具）;
3.  使系统更加开放和易于操作;
4.  从一开始就确保数据质量。

**设计原则1：始终从数据集和数据实体的设计开始**

每个数据流程都有3个最小组件：输入数据，输出数据和两者之间的数据转换。在设计数据流程时，首先要做的是清楚地定义输入数据集以及输出数据集，包括：

*   输入数据集和所需的参考数据
*   要创建的输出数据集
*   每个数据集中的数据字段
*   每个字段的数据类型，例如文本，整数，浮点数，列表等，
*   确定每条记录唯一性的字段
*   每个字段的预期数据模式，包括它是否可以具有缺失值和不同的值列表
*   数据集与组织中其他现有数据集的关系

这类似于应用于数据库的所谓数据建模，有时也称为“数据库逻辑设计”。这里的关键字是“逻辑”的，因为它应该在实现决策之前发生。数据集可以写入磁盘并永久存储在公司内，并最终成为其他进程和应用程序访问或使用的真正资产。因此，使用数据治理驱动的最佳实践和政策，应该准确，明确地定义，这一点非常重要。特别是，应根据业务需求或下游组件或流程所需的内容定义输出数据集。输入数据集应与其源一致地定义，以便可以在不同系统之间轻松跟踪数据沿袭。

在逻辑设计之后，可以确定给定数据集的物理位置和数据结构作为系统设计的一部分。通常情况下，物理结构可能与逻辑设计不同。一个典型的例子是逻辑设计中的字段名称应该具有正常的单词以使其更有意义和可读，而物理字段名称必须考虑系统或软件限制。例如：

*   逻辑字段名称：员工姓名
*   物理字段名称（不能有空格，并且对字符数有限制）：emp\_nm

当组织中的数据平台发生更改时，逻辑定义不应更改，而数据集的物理表示可以根据系统要求和功能进行重新设计。

如果流程流程需要多个步骤，则还需要定义中间数据集的内容，这可以用于不同的目的：

*   用于数据质量检查
*   提供流程检查点和阶段，以便流程在失败时不需要始终从头开始重新运行
*   充当另一个子流程的输入或由其他系统或用户使用

与数据处理逻辑的代码相比，数据实体需要更长时间和更多努力来进行更广泛的影响，主要是因为它已经拥有数据并且可以被其他进程使用。另一方面，一旦定义了输入，中间和输出数据集，数据过程本身的骨架就位。我们经常看到数据工程师在没有先明确定义输出的情况下开始构建流程。这很容易导致2种后果：1）当输出发生变化时，更大的变化甚至是过程的改进; 2）输出取决于处理逻辑，因此，错过一些要求或定义不明确。因此，在开始设计技术流程之前，始终要先定义数据集。事实上，

数据集和数据实体的逻辑设计也与初始业务需求收集，数据发现和数据治理流程紧密相关，以遵循组织标准。此外，仔细的逻辑设计应考虑组织内的数据共享，如果字段或数据已存在于公司的其他位置，则应避免重复数据集（请参阅我的文章：[主数据管理：数据策略的一个基本部分](/master-data-management-an-essential-part-of-data-strategy-db12411a05b2)）。最后，明确的良好治理数据集逻辑设计是从一开始就确保数据质量的关键步骤（参见我的文章：[确保和维持数据质量的7个步骤](/7-steps-to-ensure-and-sustain-data-quality-3c0040591366)）。

**设计原则2：将业务规则与处理逻辑分开**

在Robert Martin的“清洁架构”一书中，其中一个原则是将业务规则与插件分开，从软件角度，特别是OOP功能。然而，在数据工程中，存在类似的原则，而业务规则具有更广泛的含义。首先，业务规则由不同类型组成，例如，市场营销，财务，安全或合规性中的特定方法。在许多情况下，数据清理和标准化的规则也可以由业务部门驱动，因此被视为业务规则。业务规则通常有3个特征：

1.  需要由商业组织或业务分析师进行审核
2.  可以经常更换，需要快速周转
3.  如果未正确配置或执行，将导致严重影响和后果

业务规则的管理和执行对于数据处理的成功至关重要。一个好的设计应该考虑以下几个方面：

1.  _模块化_

应在同一数据流程，模块或功能中处理相同类型的规则。另一方面，不同类型的规则不应存在于同一进程，模块或功能中。否则，管理业务规则变更的影响就变得很困难，而且维护过程变得更加困难。

让我们举一个处理客户调查数据的小例子，您需要清理原始数据，对其进行标准化，然后将标准化数据加载到数据库表中。这里的输出是标准数据库表，您的调查数据是原始输入。构建过程有两种方法：

![](https://miro.medium.com/max/30/1*hTnr8zXOce7g36pyjeELQg.png?q=20)

![](https://miro.medium.com/max/603/1*hTnr8zXOce7g36pyjeELQg.png)

数据清理规则与字段映射规则不同：数据清理规则基于输入数据的值，而字段映射基于输入和输出的数据结构。鉴于此，选项1更好，因为它允许数据清理规则独立于字段映射更改，因此与选项2相比，导致更多的灵活性和简单性，以及对规则修改的影响更小。换句话说，清除分离不同类型的规则可以更好地管理规则，而对其他类型的规则以及其他处理逻辑的影响最小。此外，专注于一种业务规则的特殊功能或模块可以在需要时成熟为独立服务，然后可以针对其他用例单独更改或增强。

_2.业务规则的元数据存储_

在可能的情况下，经常更改的业务规则部分应该被抽象出来并存储在存储库（例如，数据库）中，与编程代码本身分开。通过这种分离，可以在其上构建应用程序或API，业务分析员和/或业务用户可以通过它来查看和修改业务规则。在处理方面，引擎只是在执行时从存储库中读取规则，并将规则应用于输入数据，而没有任何业务逻辑硬编码到进程本身。

_3.业务规则版本控制和日志记录_

在元数据存储库中单独存储和管理业务规则之后，进一步的版本控制和日志记录功能将变得非常强大，使用户能够在新版本中更改规则，并在批准之前将结果与先前版本的结果进行比较或发布更改。此外，在每个业务规则之前和之后记录结果对于控制规则执行的准确性和确保从规则引擎创建的输出数据的质量至关重要。

**设计原则3：从一开始就构建例外**

数据永远不会是完美的，因此，我们永远不会假设输入数据是完美的。初始设计中应考虑数据异常处理，如下所示：

*   数据集是否具有预期的格式？
*   输入数据集是否具有正确的记录数或是否为空？如果文件为空，许多编程语言都不会失败 - 需要显式捕获空文件异常。
*   每列是否都有正确的数据类型？同样，当某些记录中的少数值具有错误的格式时，某些程序可能会无声地失败。
*   定义应该引发异常的条件：1）如果过程可以继续，或者过程失败，是否应该发出警告; 2）谁将成为接收警报的收件人？

处理数据异常对于首先确保数据质量至关重要。精心设计的流程应该预先定义所有这些异常，并因此在流程中捕获。例外情况不仅可以导致实时警报，还可以提供给集中的数据质量报告和仪表板。

**设计原则4：使用标准输入和输出轻松集成**

我们如何才能使数据处理易于集成？一个重要原则是创建标准化输入和标准化输出层以“封装”主要过程。如下图所示，标准化输入数据的过程应该与主过程分离和分离，其中输出是主过程的标准输入数据集。将来，如果还有一种类型的输入数据，则可以构建和集成单独的标准化过程，而无需更改主过程。这也适用于输出 - 当需要生成可能不同的输出格式时，应首先生成标准输出层。这允许通过构建单独的过程从标准输出生成未来输出，而无需更改主过程。显然，

![](https://miro.medium.com/max/30/1*2Ky0CPPDxtruXTJXKVszeA.png?q=20)

![](https://miro.medium.com/max/627/1*2Ky0CPPDxtruXTJXKVszeA.png)

**结论**
======

本文总结了数据处理和工程的4个设计原则。这些原则不仅应该用于数据架构师设计大型系统，还应该用于数据科学家和数据工程师的小型过程。如果以规范的方式采用这些原则，精心设计的数据流程将使维护更容易，更有效地进行更改，对系统的其他部分的影响更小，并最终提供比不具有更好的数据质量的数据质量遵循以上原则。