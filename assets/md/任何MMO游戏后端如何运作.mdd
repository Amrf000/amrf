![任何MMO游戏后端如何运作](https://medium.com/@narengowda/how-does-any-mmo-games-backend-work-df19b44f73a7)
![](https://miro.medium.com/max/30/0*TGWJ94_Pl_rsan0A?q=20)

“黑色微软Xbox 360控制器”由[Arturo Rey](https://unsplash.com/@arturorey?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)上[发布](https://unsplash.com?utm_source=medium&utm_medium=referral)

任何MMO游戏后端如何运作？
==============

[![纳伦德拉湖](https://miro.medium.com/fit/c/48/48/1*uKw76D7_rAn39czESxuLYQ.png)](/@narengowda?source=post_page-----df19b44f73a7----------------------)

[纳伦德拉湖](/@narengowda?source=post_page-----df19b44f73a7----------------------)

跟随

[2018年10月31日](/@narengowda/how-does-any-mmo-games-backend-work-df19b44f73a7?source=post_page-----df19b44f73a7----------------------) · 16 分钟阅读

_这篇文章包括我的文章以及来自众多博客文章，论坛和WIKI的信息组合。_

任何MMO游戏中都有两个复杂的组件

1.  客户端/游戏架构
2.  服务器端/后端架构

你一定想知道，我需要了解客户端架构吗？

如果你正在设计一个网络应用程序，这种想法很好！但是当你是游戏后端开发者时，这种想法对你没有帮助。

_如果您懒得阅读，可以观看以下视频系列_

**任何游戏如何运作？**

首先，你有“游戏循环”。这实际上只是一个几乎无限的循环，在循环内部，您正在检查用户输入，更新游戏状态，以及渲染图形和声音来表示游戏状态。

它看起来像这样：

_while（true）{_

_check\_input（）_

_update\_game\_state（）_

_render\_screen（）_

_}_

这是游戏正在做的高水平。现在，对于这三件事中的每一件事，你都会得到可怕的复杂程度。

设计一个复杂的游戏系统本身就是一个巨大的主题，我不打算触及任何一个！
==================================

有3种不同类型的游戏

1.  战略游戏
2.  慢转游戏
3.  第一人称游戏

设计前两个很容易，因为它们不是实时的，每个人都有时间/转向播放，数据可以很容易地同步

但是像PUBG / CS /使命召唤或NFS / Asphalt等游戏这些游戏需要尽可能快地获得其他玩家的数据。但我们可以实时同步信息吗？并不是的！！

比如说你在旧金山，连接到纽约的服务器。那是大约4,000公里或2,500英里

> 没有什么比光更快，甚至互联网上的字节（在较低级别是光脉冲，电缆中的电子或电磁波）。光以大约300,000 km / s的速度行进，因此行驶4,000 km需要13 ms。

但实际上我们的数据包不会采用最短/直接路径，它们应该通过路由/中继器，因此最终，延迟将根据带宽达到50ms。！搞什么鬼！！！

因此，如果我按空格键，将需要50ms才能到达服务器+服务器需要~100ms处理+ 50ms才能回到其他第二位玩家！

从播放器1向播放器2发送信息总共需要200ms

所以这意味着如果红色球员射出一个黑球，那么蓝色球员会在200ms之后看到，我们的游戏会有这么长的延迟吗？

![](https://miro.medium.com/max/30/0*-AuLfZD0_f-2F84O?q=20)

知道您了解在实时播放的两个玩家之间发送信息有多困难现在想想MMO游戏吗？有100多人同时玩？在任何给定的时间点在PUBG中说100个人都被放到了岛上，所以来自不同地点的这100个人应该一起玩，没有任何故障。

因此，在本次会议中，我将解释游戏应用程序应如何与游戏服务器协同工作，以使MMO体验更好。

> 一个想法！

![](https://miro.medium.com/max/30/0*xQn9L_1D_inJ-Dqp?q=20)

为了减少我们可以在没有服务器/局域网帮助的情况下直接通话，以减少延迟。所以你手机上安装了一个游戏，而且所有其他玩家都是如此，如果没有服务器和应用程序直接相互通话会发生什么？并更新游戏数据？

作弊的问题
=====

作为游戏开发者，您通常不关心玩家是否在单人游戏中作弊 - 他的行为不会影响除他之外的任何人。作弊的玩家可能无法完全按照您的计划体验游戏，但由于这是他们的游戏，他们有权以任何他们喜欢的方式玩游戏。

但是，多人游戏不同。在任何竞争游戏中，作弊的玩家不仅仅是让自己的体验更好，而且还会让其他玩家的体验变得更糟。作为开发人员，您可能希望避免这种情况，因为它往往会让玩家远离您的游戏。

有许多事情可以防止作弊，但最重要的一个（可能是唯一真正有意义的一个）很简单：不要相信玩家。总是假设最坏的 - 玩家会试图作弊

权威的服务器和愚蠢的客户端
=============

这导致了一个看似简单的解决方案 - 您可以让游戏中的所有内容都发生在您控制的中央服务器中，并使客户成为游戏的特权观众。换句话说，您的游戏客户端将输入（按键，命令）发送到服务器，服务器运行游戏，然后将结果发送回客户端。这通常使用权威服务器来调用，因为关于世界上发生的所有事情的唯一权限是服务器。

当然，您的服务器可以利用漏洞，但这超出了本系列文章的范围。但是，使用权威服务器可以防止各种各样的黑客攻击。例如，您不信任具有播放器运行状况的客户端; 被黑客攻击的客户端可以修改其值的本地副本，并告诉玩家它具有10000％的健康状况，但服务器知道它只有10％ - 当玩家受到攻击时，它将会死亡，无论被黑客入侵者认为什么。

你也不相信玩家在世界上的地位。如果你这样做了，一个被黑客攻击的客户端会告诉服务器“我在（10,10）”，一秒钟后“我在（20,10）”，可能穿过一堵墙或比其他玩家移动更快。相反，服务器知道玩家在（10,10），客户端告诉服务器“我想向右移动一个方格”，服务器用（11,10）的新玩家位置更新其内部状态，然后回复播放器“你在（11,10）”：

![](https://miro.medium.com/max/30/0*nZEVo9L5CWF_szhE?q=20)

简单的客户端 - 服务器交互。

总之：游戏状态仅由服务器管理。客户端将其操作发送到服务器。服务器定期更新游戏状态，然后将新游戏状态发送回客户端，客户端只是在屏幕上呈现它。

处理网络!!
======

请记住，我们已经了解到与服务器和播放器通话会导致200毫秒的延迟？

联网的多人游戏非常有趣，但引入了一系列全新的挑战。权威的服务器架构非常擅长阻止大多数作弊，但直接的实现可能会使游戏对播放器反应迟钝。

不知道我们可以在游戏和服务器之间发送数据的不同方式以及如何优化带宽利用率所以目标是减少延迟和带宽利用率。

在网上我找到了[Glenn Fiedler的](https://gafferongames.com/about)这些动画视频，

确定性的锁步：

确定性锁步是一种通过仅发送控制该系统的输入而不是该系统的状态来将系统从一台计算机联网到另一台计算机的方法。在网络物理模拟的背景下，这意味着我们发送少量输入，同时避免发送状态，如位置，方向，线速度和每个对象的角速度。

好处是带宽与输入的大小成比例，而不是模拟中的对象数量。是的，通过确定性锁步，您可以将具有相同带宽的一百万个对象的物理模拟联网。

所有即将到来的演示都有立方体移动，角色，跳跃以及其他小立方体以显示所有不同的行为

所以让我们看看确定性的锁步演示[https://gafferongames.com/videos/deterministic\_lockstep\_desync.mp4](https://gafferongames.com/videos/deterministic_lockstep_desync.mp4)

在上面你可以看到一个几乎是确定性的模拟。左侧的模拟由玩家控制。右侧的模拟具有完全相同的输入，从相同的初始条件开始应用两秒延迟（只是为了显示差异）。

那么通过网络发送了什么信息，即从服务器发送到客户端？

仅发送影响模​​拟的键的状态或按下时间戳的键。因此，对于演示，我们将左侧模拟的输入发送到正确的模拟，右侧的模拟知道输入属于帧n。

> 当数据包丢失太多时，要停止抖动

播放延迟缓冲区：您在此处执行的操作类似于Netflix在流式传输视频时所执行的操作。你最初暂停一点，所以你有一个缓冲区，以防一些数据包迟到，然后一旦延迟已经过去，视频帧间隔正确的时间间隔。如果您的缓冲区不够大，那么视频播放将会很糟糕。通过确定性锁步，您的模拟行为完全相同。

> TCP或UDP

TCP是面向连接的协议服务有时被称为“可靠”的网络服务，因为它保证数据以正确的顺序到达。传输。

如果有任何数据包丢失，那么游戏应该等待2 \* RTT次以获得该数据包并进行渲染，因此您的游戏将不会流畅

250毫秒延迟和5％丢包：[https](https://gafferongames.com/videos/deterministic_lockstep_tcp_250ms_5pc.mp4)：[//gafferongames.com/videos/deterministic\_lockstep\_tcp\_250ms\_5pc.mp4](https://gafferongames.com/videos/deterministic_lockstep_tcp_250ms_5pc.mp4)

使用UDP而不是TCP

这是诀窍。我们需要确保所有输入都可靠且有序地到达。但是如果我们在U​​DP数据包中发送输入，那么其中一些数据包将会丢失。如果不是在事后检测到数据包丢失并重新发送丢失的数据包，我们会冗余地包含每个UDP数据包中的所有输入，直到我们确定另一方已收到它们为止？即使它们没有按顺序排列，我们总是可以使用时间戳来准确地知道哪些数据是最新数据。

即使有25％的数据包丢失和2秒的延迟，看到结果，我们看到的是5％的数据包丢失，250毫秒的延迟TCP是最差的

[https://gafferongames.com/videos/deterministic\_lockstep\_udp\_2sec\_25pc.mp4](https://gafferongames.com/videos/deterministic_lockstep_udp_2sec_25pc.mp4)

[平滑多人游戏的客户端预测](http://www.kinematicsoup.com/news/2017/5/30/multiplayerprediction)
=================================================================================

当您开发在线服务器权威游戏时，您希望您的玩家移动能够对低延迟和高延迟玩家产生响应。为此，您需要实现客户端预测和平滑。

插值：在数值分析的数学领域中，插值是一种在一组离散的已知数据点范围内构造新数据点的方法。

而不是发送密钥：我们从服务器捕获所有相关状态的快照，在游戏方面，我们使用这些快照重建所有其他玩家的视觉近似。所以要解决这个问题我们需要对客户端做一些预测让球员看起来运动顺畅

客户端预测有很多变种，但基本思想总是相同的：客户端通过在服务器处理输入之前移动播放器来响应玩家输入，并告诉客户端玩家应该在哪里。这当然意味着玩家看到自己以及他们实际在服务器上的位置可能会有所不同

您需要一种方法来防止客户端和服务器分歧过多。处理此问题的方法有很多种，最适合您的方法取决于您的游戏

> 插值预测下一个状态!!

*   线性插值
*   Hermite插值
*   Polor插值

![](https://miro.medium.com/max/30/0*d1bEKZ4dbFdcuXJl?q=20)

![](https://miro.medium.com/max/750/0*d1bEKZ4dbFdcuXJl)

> 如何处理游戏角色？

![](https://miro.medium.com/max/30/0*OyorP9t90yqZhAYp?q=20)

![](https://miro.medium.com/max/1040/0*OyorP9t90yqZhAYp)

更好的方法是让每个状态都是它自己的类，通常使用它们继承的基础“状态”类。

状态模式是一种行为软件设计模式，它以面向对象的方式实现状态机。...此模式用于计算机编程，以根据内部状态封装同一对象的不同行为。

这样，角色或对象只需要引用它的当前状态和进行状态更新的调用。当我们想要添加新状态时，我们只需创建一个新类。

> 后端系统设计

![](https://miro.medium.com/max/30/0*a7fNcV_77U_hVaxU?q=20)

![](https://miro.medium.com/max/628/0*a7fNcV_77U_hVaxU)

基于会话的多人游戏架构：

1.  玩家可以使用[Redis](https://redis.io/)连接世界服务，将它们配对在一起，以帮助实现这一目标。
2.  一旦两个玩家加入游戏会话，该媒人会与游戏服务器管理员交谈，以使其在我们的机器群集上提供游戏服务器。
3.  游戏服务器管理器创建在群集中的一台机器上运行的游戏服务器的新实例
4.  游戏服务器管理器还会抓取运行游戏服务器的IP地址和端口，并将其传递回匹配器服务
5.  匹配器服务将IP和端口传递回玩家的客户端

6.最后，玩家直接连接到游戏服务器，现在可以开始互相玩游戏

PROXY SERVER和TCP连接：
===================

创建TCP连接会产生CPU和内存开销。此开销随每个连接的客户端线性增加，或者O（N），其中N是客户端的数量。解码压缩数据流，尤其是加密数据流会增加更多开销。该成本增加更多像O（N \* M），其中N是客户端数量，M是每个客户端接收的数据包数量。

大多数MMO游戏涉及步行，跑步，跳跃，战斗以及需要重复玩家输入的其他活动。这会从每个客户端生成一个恒定的网络消息流，因此我们的O（N \* M）的M部分变得非常重要。试图在处理游戏逻辑（以及物理，AI，制作等）的同一过程中处理该负载会降低玩家的体验。但是，如果我们将这项工作与游戏的其他部分分开，我们可以为处理这些负载提供更多的容量和更大的灵活性。

世界服务器

世界服务器跟踪玩家角色位置并协调高级跨区域活动。

现在我们添加了一个新的World Server，它管理所有游戏服务器。当添加游戏服务器（在运行时）或失败时，World Server将知道它并采取相应的行动。客户端将始终与World Server和其中一个游戏服务器保持连接。

开发以地图为中心的游戏服务器策略，将核心游戏活动集中在其发生的地图上。通过创建两种服务器类型，区域服务器和世界服务器来完成此操 游戏的服务器群集包含许多连接到单个中央世界服务器进程的区域服务器进程。

> 世界服务器充当区域服务器的中央控制器。它将区域地图分配给区域服务器，并协调区域地图与其区域服务器之间的玩家角色的移动。

世界服务器是构成游戏服务器集群的虚拟世界和区域服务器进程节点内的玩家角色位置的中心权限。当玩家角色在区域服务器之间移动时，世界服务器更新[连接服务器](https://gameserverarchitecture.com/glossary/connection-server/)使用的路由数据，以便给定玩家角色的客户端消息到达正确的区域服务器。

区域服务器
=====

区域服务器管理区域地图并控制在其上发生的所有游戏行为。每个区域地图占据包括整个虚拟世界地图的大均匀网格的单个单元。

此模式的最简单应用程序将单个区域映射分配给单个区域服务器，但这可能效率低下。

玩家通常聚集在诸如城镇，供应商，产卵点和普通旅行路线之类的兴趣点（POI）周围。出于兴趣和美学的考虑，各地区的POI分布可能不一致。因此，一些区域地图将比其他地图更高的游戏负荷。

以[地图为中心的游戏服务器](https://gameserverarchitecture.com/2015/10/pattern-map-centric-game-server/)模式实现了一种直接的方式来解决这个问题。也就是说，区域服务器进程可以托管多个区域映射实例。只需在同一区域服务器进程中将几个轻载区域映射组合在一起。负载较重的区域将需要专用区域服务器。

![](https://miro.medium.com/max/30/0*2qcpS1bbPzg3mP7W?q=20)

![](https://miro.medium.com/max/1096/0*2qcpS1bbPzg3mP7W)

称为地图模板的数据结构定义给定地图的地形，几何和其他内容。在运行时，区域服务器从给定的地图模板创建一个或多个地图实例。这些地图实例提供了一个上下文，在该上下文中执行地图的核心游戏。每个区域服务器可以托管一个或多个地图模板的多个实例。

设计为许多玩家的公共空间的大地图通常以单身人士的身份存在。也就是说，整个游戏中只存在该地图的一个实例。其中一个映射的区域服务器在服务器启动时创建其实例，并使其永久运行。

存在较小的地图，用于运行较小的玩家群体的脚本体验。这些地图是短暂的。区域服务器根据需要创建这些映射的实例，并在不再需要时关闭它们。

当玩家的[角色](https://gameserverarchitecture.com/glossary/character/)在虚拟世界中的地图之间移动时，游戏将角色的[状态](https://gameserverarchitecture.com/glossary/state/)从旧地图实例移动到新地图实例。如果映射实例位于不同的区域服务器进程中，则源区域服务器会保存和卸载状态，目标区域服务器会将其加载到新的映射实例中。

以[地图为中心的游戏服务器](https://gameserverarchitecture.com/2015/10/pattern-map-centric-game-server/)模式指定当玩家的[角色](https://gameserverarchitecture.com/glossary/character/)在虚拟世界中的地图之间移动时，角色的[状态](https://gameserverarchitecture.com/glossary/state/)从旧地图实例移动到新地图实例。该模式实现了更一般的[用例](https://gameserverarchitecture.com/glossary/use-case/)，其中字符在两个不邻近区域映射的映射之间传播。

区域边界
====

当玩家角色穿过区域边界或与区域边界另一侧的游戏对象交互时，会出现更复杂的用例。这些用例是这种模式的关键激励因素。这种模式的目标是模拟一个巨大的连续世界，隐藏世界实际上只是较小地图的复合细节。

要做到这一点，游戏必须使区域地图边界的移动和交互尽可能流畅。理想情况下，这意味着，按重要性顺序：

1.  在跨区域边界移动角色时，玩家不会遇到任何延迟或障碍。
2.  玩家必须能够在边界的另一侧看到其他玩家角色，[NPC](https://gameserverarchitecture.com/glossary/non-player-character/)和游戏对象。
3.  玩家必须能够与边界另一侧的其他玩家角色，NPC和游戏对象进行交互。在这里，交互意味着游戏的一个子集，通常可以在同一地图上的角色和游戏对象之间发生。

跨越边界
====

![](https://miro.medium.com/max/30/0*ud-9irT7f8evJ27z?q=20)

![](https://miro.medium.com/max/1148/0*ud-9irT7f8evJ27z)

为了支持玩家跨区域地图边界查看游戏对象的能力：

1.  增强服务器可见性系统，以将游戏对象包含在与该角色应该可见的玩家角色当前地图相邻的地图上。这是确定哪些游戏对象彼此可见的子系统。
2.  这意味着当游戏对象在区域边界的某个可见性阈值内时，每个区域地图的区域服务器必须将位置，方向和状态更新消息发送到相邻地图的区域服务器。
3.  反过来，这些相邻的区域服务器必须在其可见性图中跟踪这些远程游戏对象，就好像它们是本地的，但位于正常的地图范围之外。

扩展区域服务器

有很多横向扩展，但我们不是按需启动服务器，而是预先分配它们并倾向于按地理划分它们 - 无论是在真实世界位置方面，还是更接近玩家，并且在 - 游戏位置，以便共同定位的角色也共享相同的游戏过程。这似乎需要在游戏开发者方面付出更多努力，但也会施加一些额外的限制，例如使与位于海外的朋友在不同的分片上玩更难，要求每个游戏服务器具有不同的配置和数据等。然后有“实例化”区域的想法，可以被认为是另一个地理区域，除了在一个看不见的第四维度（这就是我过去实现它的方式）。

但总的来说，MMO游戏服务器的容量有限，因此通常只能在一个地方获得500-1500名玩家。您可以通过添加实例化和分片来更改“地点”的定义，您可以通过在边界处无缝链接服务器来使世界看起来拥有更多字符，并且您可以通过将任务分配到特殊服务器来增加并发性。

部分地，当前的MMO服务器架构似乎是出于习惯而产生的。从最初设计用于容纳少数人的服务器开始增长，直到我们拥有今天看到的东西 - 但基本假设是游戏服务器应该（在大多数情况下）能够接受来自客户端的请求，进程它原子地和同步地，并立即改变游戏状态，经常同时回复。我们将所有游戏信息保存在RAM中，因为这是我们可以同步有效处理请求的唯一方法。我们将所有共存的实体保存在同一个RAM中，因为那是o

通过这种方式，我们可以轻松处理多实体交易（例如，交易商品的黄金）。但这是否必须如此？

根据我的经验，最好将服务器设置为处理自己的区域，但是以某种方式编写，以便将来可以轻松修改特别繁忙的区域以运行多个负载平衡的服务器。此时，区域中的每个服务器应处理大约1000-2000个并发连接，并使用节点之间的redis等传播播放器数据。

我见过的另一个常见解决方案（特别是在流行的Minecraft服务器上）是调整实际的游戏设计以限制单个服务器上的玩家数量。

为此，请为同一区域设置多个负载平衡服务器，但允许播放器查看它们连接到的服务器，并仅在该服务器中呈现播放器数据。结果是多个“现实”，其中每个服务器在相同的明显区域中独立地拥有不同的玩家群，但是这减少了服务器压力并且允许玩家在他们想要的情况下在服务器之间自由切换的灵活性。如果你确实允许他们切换（为了与朋友或其他人会面），每个服务器强加一个最大的玩家数量，你将有一个硬限制，每个服务器应该处理多少。

你应该至少得到一个正常工作的游戏并运行几个或几千个客户端连接的模拟测试，以获得实际的性能规格，然后再担心你应该去哪里。有可能根本没有问题。

此外，在您关注自己所询问的大量玩家之前，请考虑您的游戏可能并不那么受欢迎。我的意思是没有冒犯，发展一个“热门”只是相对罕见。所以相反，专注于更好的游戏设计等重要问题，以便您以后可以担心这一点。