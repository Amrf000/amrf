![2019年React Developers的22个神奇工具](https://medium.com/better-programming/22-miraculous-tools-for-react-developers-in-2019-7d72054e2306)
2019年React Developers的22个神奇工具
=============================

增强并增强您的React体验
--------------

[

![jsmanifest](https://miro.medium.com/fit/c/48/48/2*CUfRP0Rzg_acoQX5JqkNOg.jpeg)

](/@jsmanifest?source=post_page-----7d72054e2306----------------------)

[jsmanifest](/@jsmanifest?source=post_page-----7d72054e2306----------------------)

跟随

[8月5日](/better-programming/22-miraculous-tools-for-react-developers-in-2019-7d72054e2306?source=post_page-----7d72054e2306----------------------) · 12 分钟阅读

![](https://miro.medium.com/max/30/1*9oh4IaHCImDZGuR3qLx7ig.jpeg?q=20)

摄影：Dennis Brendel，关于Unsplash

[](https://reactjs.org/)正如我们所知，[React](https://reactjs.org/)是一个用于构建令人惊叹的用户界面的JavaScript库。但是，并非所有人都使用相同的工具或了解那些有助于使React开发体验更有趣和主动的优秀工具。

如果您还没有使用过React，或者有可能对使用它感兴趣的朋友，那么当他们问你为什么要使用这个库时，你会怎么说？

除了告诉他们图书馆有多棒（这应该是第一件事）之外，我还想提到开源社区创建的工具有助于将体验带到一个全新的兴奋程度。

以下是您可以在2019年用于构建React应用程序的22个工具（此列表_不_按其重要性排序）

* * *

1\. Webpack Bundle Analyzer
===========================

有没有想过你的应用程序的哪些软件包或部分占用了所有空间？那么，你可以找到[Webpack Bundle Analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer)。该软件包将帮助您识别占用空间最多的输出文件。

它将创建一个实时服务器，并为您提供捆绑包内容的交互式树形图可视化。通过这个工具包，您可以看到所呈现文件的位置，gzip大小，解析大小以及父/子。

好处？那么，你可以根据你看到的内容优化你的React应用程序！

这是一个截图：

![](https://miro.medium.com/max/30/0*Iz7PMZW1aRjf23yv.jpg?q=20)

您可以清楚地看到pdf包占用应用程序中的最大空间。但它也占据_了屏幕上_最大的空间。那_非常_有用。

但是，屏幕截图很小。您还可以传递有用的选项以更详细地查看它，例如`generateStatsFile: true`，并选择生成静态HTML文件，您可以将其保存在开发环境之外的某个位置以供以后使用。

* * *

2\. React-Proto
===============

[React-Proto](https://github.com/React-Proto/react-proto)是开发人员和设计人员的原型工具。它是桌面软件，因此您必须在使用前下载并安装该软件。

以下是此软件的一个示例：

![](https://miro.medium.com/max/30/0*5tEk_nJjLF_UARnA.jpg?q=20)

该应用程序允许您声明道具及其类型，在树中查看组件，导入背景图像，将它们定义为有状态或无状态，定义其父组件将是什么，放大/缩小，以及将原型导出到新的或现有项目。

该应用程序似乎更适合Mac用户，但它仍适用于Windows用户。

完成映射用户界面后，可以选择导出到现有项目或新项目。如果您选择导出到现有项目并选择根目录，它将导出它们`./src/components`，如下所示：

![](https://miro.medium.com/max/24/0*yGQUq_F0QhGZmHhs.jpg?q=20)

以下是我们在示例中使用的组件之一的示例：

![](https://miro.medium.com/max/30/0*VCQ_kuNcUDLlnBmT.jpg?q=20)

React-Proto在GitHub上收购了超过2,000颗星。

就个人而言，我认为这个应用程序需要更新和更多的工作，特别是在React Hooks发布时。

除非您有可见的背景图像，否则它也不会缩小。换句话说，如果您导入背景图像，缩小，然后继续删除背景图像，您将无法放大，因为按钮是灰色的。

放大的唯一方法是重新导入背景图像，然后在放大后将其删除。这个缺陷改变了我对这个应用程序的看法，但是因为我们看不到这个应用程序来自其他任何地方。

而且，开源是这个应用程序的好处，因为它使它有可能在未来制作趋势开源的存储库列表。（他们的特征很重要，但他们似乎缺乏人力。）

* * *

3.你为什么渲染
========

在[你为什么要渲染](https://github.com/welldone-software/why-did-you-render)猴子补丁反应通知您避免重新呈现。

这非常有用，不仅可以指导您完成项目的性能修复，还可以帮助您了解React的工作原理。而且，当您更好地了解React如何工作时，它会让您成为更好的React开发人员。

您可以通过将`whyDidYouRender`其值声明为额外的静态属性来将侦听器附加到任何自定义组件`true`：

只有在这样做之后，您的控制台才会被发出令人难以置信的恼人警告：

![](https://miro.medium.com/max/29/0*hY5hELBRM2Nr5hpL.jpg?q=20)

不要采取错误的方式。把它当成一件好事。利用那些烦人的消息，这样你就可以修复那些浪费的重新渲染，那些恼人的消息最终会让你孤单！

* * *

4.创建React App
=============

大家都知道，[Create React App](https://github.com/facebook/create-react-app)是开始开发React项目的最快方式（开箱即用的现代功能）。

什么可能比这更容易`npx create-react-app <name>`？

所有关于Medium build React接口的教程都`create-react-app`只是因为它快速而简单。

我们有些人可能不知道的是如何使用CRA 创建[TypeScript](https://www.typescriptlang.org/)项目。你所要做的就是`--typescript`在最后添加：

`npx create-react-app <name> — typescript`

这样可以省去手动将TypeScript添加到CRA项目的麻烦。

* * *

5\. React Lifecycle Visualizer
==============================

[React Lifecycle Visualizer](https://github.com/Oblosys/react-lifecycle-visualizer)是一个[npm](https://www.npmjs.com/)包，用于跟踪和可视化任意React组件的生命周期方法。

与Why You You Render类似，您可以启用您选择的任何组件来显示生命周期可视化工具：

这将显示可视化器，如下所示：

![](https://miro.medium.com/max/30/0*-9ECjeP4ozIztgXD.jpg?q=20)

但是，其中一个缺点是它目前仅适用于类组件，因此尚不支持Hook。（这个问题是_可以_自己定，因为这是关于生命周期？）

* * *

6.孔雀鱼
=====

[Guppy](https://github.com/joshwcomeau/guppy)是React的一个友好且免费的应用程序管理器和任务运行器，它在桌面上运行。

他们似乎优先考虑React中较新的人。但是，它对高级开发人员也可能有用。

它为React开发人员定期面对的许多典型任务提供友好的图形用户界面，例如创建新项目，执行任务和管理依赖项。

Windows支持是在2018年8月添加的，因此您可以放心，它是跨平台的。

这是Guppy的样子：

![](https://miro.medium.com/max/30/0*VFKpKz9JocikBZh9.jpg?q=20)

* * *

7.反应测试库
=======

我一直很喜欢[反应测试库，](https://github.com/testing-library/react-testing-library)因为在你编写单元测试时_感觉恰到好处_。该软件包提供了React DOM测试实用程序，可鼓励良好的测试实践。

此解决方案旨在解决测试实现细节的问题，而不是测试React组件的输入/输出，就像用户会看到它们一样。

测试实施细节不是确保您的应用按预期工作的有效方法。

当然，你就可以有更多的信心，_如何_你得到你的组件需要的数据，要使用的排序方法等。但是，如果你必须改变你实施了指向不同的数据库的方式，您的单元测试会失败，因为它们是耦合逻辑的实现细节。

这是一个反应测试库解决的问题，因为理想情况下，您只希望您的用户界面能够正常工作并最终正确呈现。

_如何_将数据提供给这些组件并不重要，只要它们仍能提供预期的输出。

[以下是](https://react-testing-examples.com/jest-rtl/)使用此库进行测试[的示例代码](https://react-testing-examples.com/jest-rtl/)：

* * *

8.反应开发人员工具
==========

[React Developer Tools](https://github.com/facebook/react-devtools)是一个扩展，允许在Chrome和Firefox Developer Tools中检查React的组件层次结构。

这是此列表中最常见的扩展，并且仍然是React开发人员可用于调试其应用程序的最有用工具之一。

* * *

9.比特
====

使用组件库（例如[Material-UI](https://material-ui.com/)或[Semantic UI React）的](https://react.semantic-ui.com/)一个很好的替代方法是[Bit](https://bit.dev/)。

Bit允许您浏览数以千计的开源组件，并允许您使用它们来构建项目。

![](https://miro.medium.com/freeze/max/30/0*az_-Yarxm8cpC4K1.gif?q=20)

有许多不同的React组件可供任何人使用，包括选项卡，按钮，图表，表格，导航栏，下拉列表，加载微调器，日期选择器，面包屑，图标，布局等。

这些是由其他React开发人员上传的，就像你和我一样。

但是，也有一些有用的实用程序，例如格式化日期之间的距离。

* * *

10.故事书
======

如果您还不了解[Storybook](https://storybook.js.org)，我强烈建议您开始使用它，如果您想要更轻松地构建UI组件。

该工具启动了一个实时开发服务器，支持开箱即用的热重新加载，您可以在其中单独实时开发React组件。

另一个很棒的事情是，您可以使用现有的开源附加组件将您的开发体验提升到一个全新的水平。

例如，使用[Storybook README](https://github.com/tuchk4/storybook-readme)包，您可以在同一页面上开发用于生产的React组件时创建README文档。

这足以作为普通文档页面：

![](https://miro.medium.com/max/30/0*5xgqpv0cMuhavYso.jpg?q=20)

* * *

11\. React Sight
================

你有没有想过你的应用程序在流程图中的样子？好吧，[React Sight](https://www.reactsight.com/)让您通过向您展示整个应用程序的实时组件层次结构树来可视化您的React应用程序。

它还支持[react-router](https://reacttraining.com/react-router/web/guides/quick-start)，[Redux](https://redux.js.org/introduction/getting-started)以及[React Fiber](https://github.com/acdlite/react-fiber-architecture)。

使用此工具，您将鼠标悬停在_节点上_，_节点_是指向树中与其直接相关的组件的链接。

如果您在查看结果时遇到问题，可能需要输入`chrome:extensions`地址栏，查找React Sight框，然后单击`Allow access to file URLs`开关，如下所示：

![](https://miro.medium.com/max/30/0*qTojnXwD2hkXpbqG.jpg?q=20)

* * *

12\. React Cosmos
=================

[React Cosmos](https://github.com/react-cosmos/react-cosmos)是一个用于创建可重用React组件的开发工具。

它会扫描项目中的组件，使您能够：

1.  使用道具，上下文和状态的任意组合渲染组件。
2.  模拟每个外部依赖（例如，API响应`localStorage`等）。
3.  在与正在运行的实例交互时，查看应用程序状态是否实时演变。

* * *

13\. CodeSandbox
================

这是最好的工具之一，可以让你的手弄脏React比眨眼的速度更快（好吧，也许不是那么快）。

这个名为_CodeSandbox的_工具是一个在线编辑器，可以让您从原型到部署创建Web应用程序 - 所有这些都来自网站！

CodeSandbox最初只在早期阶段支持React，但它们现在已经扩展到[Vue](https://vuejs.org/)和[Angular](https://angular.io/)等库的其他入门模板。

他们还支持使用常见的静态站点生成器（如[Gatsby](https://www.gatsbyjs.org/)或[Next.js）](https://nextjs.org/)创建项目来启动下一个React Web项目。

CodeSandbox有很多值得讨论的好东西。首先，它_非常活跃_。

如果您需要探索人们为方便起见而构建的一些项目，可以轻松单击“ _探索”_并访问大量代码示例，以帮助您更新下一个项目：

![](https://miro.medium.com/max/30/0*fSl03ZQMKrrJtvy5.jpg?q=20)

一旦你开始编辑一个项目，你就会开始意识到你将要使用的实际上是[VS Code](https://code.visualstudio.com/)编辑器，它是_强大的_。

我想写一篇关于你今天可以在CodeSandbox上使用的所有功能的整篇文章，但看起来工作[已经完成了](https://codesandbox.io/docs)。

* * *

14\. React Bits
===============

[React Bits](https://vasanthk.gitbooks.io/react-bits/)是React模式，技术，技巧和技巧的集合，所有这些都以类似在线文档的格式编写，您可以快速访问不同的设计模式和技术，反模式，样式，UX变体和其他有用的React-相关资料，全部在同一标签上。

他们有一个[GitHub回购](https://github.com/vasanthk/react-bits)，目前有9,923颗星。

一些示例包括道具代理等概念，在不同场景中处理各种UX的组合，甚至暴露了每个React开发人员应该知道的一些问题。

这就是他们在他们的页面上的样子。正如您在左侧的侧面菜单中所看到的，有大量信息：

![](https://miro.medium.com/max/30/0*gvnNoyvbhsXPhEQe.jpg?q=20)

* * *

15\. folderize
==============

[folderize](https://marketplace.visualstudio.com/items?itemName=ee92.folderize)是一个不到七天前发布的VS Code扩展。它允许您将组件_文件_转换为组件_文件夹_结构。您的React组件仍然是一个组件，它现在只是转换为一个目录。

例如，假设您正在创建一个React组件，该组件将文件作为道具来显示有用的信息，如元数据。

元数据组件的逻辑占用了大量的行，因此您决定将其拆分为单独的文件。但是，当您决定这样做时，现在您有两个相互关联的文件。

所以，如果你有一个如下所示的目录：

![](https://miro.medium.com/max/30/1*hjl52Hjyczkon0BoBIwYOA.jpeg?q=20)

您可能需要抽象出来的`FileView.js`，并`FileMetadata.js`在目录结构中，就像`Apples`\-特别是如果你想添加有关文件的更多组件喜欢`FileScanner.js`。

这就是folderize为你做的事情，这样他们就可以得到类似这样的结构：

![](https://miro.medium.com/max/30/1*a9qS_2LKz9z8rSxtwjYEVA.jpeg?q=20)

* * *

16\. React Starter Projects
===========================

这是一个很好的[React启动项目](https://www.javascriptstuff.com/react-starter-projects/)列表，您可以在一个页面上看到所有[项目](https://www.javascriptstuff.com/react-starter-projects/)。所以，如果你是那种发现同时有大量选项可供选择的人，那么这个就是你的选择。

一旦您看到自己喜欢的入门项目，就可以简单地克隆存储库并根据即将推出的应用程序进行自己的修改。

但是，并非所有这些都是通过克隆存储库来使用的，因为其中一些将被安装，这将成为项目的依赖项。

这样可以更轻松地获取更新并使您的项目更清洁。

这是页面的样子：

![](https://miro.medium.com/max/30/0*6Qo-3Gby6ZD_PBmj.jpg?q=20)

* * *

17.突出显示更新
=========

这可以说是任何人都可以在他们的开发工具包中拥有的最重要的工具。[突出显示更新](https://reactjs.org/docs/optimizing-performance.html)是React DevTools扩展的一项功能，可以查看页面中哪些组件不必要地重新呈现：

![](https://miro.medium.com/freeze/max/30/0*jKpkI4pbUl7fsauo.gif?q=20)

它可以帮助您在开发页面时发现瓶颈并使其变得更加容易，因为它们会使用橙色或红色对严重的重新渲染问题进行着色。

除非你的目标是建立一个平庸的应用程序，为什么你不希望这个美丽的东西在你身边？

* * *

18\. React Diff Viewer
======================

[React Diff Viewer](https://praneshravi.in/react-diff-viewer/)是一个简单而美观的文本差异查看器，使用Diff和React制作。这支持分割视图，内嵌视图，字差异，线条突出显示等功能。

如果您尝试将此功能嵌入到笔记中（例如[Boostnote](https://boostnote.io/)）并将其自定义为更适合您的应用程序（主题颜色，文档与故事书演示文稿的组合等），这将非常有用。

![](https://miro.medium.com/max/30/0*wVxQFJXZyw9al3Nc.jpg?q=20)

* * *

19\. JS.coach
=============

我最常用来寻找与React相关的材料的网站是[JS.coach](https://js.coach/?collection=React)。现在，我不知道为什么我没有看到很多关于这个宝石的提及，但我已经从这个页面中找到了我需要的任何东西。

它快速，简单，不断更新，永远不会给我所有项目所需的结果。

他们最近添加了_React VR_选项卡，这很精彩！

* * *

20.真棒反应
=======

GitHub [Awesome React](https://github.com/enaqx/awesome-react)开源存储库是与React相关的一些很棒的东西。

我可能会忘记其他网站并单独从这个链接学习React。您将找到批量有用的资源，这些资源肯定会帮助您构建出色的React应用程序！

* * *

21\. Proton Native
==================

[Proton Native](https://github.com/kusti8/proton-native)为您提供了一个React环境来构建跨平台的本机桌面应用程序。

它是[Electron](https://electronjs.org/)的替代[产品](https://electronjs.org/)，具有一些简洁的功能，包括：

*   与React Native相同的语法。
*   适用于现有的React库，例如Redux。
*   跨平台。
*   原生组件。没有电子。
*   兼容所有普通的[Node.js](https://nodejs.org/)包。

有兴趣了解更多？阅读他们的[文档](https://proton-native.js.org/#/)。

* * *

22\. Devhints React.js Cheatsheet
=================================

[React的一个相当不错的备忘单](https://devhints.io/react)，虽然它缺少React Hooks。不用担心，我将为React v16.8 +创建一个备忘单，敬请期待。

* * *

结论
==

这篇文章到此结束！我希望你在这里找到了有价值的信息，并希望将来能有更多的信息。