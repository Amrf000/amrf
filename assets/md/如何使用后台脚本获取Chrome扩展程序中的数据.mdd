![如何使用后台脚本获取Chrome扩展程序中的数据](https://levelup.gitconnected.com/how-to-use-background-script-to-fetch-data-in-chrome-extension-ef9d7f69625d)
如何使用后台脚本获取Chrome扩展程序中的数据
========================

[![胡晨](https://miro.medium.com/fit/c/96/96/0*wqXxW38QpnxDbRP_.jpeg)](/@chen?source=post_page-----ef9d7f69625d----------------------)

[胡晨](/@chen?source=post_page-----ef9d7f69625d----------------------)

跟随

[7月8日](/how-to-use-background-script-to-fetch-data-in-chrome-extension-ef9d7f69625d?source=post_page-----ef9d7f69625d----------------------) · 6 分钟阅读

![](https://miro.medium.com/max/60/1*E3_Npitn4Hi9qedCf5aA5w.jpeg?q=20)

![](https://miro.medium.com/max/1280/1*E3_Npitn4Hi9qedCf5aA5w.jpeg)

![](https://miro.medium.com/max/2560/1*E3_Npitn4Hi9qedCf5aA5w.jpeg)

黑客标签：Chrome扩展程序，用于在新标签上查看GitHub趋势项目📈

如果您不确定如何编写chrome扩展，您可以先查看我之前的故事[**如何使用React.js在5分钟内创建跨浏览器扩展**](/how-to-use-react-js-to-create-chrome-extension-in-5-minutes-2ddb11899815)。它教您如何使用create-react-app为新选项卡构建浏览器扩展。

我们构建的扩展程序很好，但每次用户打开一个新选项卡时，我们都会从API重新加载最新的趋势存储库，这可能需要几秒钟。即使它只需要一秒钟，新的标签打开仍然很慢。

> 如果我们定期在后台获取数据，将数据保存在localStorage中，并在打开新Tab时读取它会怎么样？

我花了几天时间对它进行研究，发现它完全可行。在本文中，我将与您分享我在此过程中学到的知识。

1.向manifest.json添加后台脚本
======================

后台脚本可以对浏览器事件做出反应并执行某些操作，后台页面在需要时加载，在空闲时卸载。要使用后台文件，请在文件中声明如下`manifest.json`：

![](https://miro.medium.com/max/60/1*MFhgQocI8gTPcWm3BG1IUw.png?q=20)

![](https://miro.medium.com/max/668/1*MFhgQocI8gTPcWm3BG1IUw.png)

![](https://miro.medium.com/max/1336/1*MFhgQocI8gTPcWm3BG1IUw.png)

您将注意到`persistent`参数，在扩展的生命周期中存在持久性后台页面，并且只有一个实例在Chrome浏览器的后台主动运行，等待用户与扩展进行交互。

根据[Google开发人员文档](https://developer.chrome.com/extensions/background_migration)，建议使用非持久模式，这有助于降低扩展的资源成本。非持久性后台脚本纯粹基于事件，它会一直处于休眠状态，直到他们正在侦听火灾，对指定指令做出反应然后卸载。一些事件的例子包括：

*   首先安装或更新扩展程序以重新启动新版本或浏览器。
*   后台页面正在侦听事件，并调度该事件。（例如，我们将`[alarm](https://developers.chrome.com/extensions/alarms)`定期创建派遣活动）
*   内容脚本或其他扩展程序[发送消息。](https://developer.chrome.com/extensions/messaging)
*   扩展中的另一个视图，例如弹出窗口，调用`[runtime.getBackgroundPage](https://developer.chrome.com/extensions/runtime#method-getBackgroundPage)`。

2.添加警报以定期触发操作
=============

您可能熟悉以下代码以定期运行某些内容：

window.setInterval（function（）{   
 console.log（'Hello，world！'）;   
}，1000 \* 60 \* 3）;

它每3分钟打印一次“Hello，world！”。要将其更改为基于事件的警报，我们将使用[警报API](https://developer.chrome.com/extensions/alarms)。

chrome.alarms.create（'refresh'，{periodInMinutes：3}）;

然后添加一个监听器。

chrome.alarms.onAlarm.addListener（（alarm）=> {   
 alert（“Hello，world！”）;   
}）;

安装扩展时我们需要创建一个警报，以便在后台每3分钟触发一次警报，这是我们`background.js`到目前为止。

要使用警报，您还需要添加`alarms`权限`manifest.json`

3.调试后台脚本
========

要测试上述脚本是否可以按预期运行，我们需要在本地测试它。这与[之前故事中](/how-to-use-react-js-to-create-chrome-extension-in-5-minutes-2ddb11899815)的步骤非常相似。

1.  确保开发人员模式已打开，如上图所示。
2.  单击“加载解压缩”，目标文件夹包含您的`manifest.json`。
3.  您应该单击`background page`，而不是在新选项卡上进行检查，因为后台页面在单独的进程中运行。
4.  如果您在本地更改了代码，则需要单击“重新加载”。

![](https://miro.medium.com/max/60/1*ZZGyikrW8ch4wb5RpJrzWg.jpeg?q=20)

![](https://miro.medium.com/max/1449/1*ZZGyikrW8ch4wb5RpJrzWg.jpeg)

![](https://miro.medium.com/max/2898/1*ZZGyikrW8ch4wb5RpJrzWg.jpeg)

在本地测试扩展

从下图中可以看出，警报每3分钟运行一次。

![](https://miro.medium.com/max/60/1*bWmCzyGWk-6Hgo96hhGPyw.png?q=20)

![](https://miro.medium.com/max/752/1*bWmCzyGWk-6Hgo96hhGPyw.png)

![](https://miro.medium.com/max/1504/1*bWmCzyGWk-6Hgo96hhGPyw.png)

检查后台脚本

你也可以在这里检查**网络**，**localStorage**。如果您的扩展程序修改了新标签，则会在您的扩展程序中共享localStorage，即我们在后台脚本和新标签扩展程序之间传递数据的方式。

4.获取数据并保存到localStorage
======================

现在我们有一个基本的报警工作，让我们获取数据并保存到本地存储。稍后在我们的React扩展中，我们可以直接从加载的本地存储读取而不是从API获取。

1.  首次安装或升级扩展时，我们将创建一个“ **刷新** ”警报，每30分钟获取并保存一次数据。
2.  我们将在重新启动chrome时获取数据，以便用户获取最新数据。
3.  我们还将每5分钟创建一个“ **看门狗** ”警报，以检查刷新警报是否仍然可用，如果没有，我们将创建它。（这里可能没有必要）

5.重用逻辑并转换到ES5
=============

上面的代码有两个问题，我们现在需要解决它们：

1.  请注意，我们没有编写实现，`fetchRepositories`并且`saveToLocalStorage`它们很可能已经在您的React应用程序中可用，可以将实现复制到`background.js`但是如果我们可以重用这些函数来保持代码DRY会更好。
2.  我们已经编写了`background.js`使用ES6语法，`**=>**`并且`**async await**`旧版浏览器可能无法运行它。

在这里，我们将使用`webpack`帮助捆绑和转换代码到ES5。

5.1安装依赖项
--------

纱线添加--dev webpack-cli npm-run-all rimraf

请注意，我们不应该安装`webpack.`（`react-scripts`已经依赖它，它会抱怨另一个实例`webpack`）。如果您不使用，请随意安装`create-react-app`。

5.2更改构建脚本
---------

现在更改`build`脚本以构建应用程序和后台脚本：

“prebuild”：“rimraf build”，  
“build”：“npm-run-all build：\*”，  
“build：app”：“INLINE\_RUNTIME\_CHUNK = false react-scripts build”，  
“build：bg”：“webpack  -模式制作./src/background.js --output ./build/background.js“，

我们已经`INLINE_RUNTIME_CHUNK=false`在[之前的教程中](/how-to-use-react-js-to-create-chrome-extension-in-5-minutes-2ddb11899815)介绍过了。更改后，如果您运行`npm run build`，它将执行

*   清理`build`文件夹
*   使用包捆绑React扩展 `react-script`
*   捆绑`src/background.js`使用webpack并导出到`build/background.js`

5.3重构./src/background.js
------------------------

在您的工作中`src/background.js`，您可以自由地导入任何外部库，`lodash`或者从其他文件导入常量/函数，例如：

从'./lib/helpers' 导入{   
 fetchRepositories，  
 saveToLocalStorage   
}; chrome.runtime.onInstalled.addListener（（）=> {   
...

你的代码现在更干净了。

5.4更新ESlint配置
-------------

如果您在编辑器中使用ESLint，可能会抱怨您的内容`chrome`未定义`./src/background.js`。这是因为`chrome`API仅在扩展中可用，我们需要告诉ESLint我们正在开发扩展，请忽略它们。

添加/更新您的以下行`package.json`。

“eslintConfig”：{   
 “extends”：“react-app”，  
 “env”：{   
 “browser”：true，  
 “webextensions”：true   
 }   
}

添加`webextensions`后`env`，编辑将不再抱怨它。

5.5添加.babelrc
-------------

Webpack需要一个`.babelrc`文件来编译，我们需要手动添加它。既然`react-scripts`已经安装`babel-presets-react-app`，我们只需要使用它。

{   
 “预设”：\[“react-app”\]   
}

现在运行`npm run build`将与您的`build`文件夹中的已编译后台脚本一起完成扩展。

而已！
===

如果您很好奇，可以在GitHub上检查我的扩展[提交](https://github.com/huchenme/hacker-tab-extension/commit/ff765829f2d96ea5e53265b11d4a27cec4133b5d)中更改的所有文件。

* * *

感谢您阅读此内容。您可以在[Github中](https://github.com/huchenme/hacker-tab-extension)查看源代码或在[Chrome Web Store](https://chrome.google.com/webstore/detail/hacker-tab/ibomigipadcieapbemkegkmadbbanbgm)和[Firefox Add-ons Hub中](https://addons.mozilla.org/en-US/firefox/addon/hacker-tab/)下载扩展[程序](https://addons.mozilla.org/en-US/firefox/addon/hacker-tab/)，快乐的黑客攻击，并让我知道您构建的内容！