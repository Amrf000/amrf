![从Async Task到Kotlin Coroutines的旅程](https://medium.com/@marcogomiero/a-journey-from-async-task-to-kotlin-coroutines-735c273d76cb)
从Async Task到Kotlin Coroutines的旅程
================================

[![Marco Gomiero](https://miro.medium.com/fit/c/48/48/1*Z1ub5UHMLGFoGTrzjnxZ9A.jpeg)](/@marcogomiero?source=post_page-----735c273d76cb----------------------)

[Marco Gomiero](/@marcogomiero?source=post_page-----735c273d76cb----------------------)

跟随

[1月14日](/@marcogomiero/a-journey-from-async-task-to-kotlin-coroutines-735c273d76cb?source=post_page-----735c273d76cb----------------------) · 5 分钟阅读

![](https://miro.medium.com/max/30/0*BnjRJYi8CNeaKOq1?q=20)

![](https://miro.medium.com/max/5472/0*BnjRJYi8CNeaKOq1)

照片来自[felipe](https://unsplash.com?utm_source=medium&utm_medium=referral) [lopez](https://unsplash.com/@flopez_nice?utm_source=medium&utm_medium=referral)在[Unsplash上](https://unsplash.com?utm_source=medium&utm_medium=referral)

几周前，我发布了RSS Parser Library的新版本，并在博客文章中谈到了更新。

[

RSS Parser 2.0：再见异步任务，欢迎Coroutines


--------------------------------------

### 

最后，我找到了一些时间坐下来处理我的图书馆RSS Parser。在开始描述所有酷之前......

#### 

medium.com



](/@marcogomiero/rss-parser-2-0-bye-bye-async-task-welcome-coroutines-6002c9de5145?source=post_page-----735c273d76cb----------------------)

此更新带来了图书馆基础设施的巨大变化。SPOILER：Kotlin和coroutines。今天，在这篇文章中，我想谈谈过渡过程以及我为开发这个新版本所做的所有决定。通过这种方式，我希望能够激励您离开Async Task并进入协程世界。

但是，在开始技术细节之前，我想分享一些资源以进入协程世界。如果您已经知道协同程序，则可以跳到本文的第二部分。

进入协程世界，这很有趣。我承诺：
================

进入协程世界可以做的第一件事就是使用Google提供的codelab。

[

在Android应用中使用Kotlin协同程序


---------------------------

### 

在此代码框结束时，您将有足够的经验将现有API转换为使用协同程序，您将......

#### 

codelabs.developers.google.com



](https://codelabs.developers.google.com/codelabs/kotlin-coroutines/?source=post_page-----735c273d76cb----------------------)

如果您不理解所有概念，请不要担心，Codelab对于进行第一次探索以及接收输入和研究特定参数的工具非常有用。

在codelab之后，我建议你看一下写得很好且充满实例的官方文档。

[

科特林/ kotlinx.coroutines


---------------------------

### 

图书馆对Kotlin协同程序的支持。通过在...上创建帐户，为Kotlin / kotlinx.coroutines开发做出贡献

#### 

github.com



](https://github.com/Kotlin/kotlinx.coroutines?source=post_page-----735c273d76cb----------------------)

然后你可以阅读一些Android特定的文章，而不是。以下是我读过的一些文章：

[

Kotlin Coroutines简介


-----------------------

### 

令人着迷的早期测试版的协同程序已逐渐进入实验阶段并且现在已经稳定...

#### 

antonis.me









](https://antonis.me/2018/12/12/an-introduction-to-kotlin-coroutines/?source=post_page-----735c273d76cb----------------------)

[

如何理解Kotlin协程


----------------

### 

协同程序是编写完全可读和可维护的异步代码的好方法。Kotlin提供......

#### 

proandroiddev.com



](https://proandroiddev.com/how-to-make-sense-of-kotlin-coroutines-b666c7151b93?source=post_page-----735c273d76cb----------------------)

[

Kotlin Coroutines图案和反图案


---------------------------

### 

决定写一些我认为你应该和不应该做的事情（或至少试图避免）......

#### 

proandroiddev.com



](https://proandroiddev.com/kotlin-coroutines-patterns-anti-patterns-f9d12984c68e?source=post_page-----735c273d76cb----------------------)

[

在Android中玩Kotlin：coroutines以及如何摆脱回调地狱


-----------------------------------------

### 

在这篇文章中，我将讨论Kotlin协同程序如何让你摆脱Android代码中的回调地狱......

#### 

medium.com



](/@andrea.bresolin/playing-with-kotlin-in-android-coroutines-and-how-to-get-rid-of-the-callback-hell-a96e817c108b?source=post_page-----735c273d76cb----------------------)

[

与Coroutines和Retrofit的Android网络


----------------------------------

### 

最近我一直在阅读，观看谈话，并且一般对Kotlin协同程序越来越好奇......

#### 

medium.com



](/exploring-android/android-networking-with-coroutines-and-retrofit-a2f20dd40a83?source=post_page-----735c273d76cb----------------------)

[

使用Kotlin Coroutine + Retrofit 2处理复杂的网络呼叫


--------------------------------------------

### 

当您使用某些Android应用程序时，您可能会遇到必须制作多个...的场景。

#### 

blog.oozou.com



](https://blog.oozou.com/handle-complex-network-call-with-kotlin-coroutine-retrofit-2-30a6cd1e0189?source=post_page-----735c273d76cb----------------------)

[

使用Kotlin协同程序的异步代码


---------------------

### 

Kotlin协程允许以熟悉的方式编写异步代码，如果你...代码的结构不会改变...

#### 

proandroiddev.com



](https://proandroiddev.com/async-code-using-kotlin-coroutines-233d201099ff?source=post_page-----735c273d76cb----------------------)

我还建议Chris Banes和Christina Lee的会谈：

[

Android Suspenders


----------------------

### 

所以你已经阅读了Coroutines指南，你已经准备好开始在你的Android应用程序中使用它们来进行协同程序了吗？大！

#### 

chris.banes.me



](https://chris.banes.me/talks/2018/android-suspenders/?source=post_page-----735c273d76cb----------------------)

[

技能问题


--------

### 

droidcon伦敦2018年会议演员。Christina Lee：Coroutines不是一个新概念，但它们在...中非常热闹。

#### 

skillsmatter.com



](https://skillsmatter.com/skillscasts/12727-coroutines-by-example?source=post_page-----735c273d76cb----------------------)

当然，有很多可用的资源和很多方法来学习协同程序。根据我的经验和学习路径，这些是一些建议。

从异步任务到协同程序的路径
=============

图书馆的第一个版本是2016年6月18日，这个时期没有今天所有美丽的东西（例如，Kotlin），而且我不知道我今天所知道的所有东西。代码是如此简单（现在我也可以说这很难看）但它确实有效。

旧学Java代码
--------

我使用异步任务来处理网络请求; 请求的结果将发送到XML解析器，该解析器在解析完成时通知其结果。这是解析器的代码：

然后，通过两个简单的回调将解析结果（或解析错误）通知给“主执行程序”（使用该库的应用程序）。

Kotlin和Coroutines，一个爱情故事
------------------------

2年后，我想摆脱Async Task，Java和所有丑陋的东西。取代这个地方的完美候选人是Kotlin和协同程序。但是，我最担心的是保持与仍然使用Java的所有开发人员的兼容性（认真的家伙？爱自己，转移到Kotlin）。实际上，无法从Java代码调用Kotlin协程。

起初，我试图弄清楚是否有一种方法可以从Java调用协同程序，但最后我提出了一个绝妙的想法：为这两种方式提供支持。

对于Java支持，我决定使用[Future](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html)和[Callable](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html)来处理异步操作。特别是，我实现了两个分别执行提取和解析任务的类。

然后使用上面报告的相同回调将解析的结果通知给“主执行器”。

通过这种方式，库的旧用户仍然可以调用相同的代码而不会注意到任何差异，但新的（当然也是旧的）可以学习和使用新方法。

正如您可以想象的那样，新部件是使用Kotlin协同程序编写的。如上所述，我将获取和解析任务分开。提取任务由_fetchXML_挂起函数执行，该函数将RSS提要的URL作为输入，并返回将成为_parseXML_挂起函数输入的[Deferred](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/)对象。然后，此函数将解析RSS Feed并返回已解析数据的列表。

这些函数通过使用另一个挂起函数向“主执行程序”公开，它将异步地获取和解析RSS提要。

上面报告的所有挂起函数都是使用IO Dispatcher调用的，它使用按需创建的线程的共享池。还有其他调度员，查看[文档](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/)，找到最适合您需求的[文档](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/)。

最后，从ViewModel（或在任何地方，取决于您的应用程序的体系结构），您可以使用[Scope](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/)启动协程，因此，例如，您可以在活动被销毁时停止它，然后“转换”URL到文章列表。

最后，我们已经完成了从Async Task到Coroutines的旅程。如果您有任何建议，疑问或任何形式的反馈，请发表评论！当然，您可以使用此示例作为永远留下（丑陋）异步任务的想法。

如果您想为库的开发做出贡献或只是报告错误，请访问Github上的回购：[https](https://github.com/prof18/RSS-Parser)：[//github.com/prof18/RSS-Parser](https://github.com/prof18/RSS-Parser)

特别感谢Android Developers Italia社区的（非常棒的）开发者给了我一些建议。如果您是意大利人，请加入[Slack](https://androiddevs.it/)吧！