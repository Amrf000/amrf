![我在我的Android应用程序中交换了RxJava for coroutines](https://proandroiddev.com/i-exchanged-rxjava-for-coroutines-in-my-android-application-why-you-probably-should-do-the-same-5526dfb38d0e)
#### 最重要的

**我在我的Android应用程序中交换了RxJava for coroutines。为什么你可能应该这样做**
========================================================

**RxJava就像一个火箭筒，大多数应用程序都没有使用它的一半火力。以下是如何将其更改为协同程序**
---------------------------------------------------

[![保罗佐藤](https://miro.medium.com/fit/c/48/48/1*G4-E8Ex6A02Bv7qQGED-IQ.jpeg)](/@paulocns?source=post_page-----5526dfb38d0e----------------------)

[保罗佐藤](/@paulocns?source=post_page-----5526dfb38d0e----------------------)

跟随

[2018年8月24日](/i-exchanged-rxjava-for-coroutines-in-my-android-application-why-you-probably-should-do-the-same-5526dfb38d0e?source=post_page-----5526dfb38d0e----------------------) · 5 分钟阅读

![](https://miro.medium.com/max/30/1*2DmmP127sd78Nj9oUztZEw.png?q=20)

![](https://miro.medium.com/max/2250/1*2DmmP127sd78Nj9oUztZEw.png)

更新
==

Kotlin 1.3已经淘汰，Coroutines不再具有实验性。我用coroutine\_v1分支更新我的repo并更新了我的基础Usecase。

此外，我更新了比较执行时间的图表，您可以看到V1版本的性能有所改善

![](https://miro.medium.com/max/30/1*oIjFEh8O90K-sNt7JLCR9g.png?q=20)

![](https://miro.medium.com/max/600/1*oIjFEh8O90K-sNt7JLCR9g.png)

**与V1比较**

* * *

我已经和RxJava合作多年了。对于任何Android项目来说，它可以说是最好的库之一，而现在它仍然具有优势，特别是如果你使用Java进行开发。但是，如果你正在使用Kotlin，我们可以说镇上有一个新的治安官。

大多数使用RxJava的人这样做只是为了控制线程并避免回调地狱（如果你不知道回调到底是什么，请认为自己很幸运。[**这就是**](https://www.quora.com/What-is-callback-hell)原因）。关键是：我们需要记住，RxJava的真正威力是反应式编程和背压。如果您正在使用它来控制异步请求，那么您基本上是使用火箭筒来杀死蜘蛛。它会完成这项工作，但它完全矫枉过正。

RxJava的一个显着缺点是方法计数。它是巨大的，如果你使用它，它往往遍布整个代码。使用Kotlin，您可以使用协同程序来实现使用RxJava创建的大多数行为。

但是......什么是协同程序？

协程是一种处理线程中的并发任务的方法。它将一直运行直到停止，并且线程将更改上下文到每个协程而不创建新线程。

Kotlin的协同程序仍然是实验性的，但是它正在Kotlin 1.3上毕业，所以我在下面写了一个新的UseCase类（用于干净的架构）使用它们。在此示例中，协同程序调用将封装在单个文件中。通过这样做，其他层将不依赖于协同程序来运行，从而提供更加分离的架构。

首先，我创建了一个父作业。这对于取消在此UseCase上创建的所有协同程序至关重要。当我们调用execute时，重要的是取消旧作业，以确保我们不泄漏任何协同程序（如果我们取消订阅此UseCase，也会发生这种情况）。

我也称为启动（UI）。这意味着我想创建一个将在UI线程上运行的协同程序。之后，我调用了后台方法，它在CommonPool上创建了一个异步（这实际上会有很差的性能）。反过来，async将返回Deferred，然后我调用它的await方法。它等待背景协程完成，带来结果或异常。

这可以用来实现我们使用RxJava做的大部分工作。下面是一些例子：

地图
--

我下载了searchShow结果并将其更改为返回第一个节目名称。

**RxJava**

**协同程序**

压缩
--

Zip将从观察者那里获取两次排放，然后将它们放在一起进行新的排放。请注意，使用RxJava，您必须告诉它使用每个Single上的subscribeOn并行执行调用。我们希望同时获得两者并将它们一起返回。

**RxJava**

**协同程序**

FlatMap
-------

在这种情况下，我正在搜索具有查询字符串的节目，并且对于每个结果（限于200）我也得到每个节目的评级。最后，它返回每个节目及其各自评级的列表。

**RxJava**

**协同程序**

请允许我解释一下。使用RxJava代码，我的存储库将返回List <ShowInfo>的单个发射，因此我需要有几个发射，每个ShowInfo一个。为此，我调用了flatMapPubliser。对于每次发射，我需要发出一个ShowResponse，最后收集所有列表。

我们最终会得到这样的结果：List <ShowInfo> foreach→（ShowInfo→ShowRating→ShowResponse）→List <ShowResponse>。

使用Coroutine，我为List <ShowInfo>的每个成员创建了一个映射，以转换为List <Deffered <ShowResponse >>，然后转换为List <ShowResponse>。

正如您所看到的，使用Rxjava完成的大部分工作都更容易实现同步调用。协同程序甚至可以处理flatMap，我认为它是RxJava中最复杂的函数之一。

众所周知，协程非常轻（[**这是**](/kotlin-coroutines-vs-rxjava-an-initial-performance-test-68160cfc6723)一个例子），但结果让我感到困惑。在这个例子中，RxJava平均运行3.1秒，而协同程序平均需要5.8秒才能在CommonPool上运行。

这让我质疑是否有错位; 后来我发现它是什么。我正在使用改装Call来阻止线程。

要解决此问题，我们有两个选项，具体取决于您使用的Android Studio：在Android Studio 3.1上，我们需要确保我们不会阻止后台线程。为此，我使用了这个库：

实现'ru.gildor.coroutines：kotlin-coroutines-retrofit：0.12.0'

这将创建一个扩展函数，用于改进Call以暂停该线程

**资料来源：**[**https**](https://github.com/gildor/kotlin-coroutines-retrofit)**：**[**//github.com/gildor/kotlin-coroutines-retrofit**](https://github.com/gildor/kotlin-coroutines-retrofit)

在Android Studio 3.2上，您可以将协程库更新为0.25.0版。这个版本有CoroutineContext **IO**（你可以在我的UseCase类上看到它评论）。

在没有阻塞调用的情况下在CommonPool上运行需要2.3秒，而使用带有阻塞调用的IO需要2.4。

![](https://miro.medium.com/max/30/1*vUG7SROZLpFXX6PJk8CVmw.png?q=20)

![](https://miro.medium.com/max/600/1*vUG7SROZLpFXX6PJk8CVmw.png)

**与RxJava，CommonPool Blocking上的Coroutines，CommonPool挂起和IO上的协同程序一起运行的时间图表比较**

* * *

我希望这篇文章能激发你尝试coroutines，一个更轻松，也许更快的RxJava替代品，并且更容易理解，因为你正在编写异步运行的同步代码。

* * *

很多人都问过，这是我用来生成这个基准测试的代码，请记住，代码仅用于测试，并且从未打算用于生产。

[

paulocns / coroutinesTests


------------------------------

### 

使用协同程序进行测试的存储库。通过在...上创建帐户，为paulocns / coroutinesTests开发做出贡献

#### 

github.com



](https://github.com/paulocns/coroutinesTests?source=post_page-----5526dfb38d0e----------------------)