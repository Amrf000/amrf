[https://wklchris.github.io/Py3-basic.html#%E9%9B%86%E5%90%88set](https://wklchris.github.io/Py3-basic.html#%E9%9B%86%E5%90%88set)
==================================================================================================================================
Python 中文编码
===========
Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。 解决方法为只要在文件开头加入 # -_\- coding: UTF-8 -_\- 或者 #coding=utf-8 就行了 或者# -_\- coding: cp936 -_\- 确保要和文件编码类型一致 注意：Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。
Python 保留字符
===========
and
exec
not
assert
finally
or
break
for
pass
class
from
print
continue
global
raise
def
if
return
del
import
try
elif
in
while
else
is
with
except
lambda
yield
行和缩进
====
学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。 缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。
多行语句
====
Python语句中一般以新行作为语句的结束符。 但是我们可以使用斜杠（ \\）将一行的语句分为多行显示 语句中包含 [], {} 或 () 括号就不需要使用多行连接符。
Python 引号
=========
Python 可以使用引号( ' )、双引号( " )、三引号( ''' 或 """ ) 来表示字符串，引号的开始与结束必须的相同类型的。 其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。
Python注释
========
python中单行注释采用 # 开头。 python 中多行注释使用三个单引号(''')或三个双引号(""")。
等待用户输入
======
下面的程序执行后就会等待用户输入，按回车键后就会退出：
!/usr/bin/python
================
\-_\- coding: UTF-8 -_\-
========================
raw\_input(”按下 enter 键退出，其他任意键显示…\\n”)
同一行显示多条语句
=========
Python可以在同一行中使用多条语句，语句之间使用分号(;)分割
Print 输出
========
print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ,
多个语句构成代码组
=========
缩进相同的一组语句构成一个代码块，我们称之代码组。 像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。 我们将首行及后面的代码组称为一个子句(clause)。
Python 变量类型
===========
*   变量赋值 Python 中的变量赋值不需要类型声明。 每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。 每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 等号（=）用来给变量赋值。 等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。
*   多个变量赋值 Python允许你同时为多个变量赋值 a = b = c = 1 a, b, c = 1, 2, "john"
*   标准数据类型 Numbers String List Tuple Dictionary
*   Python数字 数字数据类型用于存储数值。 他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象 您也可以使用del语句删除一些对象的引用。
1.  Python支持四种不同的数字类型：
2.  int（有符号整型）
3.  long（长整型\[也可以代表八进制和十六进制\]）
4.  float（浮点型）
5.  complex（复数） 注意：long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。
Python字符串
---------
python的字串列表有2种取值顺序: 1. 从左到右索引默认0开始的，最大范围是字符串长度少1 2. 从右到左索引默认-1开始的，最大范围是字符串开头![runoob](http://www.runoob.com/wp-content/uploads/2013/11/python-string-slice.png)如果你要实现从字符串中获取一段子字符串的话，可以使用 \[头下标:尾下标\] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。 \[头下标:尾下标\] 获取的子字符串包含头下标的字符，但不包含尾下标的字符 s = 'abcdef' s\[1:5\] 'bcde' 加号（+）是字符串连接运算符，星号（\*）是重复操作 print str # 输出完整字符串 print str\[0\] # 输出字符串中的第一个字符 print str\[2:5\] # 输出字符串中第三个至第五个之间的字符串 print str\[2:] # 输出从第三个字符开始的字符串 print str \* 2 # 输出字符串两次 print str + "TEST" # 输出连接的字符串
Python列表
========
List（列表） 是 Python 中使用最频繁的数据类型 列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。 列表用 [ ] 标识，是 python 最通用的复合数据类型。 列表中值的切割也可以用到变量 \[头下标:尾下标\] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。 加号 + 是列表连接运算符，星号 \* 是重复操作。 print list # 输出完整列表 print list\[0\] # 输出列表的第一个元素 print list\[1:3\] # 输出第二个至第三个元素 print list\[2:] # 输出从第三个开始至列表末尾的所有元素 print tinylist \* 2 # 输出列表两次 print list + tinylist # 打印组合的列表
Python元组
========
元组是另一个数据类型，类似于List（列表）。 元组用"()"标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。 print tuple # 输出完整元组 print tuple\[0\] # 输出元组的第一个元素 print tuple\[1:3\] # 输出第二个至第三个的元素 print tuple\[2:] # 输出从第三个开始至列表末尾的所有元素 print tinytuple \* 2 # 输出元组两次 print tuple + tinytuple # 打印组合的元组
Python 字典
=========
字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。 两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。 字典用"{ }"标识。字典由索引(key)和它对应的值value组成。 print dict\['one'] # 输出键为'one' 的值 print dict\[2\] # 输出键为 2 的值 print tinydict # 输出完整的字典 print tinydict.keys() # 输出所有键 print tinydict.values() # 输出所有值
Python数据类型转换
============
有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。 以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。
int(x [,base\])
将x转换为一个整数
long(x [,base\] )
将x转换为一个长整数
float(x)
将x转换到一个浮点数
complex(real [,imag\])
创建一个复数
str(x)
将对象 x 转换为字符串
repr(x)
将对象 x 转换为表达式字符串
eval(str)
用来计算在字符串中的有效Python表达式,并返回一个对象
tuple(s)
将序列 s 转换为一个元组
list(s)
将序列 s 转换为一个列表
set(s)
转换为可变集合
dict(d)
创建一个字典。d 必须是一个序列 (key,value)元组。
frozenset(s)
转换为不可变集合
chr(x)
将一个整数转换为一个字符
unichr(x)
将一个整数转换为Unicode字符
ord(x)
将一个字符转换为它的整数值
hex(x)
将一个整数转换为一个十六进制字符串
oct(x)
将一个整数转换为一个八进制字符串
Python 运算符
==========
*   Python算术运算符
+
加 - 两个对象相加
a + b 输出结果 30
\-
减 - 得到负数或是一个数减去另一个数
a - b 输出结果 -10
\*
乘 - 两个数相乘或是返回一个被重复若干次的字符串
a \* b 输出结果 200
/
除 - x除以y
b / a 输出结果 2
%
取模 - 返回除法的余数
b % a 输出结果 0
\*\*
幂 - 返回x的y次幂
a\*\*b 为10的20次方， 输出结果 100000000000000000000
//
取整除 - 返回商的整数部分（向下取整）
9//2 4 -9//2 -5
注意：Python2.x 里，整数除整数，只能得出整数。如果要得到小数部分，把其中一个数改成浮点数即可。 \* Python比较运算符
\==
等于 - 比较对象是否相等
(a == b) 返回 False。
!=
不等于 - 比较两个对象是否不相等
(a != b) 返回 true.
<>
不等于 - 比较两个对象是否不相等
(a <> b) 返回 true。这个运算符类似 != 。
>
大于 - 返回x是否大于y
(a > b) 返回 False。
<
小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。
(a < b) 返回 true。
>=
大于等于 - 返回x是否大于等于y。
(a >= b) 返回 False。
<=
小于等于 - 返回x是否小于等于y。
(a <= b) 返回 true。
Python赋值运算符
===========
\=
简单的赋值运算符
c = a + b 将 a + b 的运算结果赋值为 c
+=
加法赋值运算符
c += a 等效于 c = c + a
\-=
减法赋值运算符
c -= a 等效于 c = c - a
\*=
乘法赋值运算符
c \*= a 等效于 c = c \* a
/=
除法赋值运算符
c /= a 等效于 c = c / a
%=
取模赋值运算符
c %= a 等效于 c = c % a
\*\*=
幂赋值运算符
c \*\*= a 等效于 c = c \*\* a
//=
取整除赋值运算符
c //= a 等效于 c = c // a
Python位运算符
==========
按位运算符是把数字看作二进制来进行计算的。
&
按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
(a & b) 输出结果 12 ，二进制解释： 0000 1100
|
按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。
(a | b) 输出结果 61 ，二进制解释： 0011 1101
^
按位异或运算符：当两对应的二进位相异时，结果为1
(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
~
按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1
(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。
<<
左移动运算符：运算数的各二进位全部左移若干位，由 << 右边的数字指定了移动的位数，高位丢弃，低位补0。
a << 2 输出结果 240 ，二进制解释： 1111 0000
>>
右移动运算符：把”>>”左边的运算数的各二进位全部右移若干位，>> 右边的数字指定了移动的位数
a >> 2 输出结果 15 ，二进制解释： 0000 1111
Python逻辑运算符
===========
and
x and y
布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。
(a and b) 返回 20。
or
x or y
布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。
(a or b) 返回 10。
not
not x
布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。
not(a and b) 返回 False
Python成员运算符
===========
除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。
in
如果在指定的序列中找到值返回 True，否则返回 False。
x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
not in
如果在指定的序列中没有找到值返回 True，否则返回 False。
x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。
Python身份运算符
===========
身份运算符用于比较两个对象的存储单元
is
is 是判断两个标识符是不是引用自一个对象
x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False
is not
is not 是判断两个标识符是不是引用自不同对象
x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。
Python运算符优先级
============
\*\*
指数 (最高优先级)
~ + -
按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
\* / % //
乘，除，取模和取整除
\+ -
加法减法
>> <<
右移，左移运算符
&
位 ‘AND’
^ |
位运算符
<= < > >=
比较运算符
<> == !=
等于运算符
\= %= /= //= -= += \*= \*\*=
赋值运算符
is is not
身份运算符
in not in
成员运算符
not and or
逻辑运算符
Python 条件语句
===========
if 判断条件： 执行语句…… else： 执行语句……
if 判断条件1: 执行语句1…… elif 判断条件2: 执行语句2…… elif 判断条件3: 执行语句3…… else: 执行语句4……
if ( var == 100 ) : print ”变量 var 的值为100”
Python 循环语句
===========
while 循环
在给定的判断条件为 true 时执行循环体，否则退出循环体。
for 循环
重复执行语句
嵌套循环
你可以在while循环体中嵌套for循环
break 语句
在语句块执行过程中终止循环，并且跳出整个循环
continue 语句
在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。
pass 语句
pass是空语句，是为了保持程序结构的完整性。
*   Python While 循环语句 while 判断条件： 执行语句……![runoob](http://www.runoob.com/wp-content/uploads/2013/11/loop-over-python-list-animation.gif)
1.  无限循环 var = 1 while var == 1 : # 该条件永远为true，循环将无限执行下去 num = raw\_input("Enter a number :") print "You entered: ", num
2.  循环使用 else 语句 count = 0 while count < 5: print count, " is less than 5" count = count + 1 else: print count, " is not less than 5"
3.  简单语句组 flag = 1 while (flag): print 'Given flag is really true!'
Python for 循环语句 Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。 for iterating\_var in sequence: statements(s) for letter in 'Python': # 第一个实例 print '当前字母 :', letter
fruits = ['banana', 'apple', 'mango'] for fruit in fruits: # 第二个实例 print '当前水果 :', fruit 1. 通过序列索引迭代 fruits = ['banana', 'apple', 'mango'] for index in range(len(fruits)): print '当前水果 :', fruits\[index\] 2. 循环使用 else 语句 在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。 for num in range(10,20): # 迭代 10 到 20 之间的数字 for i in range(2,num): # 根据因子迭代 if num%i == 0: # 确定第一个因子 j=num/i # 计算第二个因子 print '%d 等于 %d \* %d' % (num,i,j) break # 跳出当前循环 else: # 循环的 else 部分 print num, '是一个质数' \* Python 循环嵌套 Python for 循环嵌套语法： for iterating\_var in sequence: for iterating\_var in sequence: statements(s) statements(s) Python while 循环嵌套语法： while expression: while expression: statement(s) statement(s) i = 2 while(i < 100): j = 2 while(j <= (i/j)): if not(i%j): break j = j + 1 if (j > i/j) : print i, " 是素数" i = i + 1 \* Python break 语句 Python break语句，就像在C语言中，打破了最小封闭for或while循环。 break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。 break语句用在while和for循环中。 如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。 \* Python continue 语句 Python continue 语句跳出本次循环，而break跳出整个循环。 continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。 continue语句用在while和for循环中。 \* Python pass 语句 Python pass是空语句，是为了保持程序结构的完整性。 pass 不做任何事情，一般用做占位语句。
Python Number(数字)
=================
数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间 您也可以使用del语句删除一些 Number 对象引用 \* Python Number 类型转换
int(x [,base ])
将x转换为一个整数
long(x [,base ])
将x转换为一个长整数
float(x )
将x转换到一个浮点数
complex(real [,imag ])
创建一个复数
str(x )
将对象 x 转换为字符串
repr(x )
将对象 x 转换为表达式字符串
eval(str )
用来计算在字符串中的有效Python表达式,并返回一个对象
tuple(s )
将序列 s 转换为一个元组
list(s )
将序列 s 转换为一个列表
chr(x )
将一个整数转换为一个字符
unichr(x )
将一个整数转换为Unicode字符
ord(x )
将一个字符转换为它的整数值
hex(x )
将一个整数转换为一个十六进制字符串
oct(x )
将一个整数转换为一个八进制字符串
*   Python math 模块、cmath 模块  
    Python math 模块提供了许多对浮点数的数学运算函数。 Python cmath 模块包含了一些用于复数运算的函数。 cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。 要使用 math 或 cmath 函数必须先导入： import math 查看 math 查看包中的内容: import math dir(math) import cmath dir(cmath)
*   Python数学函数
abs(x)
返回数字的绝对值，如abs(-10) 返回 10
ceil(x)
返回数字的上入整数，如math.ceil(4.1) 返回 5
cmp(x, y)
如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1
exp(x)
返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045
fabs(x)
返回数字的绝对值，如math.fabs(-10) 返回10.0
floor(x)
返回数字的下舍整数，如math.floor(4.9)返回 4
log(x)
如math.log(math.e)返回1.0,math.log(100,10)返回2.0
log10(x)
返回以10为基数的x的对数，如math.log10(100)返回 2.0
max(x1, x2,…)
返回给定参数的最大值，参数可以为序列。
min(x1, x2,…)
返回给定参数的最小值，参数可以为序列。
modf(x)
返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。
pow(x, y)
x\*\*y 运算后的值。
round(x [,n\])
返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。
sqrt(x)
返回数字x的平方根
*   Python随机数函数
choice(seq)
从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
randrange (\[start,] stop [,step\])
从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1
random()
随机生成下一个实数，它在\[0,1)范围内。
seed(\[x\])
改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。
shuffle(lst)
将序列的所有元素随机排序
uniform(x, y)
随机生成下一个实数，它在\[x,y\]范围内。
*   Python三角函数
acos(x)
返回x的反余弦弧度值。
asin(x)
返回x的反正弦弧度值。
atan(x)
返回x的反正切弧度值。
atan2(y, x)
返回给定的 X 及 Y 坐标值的反正切值。
cos(x)
返回x的弧度的余弦值。
hypot(x, y)
返回欧几里德范数 sqrt(x\*x + y\*y)。
sin(x)
返回的x弧度的正弦值。
tan(x)
返回x弧度的正切值。
degrees(x)
将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0
radians(x)
将角度转换为弧度
*   Python数学常量
pi
数学常量 pi（圆周率，一般以π来表示）
e
数学常量 e，e即自然常数（自然常数）。
Python 字符串
==========
1.  Python访问字符串中的值 var1 = 'Hello World!' var2 = "Python Runoob" print "var1\[0\]: ", var1\[0\] print "var2\[1:5\]: ", var2\[1:5\]
2.  Python字符串更新 你可以对已存在的字符串进行修改，并赋值给另一个变量
3.  Python转义字符 在需要在字符中使用特殊字符时，python用反斜杠(\\)转义字符
\\(在行尾时)
续行符
\\\\
反斜杠符号
\\’
单引号
\\”
双引号
\\a
响铃
\\b
退格(Backspace)
\\e
转义
\\000
空
\\n
换行
\\v
纵向制表符
\\t
横向制表符
\\r
回车
\\f
换页
\\oyy
八进制数，yy代表的字符，例如：\\o12代表换行
\\xyy
十六进制数，yy代表的字符，例如：\\x0a代表换行
\\other
其它的字符以普通格式输出
*   Python字符串运算符
+
字符串连接
a + b ‘HelloPython’
\*
重复输出字符串
a \* 2 ‘HelloHello’
[]
通过索引获取字符串中字符
a\[1\] ‘e’
[ : ]
截取字符串中的一部分
a\[1:4\] ‘ell’
in
成员运算符 - 如果字符串中包含给定的字符返回 True
“H” in a >>> True
not in
成员运算符 - 如果字符串中不包含给定的字符返回 True
“M” not in a >>> True
r/R
原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法。
print r’\\n’ \\n;print R’\\n’ \\n
%
格式字符串
请看下一章节
*   Python 字符串格式化 Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。 在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。 print "My name is %s and weight is %d kg!" % ('Zara', 21) python字符串格式化符号:
%c
格式化字符及其ASCII码
%s
格式化字符串
%d
格式化整数
%u
格式化无符号整型
%o
格式化无符号八进制数
%x
格式化无符号十六进制数
%X
格式化无符号十六进制数（大写）
%f
格式化浮点数字，可指定小数点后的精度
%e
用科学计数法格式化浮点数
%E
作用同%e，用科学计数法格式化浮点数
%g
%f和%e的简写
%G
%f 和 %E 的简写
%p
用十六进制数格式化变量的地址
格式化操作符辅助指令:
\*
定义宽度或者小数点精度
\-
用做左对齐
+
在正数前面显示加号( + )
<sp>
在正数前面显示空格
#
在八进制数前面显示零(’0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)
0
显示的数字前面填充’0’而不是默认的空格
%
’%%’输出一个单一的’%’
(var)
映射变量(字典参数)
m.n.
m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)
Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。 \* Python三引号（triple quotes） python中三引号可以将复杂的字符串进行复制: python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。 三引号的语法是一对连续的单引号或者双引号（通常都是成对的用）。 hi = '''hi there''' hi # repr() 'hi\\nthere' print hi # str() hi there  
三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。 一个典型的用例是，当你需要一块HTML或者SQL时，这时当用三引号标记，使用传统的转义字符体系将十分费神。 \* Unicode 字符串 Python 中定义一个 Unicode 字符串和定义一个普通字符串一样简单： u'Hello World !' 引号前小写的"u"表示这里创建的是一个 Unicode 字符串。如果你想加入一个特殊字符，可以使用 Python 的 Unicode-Escape 编码 u'Hello\\u0020World !' 被替换的 \\u0020 标识表示在给定位置插入编码值为 0x0020 的 Unicode 字符（空格符） \* python的字符串内建函数
string.capitalize()
把字符串的第一个字符大写
string.center(width)
返回一个原字符串居中,并使用空格填充至长度 width 的新字符串
string.count(str, beg=0, end=len(string))
返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数
string.decode(encoding=’UTF-8’, errors=’strict’)
以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’
string.encode(encoding=’UTF-8’, errors=’strict’)
以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’
string.endswith(obj, beg=0, end=len(string))
检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.
string.expandtabs(tabsize=8)
把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。
string.find(str, beg=0, end=len(string))
检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1
string.format()
格式化字符串
string.index(str, beg=0, end=len(string))
跟find()方法一样，只不过如果str不在 string中会报一个异常.
string.isalnum()
如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False
string.isalpha()
如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False
string.isdecimal()
如果 string 只包含十进制数字则返回 True 否则返回 False.
string.isdigit()
如果 string 只包含数字则返回 True 否则返回 False.
string.islower()
如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False
string.isnumeric()
如果 string 中只包含数字字符，则返回 True，否则返回 False
string.isspace()
如果 string 中只包含空格，则返回 True，否则返回 False.
string.istitle()
如果 string 是标题化的(见 title())则返回 True，否则返回 False
string.isupper()
如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
string.join(seq)
以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
string.ljust(width)
返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串
string.lower()
转换 string 中所有大写字符为小写.
string.lstrip()
截掉 string 左边的空格
string.maketrans(intab, outtab\])
maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
max(str)
返回字符串 str 中最大的字母。
min(str)
返回字符串 str 中最小的字母。
string.partition(str)
有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string\_pre\_str,str,string\_post\_str),如果 string 中不包含str 则 string\_pre\_str == string.
string.replace(str1, str2, num=string.count(str1))
把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.
string.rfind(str, beg=0,end=len(string) )
类似于 find()函数，不过是从右边开始查找.
string.rindex( str, beg=0,end=len(string))
类似于 index()，不过是从右边开始.
string.rjust(width)
返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串
string.rpartition(str)
类似于 partition()函数,不过是从右边开始查找
string.rstrip()
删除 string 字符串末尾的空格.
string.split(str=””, num=string.count(str))
以 str 为分隔符切片 string，如果 num有指定值，则仅分隔 num 个子字符串
string.splitlines(\[keepends\])
按照行(’\\\\r’, ’\\\\r\\\\n’, \\\\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。
string.startswith(obj, beg=0,end=len(string))
检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.
string.strip(\[obj\])
在 string 上执行 lstrip()和 rstrip()
string.swapcase()
翻转 string 中的大小写
string.title()
返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())
string.translate(str, del=””)
根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中
string.upper()
转换 string 中的小写字母为大写
string.zfill(width)
返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0
Python 列表(List)
===============
Python有6个序列的内置类型，但最常见的是列表和元组。 序列都可以进行的操作包括索引，切片，加，乘，检查成员。 \* 访问列表中的值 使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符 \* 更新列表 你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项 \* 删除列表元素 可以使用 del 语句来删除列表的元素 \* Python列表脚本操作符 列表对 + 和 \* 的操作符与字符串相似。+ 号用于组合列表，\* 号用于重复列表。
len(\[1, 2, 3\])
3
长度
\[1, 2, 3\] + \[4, 5, 6\]
\[1, 2, 3, 4, 5, 6\]
组合
[’Hi!’] \* 4
[’Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]
重复
3 in \[1, 2, 3\]
True
元素是否存在于列表中
for x in \[1, 2, 3\]: print x,
1 2 3
迭代
*   Python列表截取
L\[2\]
‘Taobao’
读取列表中第三个元素
L\[-2\]
‘Runoob’
读取列表中倒数第二个元素
L\[1:]
[’Runoob’, ‘Taobao’]
从第二个元素开始截取列表
*   Python列表函数和方法
cmp(list1, list2)
比较两个列表的元素
len(list)
列表元素个数
max(list)
返回列表元素最大值
min(list)
返回列表元素最小值
list(seq)
将元组转换为列表
list.append(obj)
在列表末尾添加新的对象
list.count(obj)
统计某个元素在列表中出现的次数
list.extend(seq)
在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
list.index(obj)
从列表中找出某个值第一个匹配项的索引位置
list.insert(index, obj)
将对象插入列表
list.pop(\[index=-1\])
移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
list.remove(obj)
移除列表中某个值的第一个匹配项
list.reverse()
反向列表中元素
list.sort(cmp=None, key=None, reverse=False)
对原列表进行排序
Python 元组
=========
Python的元组与列表类似，不同之处在于元组的元素不能修改。 元组使用小括号，列表使用方括号。 元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可 \* 访问元组 元组可以使用下标索引来访问元组中的值 \* 修改元组 元组中的元素值是不允许修改的，但我们可以对元组进行连接组合 \* 删除元组 元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组 \* 元组运算符 与字符串一样，元组之间可以使用 + 号和 \* 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。 \* 元组索引，截取
*   无关闭分隔符 任意无符号的对象，以逗号隔开，默认为元组
*   元组内置函数 Python元组包含了以下内置函数
cmp(tuple1, tuple2)
比较两个元组元素。
len(tuple)
计算元组元素个数。
max(tuple)
返回元组中元素最大值。
min(tuple)
返回元组中元素最小值。
tuple(seq)
将列表转换为元组。
Python 字典(Dictionary)
=====================
字典是另一种可变容器模型，且可存储任意类型对象。 字典的每个键值 key=>value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示： d = {key1 : value1, key2 : value2 } 键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。 可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。 \* 访问字典里的值 把相应的键放入熟悉的方括弧 \* 修改字典 向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值 dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'} dict\['Age'] = 8 # 更新 dict\['School'] = "RUNOOB" # 添加 \* 删除字典元素 能删单一的元素也能清空字典，清空只需一项操作。 显示删除一个字典用del命令 dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'} del dict\['Name'] # 删除键是'Name'的条目 dict.clear() # 清空词典所有条目 del dict # 删除词典 \* 字典键的特性 字典值可以没有限制地取任何python对象，既可以是标准的对象，也可以是用户定义的，但键不行。 两个重要的点需要记住： 1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住 2）键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行 \* 字典内置函数和方法
cmp(dict1, dict2)
比较两个字典元素。
len(dict)
计算字典元素个数，即键的总数。
str(dict)
输出字典可打印的字符串表示。
type(variable)
返回输入的变量类型，如果变量是字典就返回字典类型。
dict.clear()
删除字典内所有元素
dict.copy()
返回一个字典的浅复制
dict.fromkeys(seq\[, val\])
创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值
dict.get(key, default=None)
返回指定键的值，如果值不在字典中返回default值
dict.has\_key(key)
如果键在字典dict里返回true，否则返回false
dict.items()
以列表返回可遍历的(键, 值) 元组数组
dict.keys()
以列表返回一个字典所有的键
dict.setdefault(key, default=None)
和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
dict.update(dict2)
把字典dict2的键/值对更新到dict里
dict.values()
以列表返回字典中的所有值
pop(key\[,default\])
删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。
popitem()
随机返回并删除字典中的一对键和值。
链接:[Python语法速览（一）](https://bbs.huaweicloud.com/blogs/335f6c29fdb111e8bd5a7ca23e93a891)